# ---------- Build stage ----------
# Node 22‑alpine already ships with npm 11.x – no need for a global upgrade.
FROM node:22-alpine AS build

# Metadata (optional but useful)
LABEL maintainer="James <james@example.com>"
LABEL description="Frontend build for Cerebras Bank‑Statement Analyzer"
LABEL version="1.0.0"

WORKDIR /app

# -----------------------------------------------------------------
# 1️⃣  Copy only the manifest files (package.json + lockfile if present)
# -----------------------------------------------------------------
COPY package*.json ./

# -----------------------------------------------------------------
# 2️⃣  Install dependencies.
#     • Use npm ci when a lockfile exists (fast & deterministic)
#     • Fallback to npm install --legacy-peer-deps for projects without a lockfile
# -----------------------------------------------------------------
RUN if [ -f package-lock.json ]; then \
        npm ci; \
    else \
        npm install --legacy-peer-deps; \
    fi

# -----------------------------------------------------------------
# 3️⃣  Copy the rest of the source code (respect .dockerignore)
# -----------------------------------------------------------------
COPY . .

# -----------------------------------------------------------------
# 4️⃣  Build the React application
# -----------------------------------------------------------------
RUN npm run build

# -----------------------------------------------------------------
# 5️⃣  Remove dev‑dependencies to keep the final image small
# -----------------------------------------------------------------
RUN npm prune --production

# ---------- Production stage ----------
FROM node:22-alpine AS runtime

WORKDIR /app

# Create a non‑root user (node user exists in the official image)
USER node

# -----------------------------------------------------------------
# Copy only the artefacts needed at runtime:
#   • compiled static files (build/)
#   • the production‑only node_modules
#   • package.json (useful for debugging/version info)
# -----------------------------------------------------------------
COPY --from=build /app/build ./build
COPY --from=build /app/package*.json ./
COPY --from=build /app/node_modules ./node_modules

EXPOSE 3000

# Simple health‑check (Docker will call this every 30 s)
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s \
  CMD wget -qO- http://localhost:3000 || exit 1

# Serve the static build with the tiny `serve` package (installed as a dev‑dependency)
CMD ["npx", "serve", "-s", "build", "-l", "3000"]