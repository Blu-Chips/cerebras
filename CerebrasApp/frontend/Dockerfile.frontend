# ---------- Build stage ----------
# Node 22‑alpine already ships with npm 11.x, so we don’t need a global upgrade.
FROM node:22-alpine AS build

WORKDIR /app

# -----------------------------------------------------------------
# 1️⃣  Copy only the manifest files (package.json + lockfile if present)
# -----------------------------------------------------------------
COPY package*.json ./

# -----------------------------------------------------------------
# 2️⃣  Install dependencies.
#     • Use npm ci when a lockfile exists (fast & deterministic)
#     • Fallback to npm install --legacy-peer-deps for projects without a lockfile
# -----------------------------------------------------------------
RUN if [ -f package-lock.json ]; then \
        npm ci; \
    else \
        npm install --legacy-peer-deps; \
    fi

# -----------------------------------------------------------------
# 3️⃣  Copy the rest of the source code.
#     The .dockerignore file (shown above) excludes node_modules,
#     git data, logs, etc., so the image stays lean.
# -----------------------------------------------------------------
COPY . .

# -----------------------------------------------------------------
# 4️⃣  Build the React application
# -----------------------------------------------------------------
RUN npm run build

# ---------- Production stage ----------
FROM node:22-alpine AS runtime

WORKDIR /app

# -----------------------------------------------------------------
# Copy only the artefacts needed at runtime:
#   • compiled static files (build/)
#   • the exact node_modules that were installed in the build stage
#   • package.json (useful for debugging/version info)
# -----------------------------------------------------------------
COPY --from=build /app/build ./build
COPY --from=build /app/package*.json ./
COPY --from=build /app/node_modules ./node_modules

EXPOSE 3000

# Serve the static build with the tiny `serve` package (installed as a dev‑dependency)
CMD ["npx", "serve", "-s", "build", "-l", "3000"]