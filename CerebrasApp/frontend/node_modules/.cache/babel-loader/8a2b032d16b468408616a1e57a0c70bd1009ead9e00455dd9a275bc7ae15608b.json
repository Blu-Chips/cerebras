{"ast":null,"code":"import _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createAnatomy } from '@zag-js/anatomy';\nimport { parseColor, getColorAreaGradient, normalizeColor } from '@zag-js/color-utils';\nimport { raf, getInitialFocus, dispatchInputValueEvent, disableTextSelection, trackPointerMove, trackFormControl, setElementValue, getRelativePoint, queryAll, dataAttr, visuallyHiddenStyle, getEventStep, getEventKey, isLeftClick, isModifierKey, getEventPoint, query } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { tryCatch, createSplitProps } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\"root\", \"label\", \"control\", \"trigger\", \"positioner\", \"content\", \"area\", \"areaThumb\", \"valueText\", \"areaBackground\", \"channelSlider\", \"channelSliderLabel\", \"channelSliderTrack\", \"channelSliderThumb\", \"channelSliderValueText\", \"channelInput\", \"transparencyGrid\", \"swatchGroup\", \"swatchTrigger\", \"swatchIndicator\", \"swatch\", \"eyeDropperTrigger\", \"formatTrigger\", \"formatSelect\"]);\nvar parts = anatomy.build();\nvar getRootId = ctx => {\n  var _ctx$ids$root, _ctx$ids;\n  return (_ctx$ids$root = (_ctx$ids = ctx.ids) === null || _ctx$ids === void 0 ? void 0 : _ctx$ids.root) !== null && _ctx$ids$root !== void 0 ? _ctx$ids$root : \"color-picker:\".concat(ctx.id);\n};\nvar getLabelId = ctx => {\n  var _ctx$ids$label, _ctx$ids2;\n  return (_ctx$ids$label = (_ctx$ids2 = ctx.ids) === null || _ctx$ids2 === void 0 ? void 0 : _ctx$ids2.label) !== null && _ctx$ids$label !== void 0 ? _ctx$ids$label : \"color-picker:\".concat(ctx.id, \":label\");\n};\nvar getHiddenInputId = ctx => {\n  var _ctx$ids$hiddenInput, _ctx$ids3;\n  return (_ctx$ids$hiddenInput = (_ctx$ids3 = ctx.ids) === null || _ctx$ids3 === void 0 ? void 0 : _ctx$ids3.hiddenInput) !== null && _ctx$ids$hiddenInput !== void 0 ? _ctx$ids$hiddenInput : \"color-picker:\".concat(ctx.id, \":hidden-input\");\n};\nvar getControlId = ctx => {\n  var _ctx$ids$control, _ctx$ids4;\n  return (_ctx$ids$control = (_ctx$ids4 = ctx.ids) === null || _ctx$ids4 === void 0 ? void 0 : _ctx$ids4.control) !== null && _ctx$ids$control !== void 0 ? _ctx$ids$control : \"color-picker:\".concat(ctx.id, \":control\");\n};\nvar getTriggerId = ctx => {\n  var _ctx$ids$trigger, _ctx$ids5;\n  return (_ctx$ids$trigger = (_ctx$ids5 = ctx.ids) === null || _ctx$ids5 === void 0 ? void 0 : _ctx$ids5.trigger) !== null && _ctx$ids$trigger !== void 0 ? _ctx$ids$trigger : \"color-picker:\".concat(ctx.id, \":trigger\");\n};\nvar getContentId = ctx => {\n  var _ctx$ids$content, _ctx$ids6;\n  return (_ctx$ids$content = (_ctx$ids6 = ctx.ids) === null || _ctx$ids6 === void 0 ? void 0 : _ctx$ids6.content) !== null && _ctx$ids$content !== void 0 ? _ctx$ids$content : \"color-picker:\".concat(ctx.id, \":content\");\n};\nvar getPositionerId = ctx => {\n  var _ctx$ids$positioner, _ctx$ids7;\n  return (_ctx$ids$positioner = (_ctx$ids7 = ctx.ids) === null || _ctx$ids7 === void 0 ? void 0 : _ctx$ids7.positioner) !== null && _ctx$ids$positioner !== void 0 ? _ctx$ids$positioner : \"color-picker:\".concat(ctx.id, \":positioner\");\n};\nvar getFormatSelectId = ctx => {\n  var _ctx$ids$formatSelect, _ctx$ids8;\n  return (_ctx$ids$formatSelect = (_ctx$ids8 = ctx.ids) === null || _ctx$ids8 === void 0 ? void 0 : _ctx$ids8.formatSelect) !== null && _ctx$ids$formatSelect !== void 0 ? _ctx$ids$formatSelect : \"color-picker:\".concat(ctx.id, \":format-select\");\n};\nvar getAreaId = ctx => {\n  var _ctx$ids$area, _ctx$ids9;\n  return (_ctx$ids$area = (_ctx$ids9 = ctx.ids) === null || _ctx$ids9 === void 0 ? void 0 : _ctx$ids9.area) !== null && _ctx$ids$area !== void 0 ? _ctx$ids$area : \"color-picker:\".concat(ctx.id, \":area\");\n};\nvar getAreaGradientId = ctx => {\n  var _ctx$ids$areaGradient, _ctx$ids0;\n  return (_ctx$ids$areaGradient = (_ctx$ids0 = ctx.ids) === null || _ctx$ids0 === void 0 ? void 0 : _ctx$ids0.areaGradient) !== null && _ctx$ids$areaGradient !== void 0 ? _ctx$ids$areaGradient : \"color-picker:\".concat(ctx.id, \":area-gradient\");\n};\nvar getAreaThumbId = ctx => {\n  var _ctx$ids$areaThumb, _ctx$ids1;\n  return (_ctx$ids$areaThumb = (_ctx$ids1 = ctx.ids) === null || _ctx$ids1 === void 0 ? void 0 : _ctx$ids1.areaThumb) !== null && _ctx$ids$areaThumb !== void 0 ? _ctx$ids$areaThumb : \"color-picker:\".concat(ctx.id, \":area-thumb\");\n};\nvar getChannelSliderTrackId = (ctx, channel) => {\n  var _ctx$ids$channelSlide, _ctx$ids10, _ctx$ids10$channelSli;\n  return (_ctx$ids$channelSlide = (_ctx$ids10 = ctx.ids) === null || _ctx$ids10 === void 0 || (_ctx$ids10$channelSli = _ctx$ids10.channelSliderTrack) === null || _ctx$ids10$channelSli === void 0 ? void 0 : _ctx$ids10$channelSli.call(_ctx$ids10, channel)) !== null && _ctx$ids$channelSlide !== void 0 ? _ctx$ids$channelSlide : \"color-picker:\".concat(ctx.id, \":slider-track:\").concat(channel);\n};\nvar getChannelSliderThumbId = (ctx, channel) => {\n  var _ctx$ids$channelSlide2, _ctx$ids11, _ctx$ids11$channelSli;\n  return (_ctx$ids$channelSlide2 = (_ctx$ids11 = ctx.ids) === null || _ctx$ids11 === void 0 || (_ctx$ids11$channelSli = _ctx$ids11.channelSliderThumb) === null || _ctx$ids11$channelSli === void 0 ? void 0 : _ctx$ids11$channelSli.call(_ctx$ids11, channel)) !== null && _ctx$ids$channelSlide2 !== void 0 ? _ctx$ids$channelSlide2 : \"color-picker:\".concat(ctx.id, \":slider-thumb:\").concat(channel);\n};\nvar getContentEl = ctx => ctx.getById(getContentId(ctx));\nvar getAreaThumbEl = ctx => ctx.getById(getAreaThumbId(ctx));\nvar getChannelSliderThumbEl = (ctx, channel) => ctx.getById(getChannelSliderThumbId(ctx, channel));\nvar getFormatSelectEl = ctx => ctx.getById(getFormatSelectId(ctx));\nvar getHiddenInputEl = ctx => ctx.getById(getHiddenInputId(ctx));\nvar getAreaEl = ctx => ctx.getById(getAreaId(ctx));\nvar getAreaValueFromPoint = (ctx, point, dir) => {\n  const areaEl = getAreaEl(ctx);\n  if (!areaEl) return;\n  const {\n    getPercentValue\n  } = getRelativePoint(point, areaEl);\n  return {\n    x: getPercentValue({\n      dir,\n      orientation: \"horizontal\"\n    }),\n    y: getPercentValue({\n      orientation: \"vertical\"\n    })\n  };\n};\nvar getControlEl = ctx => ctx.getById(getControlId(ctx));\nvar getTriggerEl = ctx => ctx.getById(getTriggerId(ctx));\nvar getPositionerEl = ctx => ctx.getById(getPositionerId(ctx));\nvar getChannelSliderTrackEl = (ctx, channel) => ctx.getById(getChannelSliderTrackId(ctx, channel));\nvar getChannelSliderValueFromPoint = (ctx, point, channel, dir) => {\n  const trackEl = getChannelSliderTrackEl(ctx, channel);\n  if (!trackEl) return;\n  const {\n    getPercentValue\n  } = getRelativePoint(point, trackEl);\n  return {\n    x: getPercentValue({\n      dir,\n      orientation: \"horizontal\"\n    }),\n    y: getPercentValue({\n      orientation: \"vertical\"\n    })\n  };\n};\nvar getChannelInputEls = ctx => {\n  return [...queryAll(getContentEl(ctx), \"input[data-channel]\"), ...queryAll(getControlEl(ctx), \"input[data-channel]\")];\n};\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(\"hsl(\".concat(color.getChannelValue(\"hue\"), \", 100%, 50%)\"));\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\":\n      {\n        return color;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = props2 => {\n  const {\n    channel,\n    value,\n    dir,\n    orientation\n  } = props2;\n  const bgDirection = getSliderBackgroundDirection(orientation, dir);\n  const {\n    minValue,\n    maxValue\n  } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return \"linear-gradient(to \".concat(bgDirection, \", rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)\");\n    case \"lightness\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return \"linear-gradient(to \".concat(bgDirection, \", \").concat(start, \", \").concat(middle, \", \").concat(end, \")\");\n      }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return \"linear-gradient(to \".concat(bgDirection, \", \").concat(start, \", \").concat(end, \")\");\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    send,\n    prop,\n    computed,\n    state,\n    scope\n  } = service;\n  const value = context.get(\"value\");\n  const format = context.get(\"format\");\n  const areaValue = computed(\"areaValue\");\n  const valueAsString = computed(\"valueAsString\");\n  const disabled = computed(\"disabled\");\n  const readOnly = !!prop(\"readOnly\");\n  const invalid = !!prop(\"invalid\");\n  const required = !!prop(\"required\");\n  const interactive = computed(\"interactive\");\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = props2 => {\n    var _props2$xChannel, _props2$yChannel;\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: (_props2$xChannel = props2.xChannel) !== null && _props2$xChannel !== void 0 ? _props2$xChannel : channels[1],\n      yChannel: (_props2$yChannel = props2.yChannel) !== null && _props2$yChannel !== void 0 ? _props2$yChannel : channels[2]\n    };\n  };\n  const currentPlacement = context.get(\"currentPlacement\");\n  const popperStyles = getPlacementStyles(_objectSpread(_objectSpread({}, prop(\"positioning\")), {}, {\n    placement: currentPlacement\n  }));\n  function getSwatchTriggerState(props2) {\n    const color = normalizeColor(props2.value).toFormat(context.get(\"format\"));\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props2.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    inline: !!prop(\"inline\"),\n    setOpen(nextOpen) {\n      if (prop(\"inline\")) return;\n      const open2 = state.hasTag(\"open\");\n      if (open2 === nextOpen) return;\n      send({\n        type: nextOpen ? \"OPEN\" : \"CLOSE\"\n      });\n    },\n    setValue(value2) {\n      send({\n        type: \"VALUE.SET\",\n        value: normalizeColor(value2),\n        src: \"set-color\"\n      });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-channel\"\n      });\n    },\n    format: context.get(\"format\"),\n    setFormat(format2) {\n      const formatValue = value.toFormat(format2);\n      send({\n        type: \"VALUE.SET\",\n        value: formatValue,\n        src: \"set-format\"\n      });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-alpha\"\n      });\n    },\n    getRootProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.root.attrs), {}, {\n        dir: prop(\"dir\"),\n        id: getRootId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      }));\n    },\n    getLabelProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.label.attrs), {}, {\n        dir: prop(\"dir\"),\n        id: getLabelId(scope),\n        htmlFor: getHiddenInputId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-required\": dataAttr(required),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(getControlEl(scope), \"[data-channel=hex]\");\n          inputEl === null || inputEl === void 0 || inputEl.focus({\n            preventScroll: true\n          });\n        }\n      }));\n    },\n    getControlProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.control.attrs), {}, {\n        id: getControlId(scope),\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      }));\n    },\n    getTriggerProps() {\n      return normalize.button(_objectSpread(_objectSpread({}, parts.trigger.attrs), {}, {\n        id: getTriggerId(scope),\n        dir: prop(\"dir\"),\n        disabled,\n        \"aria-label\": \"select color. current color is \".concat(valueAsString),\n        \"aria-controls\": getContentId(scope),\n        \"aria-labelledby\": getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.CLICK\"\n          });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.BLUR\"\n          });\n        },\n        style: {\n          position: \"relative\"\n        }\n      }));\n    },\n    getPositionerProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.positioner.attrs), {}, {\n        id: getPositionerId(scope),\n        dir: prop(\"dir\"),\n        style: popperStyles.floating\n      }));\n    },\n    getContentProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.content.attrs), {}, {\n        id: getContentId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: -1,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      }));\n    },\n    getValueTextProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.valueText.attrs), {}, {\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      }));\n    },\n    getAreaProps() {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const {\n        areaStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element(_objectSpread(_objectSpread({}, parts.area.attrs), {}, {\n        id: getAreaId(scope),\n        role: \"group\",\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = {\n            xChannel,\n            yChannel\n          };\n          send({\n            type: \"AREA.POINTER_DOWN\",\n            point,\n            channel,\n            id: \"area\"\n          });\n          event.preventDefault();\n        },\n        style: _objectSpread({\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\"\n        }, areaStyles)\n      }));\n    },\n    getAreaBackgroundProps() {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const {\n        areaGradientStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element(_objectSpread(_objectSpread({}, parts.areaBackground.attrs), {}, {\n        id: getAreaGradientId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        style: _objectSpread({\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\"\n        }, areaGradientStyles)\n      }));\n    },\n    getAreaThumbProps() {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const channel = {\n        xChannel,\n        yChannel\n      };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const isRtl = prop(\"dir\") === \"rtl\";\n      const finalXPercent = isRtl ? 1 - xPercent : xPercent;\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      const color = areaValue.withChannelValue(\"alpha\", 1).toString(\"css\");\n      return normalize.element(_objectSpread(_objectSpread({}, parts.areaThumb.attrs), {}, {\n        id: getAreaThumbId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": \"\".concat(xChannel, \" and \").concat(yChannel),\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": \"\".concat(xChannel, \" \").concat(xValue, \", \").concat(yChannel, \" \").concat(yValue),\n        style: {\n          position: \"absolute\",\n          left: \"\".concat(finalXPercent * 100, \"%\"),\n          top: \"\".concat(yPercent * 100, \"%\"),\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          \"--color\": color,\n          background: color\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"AREA.FOCUS\",\n            id: \"area\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"AREA.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"AREA.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"AREA.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"AREA.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"AREA.PAGE_UP\",\n                channel,\n                step\n              });\n            },\n            PageDown() {\n              send({\n                type: \"AREA.PAGE_DOWN\",\n                channel,\n                step\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      }));\n    },\n    getTransparencyGridProps() {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        size = \"12px\"\n      } = props2;\n      return normalize.element(_objectSpread(_objectSpread({}, parts.transparencyGrid.attrs), {}, {\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      }));\n    },\n    getChannelSliderProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      return normalize.element(_objectSpread(_objectSpread({}, parts.channelSlider.attrs), {}, {\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({\n            type: \"CHANNEL_SLIDER.POINTER_DOWN\",\n            channel,\n            format: format2,\n            point,\n            id: channel,\n            orientation\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      }));\n    },\n    getChannelSliderTrackProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      return normalize.element(_objectSpread(_objectSpread({}, parts.channelSliderTrack.attrs), {}, {\n        id: getChannelSliderTrackId(scope, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: prop(\"dir\"),\n            value: normalizedValue\n          })\n        }\n      }));\n    },\n    getChannelSliderLabelProps(props2) {\n      const {\n        channel\n      } = props2;\n      return normalize.element(_objectSpread(_objectSpread({}, parts.channelSliderLabel.attrs), {}, {\n        \"data-channel\": channel,\n        onClick(event) {\n          var _scope$getById;\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = getChannelSliderThumbId(scope, channel);\n          (_scope$getById = scope.getById(thumbId)) === null || _scope$getById === void 0 || _scope$getById.focus({\n            preventScroll: true\n          });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      }));\n    },\n    getChannelSliderValueTextProps(props2) {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.channelSliderValueText.attrs), {}, {\n        \"data-channel\": props2.channel\n      }));\n    },\n    getChannelSliderThumbProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const isRtl = prop(\"dir\") === \"rtl\";\n      const finalOffset = orientation === \"horizontal\" && isRtl ? 1 - offset : offset;\n      const placementStyles = orientation === \"horizontal\" ? {\n        left: \"\".concat(finalOffset * 100, \"%\"),\n        top: \"50%\"\n      } : {\n        top: \"\".concat(offset * 100, \"%\"),\n        left: \"50%\"\n      };\n      return normalize.element(_objectSpread(_objectSpread({}, parts.channelSliderThumb.attrs), {}, {\n        id: getChannelSliderThumbId(scope, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": \"\".concat(channel, \" \").concat(channelValue),\n        style: _objectSpread({\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\")\n        }, placementStyles),\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_SLIDER.FOCUS\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_UP\",\n                channel\n              });\n            },\n            PageDown() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_DOWN\",\n                channel\n              });\n            },\n            Home() {\n              send({\n                type: \"CHANNEL_SLIDER.HOME\",\n                channel\n              });\n            },\n            End() {\n              send({\n                type: \"CHANNEL_SLIDER.END\",\n                channel\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      }));\n    },\n    getChannelInputProps(props2) {\n      const {\n        channel\n      } = props2;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input(_objectSpread(_objectSpread({}, parts.channelInput.attrs), {}, {\n        dir: prop(\"dir\"),\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        readOnly,\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange === null || channelRange === void 0 ? void 0 : channelRange.minValue,\n        max: channelRange === null || channelRange === void 0 ? void 0 : channelRange.maxValue,\n        step: channelRange === null || channelRange === void 0 ? void 0 : channelRange.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_INPUT.FOCUS\",\n            channel\n          });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({\n            type: \"CHANNEL_INPUT.BLUR\",\n            channel,\n            value: value2,\n            isTextField\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({\n              type: \"CHANNEL_INPUT.CHANGE\",\n              channel,\n              value: value2,\n              isTextField\n            });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      }));\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: prop(\"name\"),\n        tabIndex: -1,\n        readOnly,\n        required,\n        id: getHiddenInputId(scope),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button(_objectSpread(_objectSpread({}, parts.eyeDropperTrigger.attrs), {}, {\n        type: \"button\",\n        dir: prop(\"dir\"),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"EYEDROPPER.CLICK\"\n          });\n        }\n      }));\n    },\n    getSwatchGroupProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.swatchGroup.attrs), {}, {\n        role: \"group\"\n      }));\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.button(_objectSpread(_objectSpread({}, parts.swatchTrigger.attrs), {}, {\n        disabled: swatchState.disabled,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": \"select \".concat(swatchState.valueAsString, \" as the color\"),\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({\n            type: \"SWATCH_TRIGGER.CLICK\",\n            value: swatchState.value\n          });\n        },\n        style: {\n          \"--color\": swatchState.valueAsString,\n          position: \"relative\"\n        }\n      }));\n    },\n    getSwatchIndicatorProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.swatchIndicator.attrs), {}, {\n        dir: prop(\"dir\"),\n        hidden: !swatchState.checked\n      }));\n    },\n    getSwatchProps(props2) {\n      const {\n        respectAlpha = true\n      } = props2;\n      const swatchState = getSwatchTriggerState(props2);\n      const color = swatchState.value.toString(respectAlpha ? \"css\" : \"hex\");\n      return normalize.element(_objectSpread(_objectSpread({}, parts.swatch.attrs), {}, {\n        dir: prop(\"dir\"),\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          \"--color\": color,\n          position: \"relative\",\n          background: color\n        }\n      }));\n    },\n    getFormatTriggerProps() {\n      return normalize.button(_objectSpread(_objectSpread({}, parts.formatTrigger.attrs), {}, {\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": \"change color format to \".concat(getNextFormat(format)),\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(format);\n          send({\n            type: \"FORMAT.SET\",\n            format: nextFormat,\n            src: \"format-trigger\"\n          });\n        }\n      }));\n    },\n    getFormatSelectProps() {\n      return normalize.select(_objectSpread(_objectSpread({}, parts.formatSelect.attrs), {}, {\n        \"aria-label\": \"change color format\",\n        dir: prop(\"dir\"),\n        defaultValue: prop(\"format\"),\n        disabled,\n        onChange(event) {\n          const format2 = assertFormat(event.currentTarget.value);\n          send({\n            type: \"FORMAT.SET\",\n            format: format2,\n            src: \"format-select\"\n          });\n        }\n      }));\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(\"^(\".concat(formats.join(\"|\"), \")$\"));\nfunction getNextFormat(format) {\n  var _formats;\n  const index = formats.indexOf(format);\n  return (_formats = formats[index + 1]) !== null && _formats !== void 0 ? _formats : formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(\"Unsupported color format: \".concat(format));\n}\nvar parse = colorString => {\n  return parseColor(colorString);\n};\n\n// src/utils/is-valid-hex.ts\nvar HEX_REGEX = /^[0-9a-fA-F]{3,8}$/;\nfunction isValidHex(value) {\n  return HEX_REGEX.test(value);\n}\nfunction prefixHex(value) {\n  if (value.startsWith(\"#\")) return value;\n  if (isValidHex(value)) return \"#\".concat(value);\n  return value;\n}\n\n// src/color-picker.machine.ts\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props(_ref) {\n    let {\n      props: props2\n    } = _ref;\n    return _objectSpread(_objectSpread({\n      dir: \"ltr\",\n      defaultValue: parse(\"#000000\"),\n      defaultFormat: \"rgba\",\n      openAutoFocus: true\n    }, props2), {}, {\n      positioning: _objectSpread({\n        placement: \"bottom\"\n      }, props2.positioning)\n    });\n  },\n  initialState(_ref2) {\n    let {\n      prop\n    } = _ref2;\n    const open = prop(\"open\") || prop(\"defaultOpen\") || prop(\"inline\");\n    return open ? \"open\" : \"idle\";\n  },\n  context(_ref3) {\n    let {\n      prop,\n      bindable,\n      getContext\n    } = _ref3;\n    return {\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        isEqual(a, b) {\n          return a.toString(\"css\") === (b === null || b === void 0 ? void 0 : b.toString(\"css\"));\n        },\n        hash(a) {\n          return a.toString(\"css\");\n        },\n        onChange(value) {\n          var _prop;\n          const ctx = getContext();\n          const valueAsString = value.toString(ctx.get(\"format\"));\n          (_prop = prop(\"onValueChange\")) === null || _prop === void 0 || _prop({\n            value,\n            valueAsString\n          });\n        }\n      })),\n      format: bindable(() => ({\n        defaultValue: prop(\"defaultFormat\"),\n        value: prop(\"format\"),\n        onChange(format) {\n          var _prop2;\n          (_prop2 = prop(\"onFormatChange\")) === null || _prop2 === void 0 || _prop2({\n            format\n          });\n        }\n      })),\n      activeId: bindable(() => ({\n        defaultValue: null\n      })),\n      activeChannel: bindable(() => ({\n        defaultValue: null\n      })),\n      activeOrientation: bindable(() => ({\n        defaultValue: null\n      })),\n      fieldsetDisabled: bindable(() => ({\n        defaultValue: false\n      })),\n      restoreFocus: bindable(() => ({\n        defaultValue: true\n      })),\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      }))\n    };\n  },\n  computed: {\n    rtl: _ref4 => {\n      let {\n        prop\n      } = _ref4;\n      return prop(\"dir\") === \"rtl\";\n    },\n    disabled: _ref5 => {\n      let {\n        prop,\n        context\n      } = _ref5;\n      return !!prop(\"disabled\") || context.get(\"fieldsetDisabled\");\n    },\n    interactive: _ref6 => {\n      let {\n        prop\n      } = _ref6;\n      return !(prop(\"disabled\") || prop(\"readOnly\"));\n    },\n    valueAsString: _ref7 => {\n      let {\n        context\n      } = _ref7;\n      return context.get(\"value\").toString(context.get(\"format\"));\n    },\n    areaValue: _ref8 => {\n      let {\n        context\n      } = _ref8;\n      const format = context.get(\"format\").startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n      return context.get(\"value\").toFormat(format);\n    }\n  },\n  effects: [\"trackFormControl\"],\n  watch(_ref9) {\n    let {\n      prop,\n      context,\n      action,\n      track\n    } = _ref9;\n    track([() => context.hash(\"value\")], () => {\n      action([\"syncInputElements\", \"dispatchChangeEvent\"]);\n    });\n    track([() => context.get(\"format\")], () => {\n      action([\"syncFormatSelectElement\"]);\n    });\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": {\n      actions: [\"setValue\"]\n    },\n    \"FORMAT.SET\": {\n      actions: [\"setFormat\"]\n    },\n    \"CHANNEL_INPUT.CHANGE\": {\n      actions: [\"setChannelColorFromInput\"]\n    },\n    \"EYEDROPPER.CLICK\": {\n      actions: [\"openEyeDropper\"]\n    },\n    \"SWATCH_TRIGGER.CLICK\": {\n      actions: [\"setValue\"]\n    }\n  },\n  states: {\n    idle: {\n      tags: [\"closed\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"CHANNEL_INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setActiveChannel\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"closed\", \"focused\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"CHANNEL_INPUT.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"setChannelColorFromInput\"]\n        },\n        \"TRIGGER.BLUR\": {\n          target: \"idle\"\n        }\n      }\n    },\n    open: {\n      tags: [\"open\"],\n      effects: [\"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [{\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"setReturnFocus\"]\n        }, {\n          target: \"idle\"\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"AREA.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"AREA.ARROW_LEFT\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_RIGHT\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_UP\": {\n          actions: [\"incrementAreaYChannel\"]\n        },\n        \"AREA.ARROW_DOWN\": {\n          actions: [\"decrementAreaYChannel\"]\n        },\n        \"AREA.PAGE_UP\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.PAGE_DOWN\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_LEFT\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.HOME\": {\n          actions: [\"setChannelToMin\"]\n        },\n        \"CHANNEL_SLIDER.END\": {\n          actions: [\"setChannelToMax\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          actions: [\"setChannelColorFromInput\"]\n        },\n        INTERACT_OUTSIDE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"SWATCH_TRIGGER.CLICK\": [{\n          guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n          actions: [\"setValue\", \"invokeOnClose\"]\n        }, {\n          guard: \"closeOnSelect\",\n          target: \"focused\",\n          actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          actions: [\"setValue\"]\n        }]\n      }\n    },\n    \"open:dragging\": {\n      tags: [\"open\"],\n      exit: [\"clearActiveChannel\"],\n      effects: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [{\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"setReturnFocus\"]\n        }, {\n          target: \"idle\"\n        }],\n        \"AREA.POINTER_MOVE\": {\n          actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_MOVE\": {\n          actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        INTERACT_OUTSIDE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      closeOnSelect: _ref0 => {\n        let {\n          prop\n        } = _ref0;\n        return !!prop(\"closeOnSelect\");\n      },\n      isOpenControlled: _ref1 => {\n        let {\n          prop\n        } = _ref1;\n        return prop(\"open\") != null || !!prop(\"inline\");\n      },\n      shouldRestoreFocus: _ref10 => {\n        let {\n          context\n        } = _ref10;\n        return !!context.get(\"restoreFocus\");\n      }\n    },\n    effects: {\n      trackPositioning(_ref11) {\n        let {\n          context,\n          prop,\n          scope\n        } = _ref11;\n        if (prop(\"inline\")) return;\n        if (!context.get(\"currentPlacement\")) {\n          var _prop3;\n          context.set(\"currentPlacement\", (_prop3 = prop(\"positioning\")) === null || _prop3 === void 0 ? void 0 : _prop3.placement);\n        }\n        const anchorEl = getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        return getPlacement(anchorEl, getPositionerEl2, _objectSpread(_objectSpread({}, prop(\"positioning\")), {}, {\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        }));\n      },\n      trackDismissableElement(_ref12) {\n        let {\n          context,\n          scope,\n          prop,\n          send\n        } = _ref12;\n        if (prop(\"inline\")) return;\n        const getContentEl2 = () => getContentEl(scope);\n        return trackDismissableElement(getContentEl2, {\n          type: \"popover\",\n          exclude: getTriggerEl(scope),\n          defer: true,\n          onInteractOutside(event) {\n            var _prop4;\n            (_prop4 = prop(\"onInteractOutside\")) === null || _prop4 === void 0 || _prop4(event);\n            if (event.defaultPrevented) return;\n            context.set(\"restoreFocus\", !(event.detail.focusable || event.detail.contextmenu));\n          },\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onFocusOutside: prop(\"onFocusOutside\"),\n          onDismiss() {\n            send({\n              type: \"INTERACT_OUTSIDE\"\n            });\n          }\n        });\n      },\n      trackFormControl(_ref13) {\n        let {\n          context,\n          scope,\n          send\n        } = _ref13;\n        const inputEl = getHiddenInputEl(scope);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            context.set(\"fieldsetDisabled\", disabled);\n          },\n          onFormReset() {\n            send({\n              type: \"VALUE.SET\",\n              value: context.initial(\"value\"),\n              src: \"form.reset\"\n            });\n          }\n        });\n      },\n      trackPointerMove(_ref14) {\n        let {\n          context,\n          scope,\n          event,\n          send\n        } = _ref14;\n        return trackPointerMove(scope.getDoc(), {\n          onPointerMove(_ref15) {\n            let {\n              point\n            } = _ref15;\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n            send({\n              type,\n              point,\n              format: event.format\n            });\n          },\n          onPointerUp() {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n            send({\n              type\n            });\n          }\n        });\n      },\n      disableTextSelection(_ref16) {\n        let {\n          scope\n        } = _ref16;\n        return disableTextSelection({\n          doc: scope.getDoc(),\n          target: getContentEl(scope)\n        });\n      }\n    },\n    actions: {\n      openEyeDropper(_ref17) {\n        let {\n          scope,\n          context\n        } = _ref17;\n        const win = scope.getWin();\n        const isSupported = \"EyeDropper\" in win;\n        if (!isSupported) return;\n        const picker = new win.EyeDropper();\n        picker.open().then(_ref18 => {\n          let {\n            sRGBHex\n          } = _ref18;\n          const format = context.get(\"value\").getFormat();\n          const color = parseColor(sRGBHex).toFormat(format);\n          context.set(\"value\", color);\n        }).catch(() => void 0);\n      },\n      setActiveChannel(_ref19) {\n        let {\n          context,\n          event\n        } = _ref19;\n        context.set(\"activeId\", event.id);\n        if (event.channel) context.set(\"activeChannel\", event.channel);\n        if (event.orientation) context.set(\"activeOrientation\", event.orientation);\n      },\n      clearActiveChannel(_ref20) {\n        let {\n          context\n        } = _ref20;\n        context.set(\"activeChannel\", null);\n        context.set(\"activeId\", null);\n        context.set(\"activeOrientation\", null);\n      },\n      setAreaColorFromPoint(_ref21) {\n        let {\n          context,\n          event,\n          computed,\n          scope,\n          prop\n        } = _ref21;\n        const v = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const {\n          xChannel,\n          yChannel\n        } = event.channel || context.get(\"activeChannel\");\n        const percent = getAreaValueFromPoint(scope, event.point, prop(\"dir\"));\n        if (!percent) return;\n        const xValue = v.getChannelPercentValue(xChannel, percent.x);\n        const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);\n        const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n        context.set(\"value\", color);\n      },\n      setChannelColorFromPoint(_ref22) {\n        let {\n          context,\n          event,\n          computed,\n          scope,\n          prop\n        } = _ref22;\n        const channel = event.channel || context.get(\"activeId\");\n        const normalizedValue = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const percent = getChannelSliderValueFromPoint(scope, event.point, channel, prop(\"dir\"));\n        if (!percent) return;\n        const orientation = context.get(\"activeOrientation\") || \"horizontal\";\n        const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n        const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n        const color = normalizedValue.withChannelValue(channel, value);\n        context.set(\"value\", color);\n      },\n      setValue(_ref23) {\n        let {\n          context,\n          event\n        } = _ref23;\n        context.set(\"value\", event.value);\n      },\n      setFormat(_ref24) {\n        let {\n          context,\n          event\n        } = _ref24;\n        context.set(\"format\", event.format);\n      },\n      dispatchChangeEvent(_ref25) {\n        let {\n          scope,\n          computed\n        } = _ref25;\n        dispatchInputValueEvent(getHiddenInputEl(scope), {\n          value: computed(\"valueAsString\")\n        });\n      },\n      syncInputElements(_ref26) {\n        let {\n          context,\n          scope\n        } = _ref26;\n        syncChannelInputs(scope, context.get(\"value\"));\n      },\n      invokeOnChangeEnd(_ref27) {\n        var _prop5;\n        let {\n          context,\n          prop,\n          computed\n        } = _ref27;\n        (_prop5 = prop(\"onValueChangeEnd\")) === null || _prop5 === void 0 || _prop5({\n          value: context.get(\"value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      setChannelColorFromInput(_ref28) {\n        var _prop6;\n        let {\n          context,\n          event,\n          scope,\n          prop\n        } = _ref28;\n        const {\n          channel,\n          isTextField,\n          value\n        } = event;\n        const currentAlpha = context.get(\"value\").getChannelValue(\"alpha\");\n        let color;\n        if (channel === \"alpha\") {\n          let valueAsNumber = parseFloat(value);\n          valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n          color = context.get(\"value\").withChannelValue(\"alpha\", valueAsNumber);\n        } else if (isTextField) {\n          color = tryCatch(() => {\n            const parseValue = channel === \"hex\" ? prefixHex(value) : value;\n            return parse(parseValue).withChannelValue(\"alpha\", currentAlpha);\n          }, () => context.get(\"value\"));\n        } else {\n          const current = context.get(\"value\").toFormat(context.get(\"format\"));\n          const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n          color = current.withChannelValue(channel, valueAsNumber);\n        }\n        syncChannelInputs(scope, context.get(\"value\"), color);\n        context.set(\"value\", color);\n        (_prop6 = prop(\"onValueChangeEnd\")) === null || _prop6 === void 0 || _prop6({\n          value: color,\n          valueAsString: color.toString(context.get(\"format\"))\n        });\n      },\n      incrementChannel(_ref29) {\n        let {\n          context,\n          event\n        } = _ref29;\n        const color = context.get(\"value\").incrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementChannel(_ref30) {\n        let {\n          context,\n          event\n        } = _ref30;\n        const color = context.get(\"value\").decrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaXChannel(_ref31) {\n        let {\n          context,\n          event,\n          computed\n        } = _ref31;\n        const {\n          xChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaXChannel(_ref32) {\n        let {\n          context,\n          event,\n          computed\n        } = _ref32;\n        const {\n          xChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaYChannel(_ref33) {\n        let {\n          context,\n          event,\n          computed\n        } = _ref33;\n        const {\n          yChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaYChannel(_ref34) {\n        let {\n          context,\n          event,\n          computed\n        } = _ref34;\n        const {\n          yChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      setChannelToMax(_ref35) {\n        let {\n          context,\n          event\n        } = _ref35;\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.maxValue);\n        context.set(\"value\", color);\n      },\n      setChannelToMin(_ref36) {\n        let {\n          context,\n          event\n        } = _ref36;\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.minValue);\n        context.set(\"value\", color);\n      },\n      focusAreaThumb(_ref37) {\n        let {\n          scope\n        } = _ref37;\n        raf(() => {\n          var _getAreaThumbEl;\n          (_getAreaThumbEl = getAreaThumbEl(scope)) === null || _getAreaThumbEl === void 0 || _getAreaThumbEl.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusChannelThumb(_ref38) {\n        let {\n          event,\n          scope\n        } = _ref38;\n        raf(() => {\n          var _getChannelSliderThum;\n          (_getChannelSliderThum = getChannelSliderThumbEl(scope, event.channel)) === null || _getChannelSliderThum === void 0 || _getChannelSliderThum.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setInitialFocus(_ref39) {\n        let {\n          prop,\n          scope\n        } = _ref39;\n        if (!prop(\"openAutoFocus\")) return;\n        raf(() => {\n          const element = getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\")\n          });\n          element === null || element === void 0 || element.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setReturnFocus(_ref40) {\n        let {\n          scope\n        } = _ref40;\n        raf(() => {\n          var _getTriggerEl;\n          (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 || _getTriggerEl.focus({\n            preventScroll: true\n          });\n        });\n      },\n      syncFormatSelectElement(_ref41) {\n        let {\n          context,\n          scope\n        } = _ref41;\n        syncFormatSelect(scope, context.get(\"format\"));\n      },\n      invokeOnOpen(_ref42) {\n        var _prop7;\n        let {\n          prop\n        } = _ref42;\n        if (prop(\"inline\")) return;\n        (_prop7 = prop(\"onOpenChange\")) === null || _prop7 === void 0 || _prop7({\n          open: true\n        });\n      },\n      invokeOnClose(_ref43) {\n        var _prop8;\n        let {\n          prop\n        } = _ref43;\n        if (prop(\"inline\")) return;\n        (_prop8 = prop(\"onOpenChange\")) === null || _prop8 === void 0 || _prop8({\n          open: false\n        });\n      },\n      toggleVisibility(_ref44) {\n        let {\n          prop,\n          event,\n          send\n        } = _ref44;\n        send({\n          type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: event\n        });\n      }\n    }\n  }\n});\nfunction syncChannelInputs(scope, currentValue, nextValue) {\n  const channelInputEls = getChannelInputEls(scope);\n  raf(() => {\n    channelInputEls.forEach(inputEl => {\n      const channel = inputEl.dataset.channel;\n      setElementValue(inputEl, getChannelValue(nextValue || currentValue, channel));\n    });\n  });\n}\nfunction syncFormatSelect(scope, format) {\n  const selectEl = getFormatSelectEl(scope);\n  if (!selectEl) return;\n  raf(() => setElementValue(selectEl, format));\n}\nvar props = createProps()([\"closeOnSelect\", \"dir\", \"disabled\", \"format\", \"defaultFormat\", \"getRootNode\", \"id\", \"ids\", \"initialFocusEl\", \"inline\", \"name\", \"positioning\", \"onFocusOutside\", \"onFormatChange\", \"onInteractOutside\", \"onOpenChange\", \"onPointerDownOutside\", \"onValueChange\", \"onValueChangeEnd\", \"defaultOpen\", \"open\", \"positioning\", \"required\", \"readOnly\", \"value\", \"defaultValue\", \"invalid\", \"openAutoFocus\"]);\nvar splitProps = createSplitProps(props);\nvar areaProps = createProps()([\"xChannel\", \"yChannel\"]);\nvar splitAreaProps = createSplitProps(areaProps);\nvar channelProps = createProps()([\"channel\", \"orientation\"]);\nvar splitChannelProps = createSplitProps(channelProps);\nvar swatchTriggerProps = createProps()([\"value\", \"disabled\"]);\nvar splitSwatchTriggerProps = createSplitProps(swatchTriggerProps);\nvar swatchProps = createProps()([\"value\", \"respectAlpha\"]);\nvar splitSwatchProps = createSplitProps(swatchProps);\nvar transparencyGridProps = createProps()([\"size\"]);\nvar splitTransparencyGridProps = createSplitProps(transparencyGridProps);\nexport { anatomy, areaProps, channelProps, connect, machine, parse, props, splitAreaProps, splitChannelProps, splitProps, splitSwatchProps, splitSwatchTriggerProps, splitTransparencyGridProps, swatchProps, swatchTriggerProps, transparencyGridProps };","map":{"version":3,"names":["createAnatomy","parseColor","getColorAreaGradient","normalizeColor","raf","getInitialFocus","dispatchInputValueEvent","disableTextSelection","trackPointerMove","trackFormControl","setElementValue","getRelativePoint","queryAll","dataAttr","visuallyHiddenStyle","getEventStep","getEventKey","isLeftClick","isModifierKey","getEventPoint","query","getPlacement","getPlacementStyles","createGuards","createMachine","trackDismissableElement","tryCatch","createSplitProps","createProps","anatomy","parts","build","getRootId","ctx","_ctx$ids$root","_ctx$ids","ids","root","concat","id","getLabelId","_ctx$ids$label","_ctx$ids2","label","getHiddenInputId","_ctx$ids$hiddenInput","_ctx$ids3","hiddenInput","getControlId","_ctx$ids$control","_ctx$ids4","control","getTriggerId","_ctx$ids$trigger","_ctx$ids5","trigger","getContentId","_ctx$ids$content","_ctx$ids6","content","getPositionerId","_ctx$ids$positioner","_ctx$ids7","positioner","getFormatSelectId","_ctx$ids$formatSelect","_ctx$ids8","formatSelect","getAreaId","_ctx$ids$area","_ctx$ids9","area","getAreaGradientId","_ctx$ids$areaGradient","_ctx$ids0","areaGradient","getAreaThumbId","_ctx$ids$areaThumb","_ctx$ids1","areaThumb","getChannelSliderTrackId","channel","_ctx$ids$channelSlide","_ctx$ids10","_ctx$ids10$channelSli","channelSliderTrack","call","getChannelSliderThumbId","_ctx$ids$channelSlide2","_ctx$ids11","_ctx$ids11$channelSli","channelSliderThumb","getContentEl","getById","getAreaThumbEl","getChannelSliderThumbEl","getFormatSelectEl","getHiddenInputEl","getAreaEl","getAreaValueFromPoint","point","dir","areaEl","getPercentValue","x","orientation","y","getControlEl","getTriggerEl","getPositionerEl","getChannelSliderTrackEl","getChannelSliderValueFromPoint","trackEl","getChannelInputEls","getChannelDisplayColor","color","getChannelValue","withChannelValue","Error","toString","isHSL","getFormat","toFormat","getChannelRange","minColor","maxColor","minValue","toHexInt","maxValue","pageSize","step","getSliderBackgroundDirection","getSliderBackground","props2","value","bgDirection","start","middle","end","connect","service","normalize","context","send","prop","computed","state","scope","get","format","areaValue","valueAsString","disabled","readOnly","invalid","required","interactive","dragging","hasTag","open","focused","getAreaChannels","_props2$xChannel","_props2$yChannel","channels","getChannels","xChannel","yChannel","currentPlacement","popperStyles","_objectSpread","placement","getSwatchTriggerState","checked","isEqual","inline","setOpen","nextOpen","open2","type","setValue","value2","src","getChannelValueText","locale","formatChannelValue","setChannelValue","channelValue","setFormat","format2","formatValue","alpha","setAlpha","alphaValue","getRootProps","element","attrs","style","getLabelProps","htmlFor","onClick","event","preventDefault","inputEl","focus","preventScroll","getControlProps","getTriggerProps","button","onBlur","position","getPositionerProps","floating","getContentProps","tabIndex","hidden","getValueTextProps","valueText","getAreaProps","arguments","length","undefined","areaStyles","role","onPointerDown","touchAction","forcedColorAdjust","getAreaBackgroundProps","areaGradientStyles","areaBackground","getAreaThumbProps","xPercent","getChannelValuePercent","yPercent","isRtl","finalXPercent","xValue","yValue","left","top","transform","background","onFocus","onKeyDown","defaultPrevented","keyMap","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","PageUp","PageDown","Escape","event2","stopPropagation","exec","getTransparencyGridProps","size","transparencyGrid","width","height","backgroundColor","backgroundImage","backgroundSize","inset","zIndex","pointerEvents","getChannelSliderProps","channelSlider","getChannelSliderTrackProps","normalizedValue","getChannelSliderLabelProps","channelSliderLabel","_scope$getById","thumbId","userSelect","WebkitUserSelect","getChannelSliderValueTextProps","channelSliderValueText","getChannelSliderThumbProps","channelRange","offset","finalOffset","placementStyles","Home","End","getChannelInputProps","isTextField","input","channelInput","spellCheck","autoComplete","defaultValue","min","max","onBeforeInput","currentTarget","match","select","valueAsNumber","key","appearance","WebkitAppearance","MozAppearance","getHiddenInputProps","name","getEyeDropperTriggerProps","eyeDropperTrigger","getSwatchGroupProps","swatchGroup","getSwatchTriggerProps","swatchState","swatchTrigger","getSwatchIndicatorProps","swatchIndicator","getSwatchProps","respectAlpha","swatch","getFormatTriggerProps","formatTrigger","getNextFormat","nextFormat","getFormatSelectProps","onChange","assertFormat","formats","formatRegex","RegExp","join","_formats","index","indexOf","test","parse","colorString","HEX_REGEX","isValidHex","prefixHex","startsWith","and","machine","props","_ref","defaultFormat","openAutoFocus","positioning","initialState","_ref2","_ref3","bindable","getContext","a","b","hash","_prop","_prop2","activeId","activeChannel","activeOrientation","fieldsetDisabled","restoreFocus","rtl","_ref4","_ref5","_ref6","_ref7","_ref8","effects","watch","_ref9","action","track","on","actions","states","idle","tags","target","OPEN","guard","INTERACT_OUTSIDE","CLOSE","exit","implementations","guards","closeOnSelect","_ref0","isOpenControlled","_ref1","shouldRestoreFocus","_ref10","trackPositioning","_ref11","_prop3","set","anchorEl","getPositionerEl2","defer","onComplete","data","_ref12","getContentEl2","exclude","onInteractOutside","_prop4","detail","focusable","contextmenu","onPointerDownOutside","onFocusOutside","onDismiss","_ref13","onFieldsetDisabledChange","onFormReset","initial","_ref14","getDoc","onPointerMove","_ref15","onPointerUp","_ref16","doc","openEyeDropper","_ref17","win","getWin","isSupported","picker","EyeDropper","then","_ref18","sRGBHex","catch","setActiveChannel","_ref19","clearActiveChannel","_ref20","setAreaColorFromPoint","_ref21","v","percent","getChannelPercentValue","setChannelColorFromPoint","_ref22","channelPercent","_ref23","_ref24","dispatchChangeEvent","_ref25","syncInputElements","_ref26","syncChannelInputs","invokeOnChangeEnd","_ref27","_prop5","setChannelColorFromInput","_ref28","_prop6","currentAlpha","parseFloat","Number","isNaN","parseValue","current","incrementChannel","_ref29","decrementChannel","_ref30","incrementAreaXChannel","_ref31","decrementAreaXChannel","_ref32","incrementAreaYChannel","_ref33","decrementAreaYChannel","_ref34","setChannelToMax","_ref35","range","setChannelToMin","_ref36","focusAreaThumb","_ref37","_getAreaThumbEl","focusChannelThumb","_ref38","_getChannelSliderThum","setInitialFocus","_ref39","getInitialEl","setReturnFocus","_ref40","_getTriggerEl","syncFormatSelectElement","_ref41","syncFormatSelect","invokeOnOpen","_ref42","_prop7","invokeOnClose","_ref43","_prop8","toggleVisibility","_ref44","previousEvent","currentValue","nextValue","channelInputEls","forEach","dataset","selectEl","splitProps","areaProps","splitAreaProps","channelProps","splitChannelProps","swatchTriggerProps","splitSwatchTriggerProps","swatchProps","splitSwatchProps","transparencyGridProps","splitTransparencyGridProps"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@zag-js/color-picker/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { parseColor, getColorAreaGradient, normalizeColor } from '@zag-js/color-utils';\nimport { raf, getInitialFocus, dispatchInputValueEvent, disableTextSelection, trackPointerMove, trackFormControl, setElementValue, getRelativePoint, queryAll, dataAttr, visuallyHiddenStyle, getEventStep, getEventKey, isLeftClick, isModifierKey, getEventPoint, query } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { tryCatch, createSplitProps } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\n  \"root\",\n  \"label\",\n  \"control\",\n  \"trigger\",\n  \"positioner\",\n  \"content\",\n  \"area\",\n  \"areaThumb\",\n  \"valueText\",\n  \"areaBackground\",\n  \"channelSlider\",\n  \"channelSliderLabel\",\n  \"channelSliderTrack\",\n  \"channelSliderThumb\",\n  \"channelSliderValueText\",\n  \"channelInput\",\n  \"transparencyGrid\",\n  \"swatchGroup\",\n  \"swatchTrigger\",\n  \"swatchIndicator\",\n  \"swatch\",\n  \"eyeDropperTrigger\",\n  \"formatTrigger\",\n  \"formatSelect\"\n]);\nvar parts = anatomy.build();\nvar getRootId = (ctx) => ctx.ids?.root ?? `color-picker:${ctx.id}`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `color-picker:${ctx.id}:label`;\nvar getHiddenInputId = (ctx) => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`;\nvar getControlId = (ctx) => ctx.ids?.control ?? `color-picker:${ctx.id}:control`;\nvar getTriggerId = (ctx) => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`;\nvar getContentId = (ctx) => ctx.ids?.content ?? `color-picker:${ctx.id}:content`;\nvar getPositionerId = (ctx) => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`;\nvar getFormatSelectId = (ctx) => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`;\nvar getAreaId = (ctx) => ctx.ids?.area ?? `color-picker:${ctx.id}:area`;\nvar getAreaGradientId = (ctx) => ctx.ids?.areaGradient ?? `color-picker:${ctx.id}:area-gradient`;\nvar getAreaThumbId = (ctx) => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`;\nvar getChannelSliderTrackId = (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`;\nvar getChannelSliderThumbId = (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`;\nvar getContentEl = (ctx) => ctx.getById(getContentId(ctx));\nvar getAreaThumbEl = (ctx) => ctx.getById(getAreaThumbId(ctx));\nvar getChannelSliderThumbEl = (ctx, channel) => ctx.getById(getChannelSliderThumbId(ctx, channel));\nvar getFormatSelectEl = (ctx) => ctx.getById(getFormatSelectId(ctx));\nvar getHiddenInputEl = (ctx) => ctx.getById(getHiddenInputId(ctx));\nvar getAreaEl = (ctx) => ctx.getById(getAreaId(ctx));\nvar getAreaValueFromPoint = (ctx, point, dir) => {\n  const areaEl = getAreaEl(ctx);\n  if (!areaEl) return;\n  const { getPercentValue } = getRelativePoint(point, areaEl);\n  return {\n    x: getPercentValue({ dir, orientation: \"horizontal\" }),\n    y: getPercentValue({ orientation: \"vertical\" })\n  };\n};\nvar getControlEl = (ctx) => ctx.getById(getControlId(ctx));\nvar getTriggerEl = (ctx) => ctx.getById(getTriggerId(ctx));\nvar getPositionerEl = (ctx) => ctx.getById(getPositionerId(ctx));\nvar getChannelSliderTrackEl = (ctx, channel) => ctx.getById(getChannelSliderTrackId(ctx, channel));\nvar getChannelSliderValueFromPoint = (ctx, point, channel, dir) => {\n  const trackEl = getChannelSliderTrackEl(ctx, channel);\n  if (!trackEl) return;\n  const { getPercentValue } = getRelativePoint(point, trackEl);\n  return {\n    x: getPercentValue({ dir, orientation: \"horizontal\" }),\n    y: getPercentValue({ orientation: \"vertical\" })\n  };\n};\nvar getChannelInputEls = (ctx) => {\n  return [\n    ...queryAll(getContentEl(ctx), \"input[data-channel]\"),\n    ...queryAll(getControlEl(ctx), \"input[data-channel]\")\n  ];\n};\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(`hsl(${color.getChannelValue(\"hue\")}, 100%, 50%)`);\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\": {\n      return color;\n    }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = (props2) => {\n  const { channel, value, dir, orientation } = props2;\n  const bgDirection = getSliderBackgroundDirection(orientation, dir);\n  const { minValue, maxValue } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return `linear-gradient(to ${bgDirection}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n    case \"lightness\": {\n      let start = value.withChannelValue(channel, minValue).toString(\"css\");\n      let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n      let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n      return `linear-gradient(to ${bgDirection}, ${start}, ${middle}, ${end})`;\n    }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\": {\n      let start = value.withChannelValue(channel, minValue).toString(\"css\");\n      let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n      return `linear-gradient(to ${bgDirection}, ${start}, ${end})`;\n    }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(service, normalize) {\n  const { context, send, prop, computed, state, scope } = service;\n  const value = context.get(\"value\");\n  const format = context.get(\"format\");\n  const areaValue = computed(\"areaValue\");\n  const valueAsString = computed(\"valueAsString\");\n  const disabled = computed(\"disabled\");\n  const readOnly = !!prop(\"readOnly\");\n  const invalid = !!prop(\"invalid\");\n  const required = !!prop(\"required\");\n  const interactive = computed(\"interactive\");\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = (props2) => {\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: props2.xChannel ?? channels[1],\n      yChannel: props2.yChannel ?? channels[2]\n    };\n  };\n  const currentPlacement = context.get(\"currentPlacement\");\n  const popperStyles = getPlacementStyles({\n    ...prop(\"positioning\"),\n    placement: currentPlacement\n  });\n  function getSwatchTriggerState(props2) {\n    const color = normalizeColor(props2.value).toFormat(context.get(\"format\"));\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props2.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    inline: !!prop(\"inline\"),\n    setOpen(nextOpen) {\n      if (prop(\"inline\")) return;\n      const open2 = state.hasTag(\"open\");\n      if (open2 === nextOpen) return;\n      send({ type: nextOpen ? \"OPEN\" : \"CLOSE\" });\n    },\n    setValue(value2) {\n      send({ type: \"VALUE.SET\", value: normalizeColor(value2), src: \"set-color\" });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({ type: \"VALUE.SET\", value: color, src: \"set-channel\" });\n    },\n    format: context.get(\"format\"),\n    setFormat(format2) {\n      const formatValue = value.toFormat(format2);\n      send({ type: \"VALUE.SET\", value: formatValue, src: \"set-format\" });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({ type: \"VALUE.SET\", value: color, src: \"set-alpha\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        id: getLabelId(scope),\n        htmlFor: getHiddenInputId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-required\": dataAttr(required),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(getControlEl(scope), \"[data-channel=hex]\");\n          inputEl?.focus({ preventScroll: true });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        id: getControlId(scope),\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: getTriggerId(scope),\n        dir: prop(\"dir\"),\n        disabled,\n        \"aria-label\": `select color. current color is ${valueAsString}`,\n        \"aria-controls\": getContentId(scope),\n        \"aria-labelledby\": getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({ type: \"TRIGGER.CLICK\" });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({ type: \"TRIGGER.BLUR\" });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        id: getPositionerId(scope),\n        dir: prop(\"dir\"),\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: getContentId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: -1,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getAreaProps(props2 = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props2);\n      const { areaStyles } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.area.attrs,\n        id: getAreaId(scope),\n        role: \"group\",\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = { xChannel, yChannel };\n          send({ type: \"AREA.POINTER_DOWN\", point, channel, id: \"area\" });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaStyles\n        }\n      });\n    },\n    getAreaBackgroundProps(props2 = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props2);\n      const { areaGradientStyles } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.areaBackground.attrs,\n        id: getAreaGradientId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(readOnly),\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaGradientStyles\n        }\n      });\n    },\n    getAreaThumbProps(props2 = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props2);\n      const channel = { xChannel, yChannel };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const isRtl = prop(\"dir\") === \"rtl\";\n      const finalXPercent = isRtl ? 1 - xPercent : xPercent;\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      const color = areaValue.withChannelValue(\"alpha\", 1).toString(\"css\");\n      return normalize.element({\n        ...parts.areaThumb.attrs,\n        id: getAreaThumbId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": `${xChannel} and ${yChannel}`,\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": `${xChannel} ${xValue}, ${yChannel} ${yValue}`,\n        style: {\n          position: \"absolute\",\n          left: `${finalXPercent * 100}%`,\n          top: `${yPercent * 100}%`,\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          \"--color\": color,\n          background: color\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({ type: \"AREA.FOCUS\", id: \"area\", channel });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"AREA.ARROW_UP\", channel, step });\n            },\n            ArrowDown() {\n              send({ type: \"AREA.ARROW_DOWN\", channel, step });\n            },\n            ArrowLeft() {\n              send({ type: \"AREA.ARROW_LEFT\", channel, step });\n            },\n            ArrowRight() {\n              send({ type: \"AREA.ARROW_RIGHT\", channel, step });\n            },\n            PageUp() {\n              send({ type: \"AREA.PAGE_UP\", channel, step });\n            },\n            PageDown() {\n              send({ type: \"AREA.PAGE_DOWN\", channel, step });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getTransparencyGridProps(props2 = {}) {\n      const { size = \"12px\" } = props2;\n      return normalize.element({\n        ...parts.transparencyGrid.attrs,\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      });\n    },\n    getChannelSliderProps(props2) {\n      const { orientation = \"horizontal\", channel, format: format2 } = props2;\n      return normalize.element({\n        ...parts.channelSlider.attrs,\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({ type: \"CHANNEL_SLIDER.POINTER_DOWN\", channel, format: format2, point, id: channel, orientation });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      });\n    },\n    getChannelSliderTrackProps(props2) {\n      const { orientation = \"horizontal\", channel, format: format2 } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      return normalize.element({\n        ...parts.channelSliderTrack.attrs,\n        id: getChannelSliderTrackId(scope, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: prop(\"dir\"),\n            value: normalizedValue\n          })\n        }\n      });\n    },\n    getChannelSliderLabelProps(props2) {\n      const { channel } = props2;\n      return normalize.element({\n        ...parts.channelSliderLabel.attrs,\n        \"data-channel\": channel,\n        onClick(event) {\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = getChannelSliderThumbId(scope, channel);\n          scope.getById(thumbId)?.focus({ preventScroll: true });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getChannelSliderValueTextProps(props2) {\n      return normalize.element({\n        ...parts.channelSliderValueText.attrs,\n        \"data-channel\": props2.channel\n      });\n    },\n    getChannelSliderThumbProps(props2) {\n      const { orientation = \"horizontal\", channel, format: format2 } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const isRtl = prop(\"dir\") === \"rtl\";\n      const finalOffset = orientation === \"horizontal\" && isRtl ? 1 - offset : offset;\n      const placementStyles = orientation === \"horizontal\" ? { left: `${finalOffset * 100}%`, top: \"50%\" } : { top: `${offset * 100}%`, left: \"50%\" };\n      return normalize.element({\n        ...parts.channelSliderThumb.attrs,\n        id: getChannelSliderThumbId(scope, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": `${channel} ${channelValue}`,\n        style: {\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\"),\n          ...placementStyles\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({ type: \"CHANNEL_SLIDER.FOCUS\", channel });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_UP\", channel, step });\n            },\n            ArrowDown() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_DOWN\", channel, step });\n            },\n            ArrowLeft() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_LEFT\", channel, step });\n            },\n            ArrowRight() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_RIGHT\", channel, step });\n            },\n            PageUp() {\n              send({ type: \"CHANNEL_SLIDER.PAGE_UP\", channel });\n            },\n            PageDown() {\n              send({ type: \"CHANNEL_SLIDER.PAGE_DOWN\", channel });\n            },\n            Home() {\n              send({ type: \"CHANNEL_SLIDER.HOME\", channel });\n            },\n            End() {\n              send({ type: \"CHANNEL_SLIDER.END\", channel });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getChannelInputProps(props2) {\n      const { channel } = props2;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input({\n        ...parts.channelInput.attrs,\n        dir: prop(\"dir\"),\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        readOnly,\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange?.minValue,\n        max: channelRange?.maxValue,\n        step: channelRange?.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({ type: \"CHANNEL_INPUT.FOCUS\", channel });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({ type: \"CHANNEL_INPUT.BLUR\", channel, value: value2, isTextField });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({ type: \"CHANNEL_INPUT.CHANGE\", channel, value: value2, isTextField });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: prop(\"name\"),\n        tabIndex: -1,\n        readOnly,\n        required,\n        id: getHiddenInputId(scope),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button({\n        ...parts.eyeDropperTrigger.attrs,\n        type: \"button\",\n        dir: prop(\"dir\"),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send({ type: \"EYEDROPPER.CLICK\" });\n        }\n      });\n    },\n    getSwatchGroupProps() {\n      return normalize.element({\n        ...parts.swatchGroup.attrs,\n        role: \"group\"\n      });\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.button({\n        ...parts.swatchTrigger.attrs,\n        disabled: swatchState.disabled,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `select ${swatchState.valueAsString} as the color`,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({ type: \"SWATCH_TRIGGER.CLICK\", value: swatchState.value });\n        },\n        style: {\n          \"--color\": swatchState.valueAsString,\n          position: \"relative\"\n        }\n      });\n    },\n    getSwatchIndicatorProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.element({\n        ...parts.swatchIndicator.attrs,\n        dir: prop(\"dir\"),\n        hidden: !swatchState.checked\n      });\n    },\n    getSwatchProps(props2) {\n      const { respectAlpha = true } = props2;\n      const swatchState = getSwatchTriggerState(props2);\n      const color = swatchState.value.toString(respectAlpha ? \"css\" : \"hex\");\n      return normalize.element({\n        ...parts.swatch.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          \"--color\": color,\n          position: \"relative\",\n          background: color\n        }\n      });\n    },\n    getFormatTriggerProps() {\n      return normalize.button({\n        ...parts.formatTrigger.attrs,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `change color format to ${getNextFormat(format)}`,\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(format);\n          send({ type: \"FORMAT.SET\", format: nextFormat, src: \"format-trigger\" });\n        }\n      });\n    },\n    getFormatSelectProps() {\n      return normalize.select({\n        ...parts.formatSelect.attrs,\n        \"aria-label\": \"change color format\",\n        dir: prop(\"dir\"),\n        defaultValue: prop(\"format\"),\n        disabled,\n        onChange(event) {\n          const format2 = assertFormat(event.currentTarget.value);\n          send({ type: \"FORMAT.SET\", format: format2, src: \"format-select\" });\n        }\n      });\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(`^(${formats.join(\"|\")})$`);\nfunction getNextFormat(format) {\n  const index = formats.indexOf(format);\n  return formats[index + 1] ?? formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(`Unsupported color format: ${format}`);\n}\nvar parse = (colorString) => {\n  return parseColor(colorString);\n};\n\n// src/utils/is-valid-hex.ts\nvar HEX_REGEX = /^[0-9a-fA-F]{3,8}$/;\nfunction isValidHex(value) {\n  return HEX_REGEX.test(value);\n}\nfunction prefixHex(value) {\n  if (value.startsWith(\"#\")) return value;\n  if (isValidHex(value)) return `#${value}`;\n  return value;\n}\n\n// src/color-picker.machine.ts\nvar { and } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      dir: \"ltr\",\n      defaultValue: parse(\"#000000\"),\n      defaultFormat: \"rgba\",\n      openAutoFocus: true,\n      ...props2,\n      positioning: {\n        placement: \"bottom\",\n        ...props2.positioning\n      }\n    };\n  },\n  initialState({ prop }) {\n    const open = prop(\"open\") || prop(\"defaultOpen\") || prop(\"inline\");\n    return open ? \"open\" : \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        isEqual(a, b) {\n          return a.toString(\"css\") === b?.toString(\"css\");\n        },\n        hash(a) {\n          return a.toString(\"css\");\n        },\n        onChange(value) {\n          const ctx = getContext();\n          const valueAsString = value.toString(ctx.get(\"format\"));\n          prop(\"onValueChange\")?.({ value, valueAsString });\n        }\n      })),\n      format: bindable(() => ({\n        defaultValue: prop(\"defaultFormat\"),\n        value: prop(\"format\"),\n        onChange(format) {\n          prop(\"onFormatChange\")?.({ format });\n        }\n      })),\n      activeId: bindable(() => ({ defaultValue: null })),\n      activeChannel: bindable(() => ({ defaultValue: null })),\n      activeOrientation: bindable(() => ({ defaultValue: null })),\n      fieldsetDisabled: bindable(() => ({ defaultValue: false })),\n      restoreFocus: bindable(() => ({ defaultValue: true })),\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      }))\n    };\n  },\n  computed: {\n    rtl: ({ prop }) => prop(\"dir\") === \"rtl\",\n    disabled: ({ prop, context }) => !!prop(\"disabled\") || context.get(\"fieldsetDisabled\"),\n    interactive: ({ prop }) => !(prop(\"disabled\") || prop(\"readOnly\")),\n    valueAsString: ({ context }) => context.get(\"value\").toString(context.get(\"format\")),\n    areaValue: ({ context }) => {\n      const format = context.get(\"format\").startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n      return context.get(\"value\").toFormat(format);\n    }\n  },\n  effects: [\"trackFormControl\"],\n  watch({ prop, context, action, track }) {\n    track([() => context.hash(\"value\")], () => {\n      action([\"syncInputElements\", \"dispatchChangeEvent\"]);\n    });\n    track([() => context.get(\"format\")], () => {\n      action([\"syncFormatSelectElement\"]);\n    });\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": {\n      actions: [\"setValue\"]\n    },\n    \"FORMAT.SET\": {\n      actions: [\"setFormat\"]\n    },\n    \"CHANNEL_INPUT.CHANGE\": {\n      actions: [\"setChannelColorFromInput\"]\n    },\n    \"EYEDROPPER.CLICK\": {\n      actions: [\"openEyeDropper\"]\n    },\n    \"SWATCH_TRIGGER.CLICK\": {\n      actions: [\"setValue\"]\n    }\n  },\n  states: {\n    idle: {\n      tags: [\"closed\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"CHANNEL_INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setActiveChannel\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"closed\", \"focused\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"CHANNEL_INPUT.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"setChannelColorFromInput\"]\n        },\n        \"TRIGGER.BLUR\": {\n          target: \"idle\"\n        }\n      }\n    },\n    open: {\n      tags: [\"open\"],\n      effects: [\"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"setReturnFocus\"]\n          },\n          {\n            target: \"idle\"\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"AREA.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"AREA.ARROW_LEFT\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_RIGHT\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_UP\": {\n          actions: [\"incrementAreaYChannel\"]\n        },\n        \"AREA.ARROW_DOWN\": {\n          actions: [\"decrementAreaYChannel\"]\n        },\n        \"AREA.PAGE_UP\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.PAGE_DOWN\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_LEFT\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.HOME\": {\n          actions: [\"setChannelToMin\"]\n        },\n        \"CHANNEL_SLIDER.END\": {\n          actions: [\"setChannelToMax\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          actions: [\"setChannelColorFromInput\"]\n        },\n        INTERACT_OUTSIDE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setReturnFocus\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        CLOSE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"SWATCH_TRIGGER.CLICK\": [\n          {\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"setValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n          },\n          {\n            actions: [\"setValue\"]\n          }\n        ]\n      }\n    },\n    \"open:dragging\": {\n      tags: [\"open\"],\n      exit: [\"clearActiveChannel\"],\n      effects: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"setReturnFocus\"]\n          },\n          {\n            target: \"idle\"\n          }\n        ],\n        \"AREA.POINTER_MOVE\": {\n          actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_MOVE\": {\n          actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        INTERACT_OUTSIDE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setReturnFocus\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        CLOSE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      closeOnSelect: ({ prop }) => !!prop(\"closeOnSelect\"),\n      isOpenControlled: ({ prop }) => prop(\"open\") != null || !!prop(\"inline\"),\n      shouldRestoreFocus: ({ context }) => !!context.get(\"restoreFocus\")\n    },\n    effects: {\n      trackPositioning({ context, prop, scope }) {\n        if (prop(\"inline\")) return;\n        if (!context.get(\"currentPlacement\")) {\n          context.set(\"currentPlacement\", prop(\"positioning\")?.placement);\n        }\n        const anchorEl = getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        return getPlacement(anchorEl, getPositionerEl2, {\n          ...prop(\"positioning\"),\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      trackDismissableElement({ context, scope, prop, send }) {\n        if (prop(\"inline\")) return;\n        const getContentEl2 = () => getContentEl(scope);\n        return trackDismissableElement(getContentEl2, {\n          type: \"popover\",\n          exclude: getTriggerEl(scope),\n          defer: true,\n          onInteractOutside(event) {\n            prop(\"onInteractOutside\")?.(event);\n            if (event.defaultPrevented) return;\n            context.set(\"restoreFocus\", !(event.detail.focusable || event.detail.contextmenu));\n          },\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onFocusOutside: prop(\"onFocusOutside\"),\n          onDismiss() {\n            send({ type: \"INTERACT_OUTSIDE\" });\n          }\n        });\n      },\n      trackFormControl({ context, scope, send }) {\n        const inputEl = getHiddenInputEl(scope);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            context.set(\"fieldsetDisabled\", disabled);\n          },\n          onFormReset() {\n            send({ type: \"VALUE.SET\", value: context.initial(\"value\"), src: \"form.reset\" });\n          }\n        });\n      },\n      trackPointerMove({ context, scope, event, send }) {\n        return trackPointerMove(scope.getDoc(), {\n          onPointerMove({ point }) {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n            send({ type, point, format: event.format });\n          },\n          onPointerUp() {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n            send({ type });\n          }\n        });\n      },\n      disableTextSelection({ scope }) {\n        return disableTextSelection({\n          doc: scope.getDoc(),\n          target: getContentEl(scope)\n        });\n      }\n    },\n    actions: {\n      openEyeDropper({ scope, context }) {\n        const win = scope.getWin();\n        const isSupported = \"EyeDropper\" in win;\n        if (!isSupported) return;\n        const picker = new win.EyeDropper();\n        picker.open().then(({ sRGBHex }) => {\n          const format = context.get(\"value\").getFormat();\n          const color = parseColor(sRGBHex).toFormat(format);\n          context.set(\"value\", color);\n        }).catch(() => void 0);\n      },\n      setActiveChannel({ context, event }) {\n        context.set(\"activeId\", event.id);\n        if (event.channel) context.set(\"activeChannel\", event.channel);\n        if (event.orientation) context.set(\"activeOrientation\", event.orientation);\n      },\n      clearActiveChannel({ context }) {\n        context.set(\"activeChannel\", null);\n        context.set(\"activeId\", null);\n        context.set(\"activeOrientation\", null);\n      },\n      setAreaColorFromPoint({ context, event, computed, scope, prop }) {\n        const v = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const { xChannel, yChannel } = event.channel || context.get(\"activeChannel\");\n        const percent = getAreaValueFromPoint(scope, event.point, prop(\"dir\"));\n        if (!percent) return;\n        const xValue = v.getChannelPercentValue(xChannel, percent.x);\n        const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);\n        const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n        context.set(\"value\", color);\n      },\n      setChannelColorFromPoint({ context, event, computed, scope, prop }) {\n        const channel = event.channel || context.get(\"activeId\");\n        const normalizedValue = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const percent = getChannelSliderValueFromPoint(scope, event.point, channel, prop(\"dir\"));\n        if (!percent) return;\n        const orientation = context.get(\"activeOrientation\") || \"horizontal\";\n        const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n        const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n        const color = normalizedValue.withChannelValue(channel, value);\n        context.set(\"value\", color);\n      },\n      setValue({ context, event }) {\n        context.set(\"value\", event.value);\n      },\n      setFormat({ context, event }) {\n        context.set(\"format\", event.format);\n      },\n      dispatchChangeEvent({ scope, computed }) {\n        dispatchInputValueEvent(getHiddenInputEl(scope), { value: computed(\"valueAsString\") });\n      },\n      syncInputElements({ context, scope }) {\n        syncChannelInputs(scope, context.get(\"value\"));\n      },\n      invokeOnChangeEnd({ context, prop, computed }) {\n        prop(\"onValueChangeEnd\")?.({\n          value: context.get(\"value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      setChannelColorFromInput({ context, event, scope, prop }) {\n        const { channel, isTextField, value } = event;\n        const currentAlpha = context.get(\"value\").getChannelValue(\"alpha\");\n        let color;\n        if (channel === \"alpha\") {\n          let valueAsNumber = parseFloat(value);\n          valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n          color = context.get(\"value\").withChannelValue(\"alpha\", valueAsNumber);\n        } else if (isTextField) {\n          color = tryCatch(\n            () => {\n              const parseValue = channel === \"hex\" ? prefixHex(value) : value;\n              return parse(parseValue).withChannelValue(\"alpha\", currentAlpha);\n            },\n            () => context.get(\"value\")\n          );\n        } else {\n          const current = context.get(\"value\").toFormat(context.get(\"format\"));\n          const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n          color = current.withChannelValue(channel, valueAsNumber);\n        }\n        syncChannelInputs(scope, context.get(\"value\"), color);\n        context.set(\"value\", color);\n        prop(\"onValueChangeEnd\")?.({\n          value: color,\n          valueAsString: color.toString(context.get(\"format\"))\n        });\n      },\n      incrementChannel({ context, event }) {\n        const color = context.get(\"value\").incrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementChannel({ context, event }) {\n        const color = context.get(\"value\").decrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaXChannel({ context, event, computed }) {\n        const { xChannel } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaXChannel({ context, event, computed }) {\n        const { xChannel } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaYChannel({ context, event, computed }) {\n        const { yChannel } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaYChannel({ context, event, computed }) {\n        const { yChannel } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      setChannelToMax({ context, event }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.maxValue);\n        context.set(\"value\", color);\n      },\n      setChannelToMin({ context, event }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.minValue);\n        context.set(\"value\", color);\n      },\n      focusAreaThumb({ scope }) {\n        raf(() => {\n          getAreaThumbEl(scope)?.focus({ preventScroll: true });\n        });\n      },\n      focusChannelThumb({ event, scope }) {\n        raf(() => {\n          getChannelSliderThumbEl(scope, event.channel)?.focus({ preventScroll: true });\n        });\n      },\n      setInitialFocus({ prop, scope }) {\n        if (!prop(\"openAutoFocus\")) return;\n        raf(() => {\n          const element = getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\")\n          });\n          element?.focus({ preventScroll: true });\n        });\n      },\n      setReturnFocus({ scope }) {\n        raf(() => {\n          getTriggerEl(scope)?.focus({ preventScroll: true });\n        });\n      },\n      syncFormatSelectElement({ context, scope }) {\n        syncFormatSelect(scope, context.get(\"format\"));\n      },\n      invokeOnOpen({ prop }) {\n        if (prop(\"inline\")) return;\n        prop(\"onOpenChange\")?.({ open: true });\n      },\n      invokeOnClose({ prop }) {\n        if (prop(\"inline\")) return;\n        prop(\"onOpenChange\")?.({ open: false });\n      },\n      toggleVisibility({ prop, event, send }) {\n        send({ type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: event });\n      }\n    }\n  }\n});\nfunction syncChannelInputs(scope, currentValue, nextValue) {\n  const channelInputEls = getChannelInputEls(scope);\n  raf(() => {\n    channelInputEls.forEach((inputEl) => {\n      const channel = inputEl.dataset.channel;\n      setElementValue(inputEl, getChannelValue(nextValue || currentValue, channel));\n    });\n  });\n}\nfunction syncFormatSelect(scope, format) {\n  const selectEl = getFormatSelectEl(scope);\n  if (!selectEl) return;\n  raf(() => setElementValue(selectEl, format));\n}\nvar props = createProps()([\n  \"closeOnSelect\",\n  \"dir\",\n  \"disabled\",\n  \"format\",\n  \"defaultFormat\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"initialFocusEl\",\n  \"inline\",\n  \"name\",\n  \"positioning\",\n  \"onFocusOutside\",\n  \"onFormatChange\",\n  \"onInteractOutside\",\n  \"onOpenChange\",\n  \"onPointerDownOutside\",\n  \"onValueChange\",\n  \"onValueChangeEnd\",\n  \"defaultOpen\",\n  \"open\",\n  \"positioning\",\n  \"required\",\n  \"readOnly\",\n  \"value\",\n  \"defaultValue\",\n  \"invalid\",\n  \"openAutoFocus\"\n]);\nvar splitProps = createSplitProps(props);\nvar areaProps = createProps()([\"xChannel\", \"yChannel\"]);\nvar splitAreaProps = createSplitProps(areaProps);\nvar channelProps = createProps()([\"channel\", \"orientation\"]);\nvar splitChannelProps = createSplitProps(channelProps);\nvar swatchTriggerProps = createProps()([\"value\", \"disabled\"]);\nvar splitSwatchTriggerProps = createSplitProps(swatchTriggerProps);\nvar swatchProps = createProps()([\"value\", \"respectAlpha\"]);\nvar splitSwatchProps = createSplitProps(swatchProps);\nvar transparencyGridProps = createProps()([\"size\"]);\nvar splitTransparencyGridProps = createSplitProps(transparencyGridProps);\n\nexport { anatomy, areaProps, channelProps, connect, machine, parse, props, splitAreaProps, splitChannelProps, splitProps, splitSwatchProps, splitSwatchTriggerProps, splitTransparencyGridProps, swatchProps, swatchTriggerProps, transparencyGridProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}