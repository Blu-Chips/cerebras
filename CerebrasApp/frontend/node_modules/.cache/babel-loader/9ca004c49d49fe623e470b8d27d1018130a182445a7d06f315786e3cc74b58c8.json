{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { dataAttr } from '@zag-js/dom-query';\nimport { useRef, useId, useMemo } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useSafeLayoutEffect } from '../../utils/use-safe-layout-effect.js';\nimport { parts } from './fieldset.anatomy.js';\nconst useFieldset = function () {\n  var _props$id;\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    disabled = false,\n    invalid = false\n  } = props;\n  const env = useEnvironmentContext();\n  const hasErrorText = useRef(false);\n  const hasHelperText = useRef(false);\n  const uid = useId();\n  const id = (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : uid;\n  const rootRef = useRef(null);\n  const legendId = \"fieldset::\".concat(id, \"::legend\");\n  const errorTextId = \"fieldset::\".concat(id, \"::error-text\");\n  const helperTextId = \"fieldset::\".concat(id, \"::helper-text\");\n  useSafeLayoutEffect(() => {\n    const rootNode = rootRef.current;\n    if (!rootNode) return;\n    const checkTextElements = () => {\n      const docOrShadowRoot = env.getRootNode();\n      hasErrorText.current = !!docOrShadowRoot.getElementById(errorTextId);\n      hasHelperText.current = !!docOrShadowRoot.getElementById(helperTextId);\n    };\n    checkTextElements();\n    const win = env.getWindow();\n    const observer = new win.MutationObserver(checkTextElements);\n    observer.observe(rootNode, {\n      childList: true,\n      subtree: true\n    });\n    return () => observer.disconnect();\n  }, [env, errorTextId, helperTextId]);\n  const labelIds = useMemo(() => {\n    const ids = [];\n    if (hasErrorText.current && invalid) ids.push(errorTextId);\n    if (hasHelperText.current) ids.push(helperTextId);\n    return ids.join(\" \") || void 0;\n  }, [invalid, errorTextId, helperTextId]);\n  const getRootProps = useMemo(() => () => _objectSpread(_objectSpread({}, parts.root.attrs), {}, {\n    ref: rootRef,\n    disabled,\n    \"data-disabled\": dataAttr(disabled),\n    \"data-invalid\": dataAttr(invalid),\n    \"aria-labelledby\": legendId,\n    \"aria-describedby\": labelIds\n  }), [disabled, invalid, legendId, labelIds]);\n  const getLegendProps = useMemo(() => () => _objectSpread(_objectSpread({\n    id: legendId\n  }, parts.legend.attrs), {}, {\n    \"data-disabled\": dataAttr(disabled),\n    \"data-invalid\": dataAttr(invalid)\n  }), [legendId, disabled, invalid]);\n  const getHelperTextProps = useMemo(() => () => _objectSpread({\n    id: helperTextId\n  }, parts.helperText.attrs), [helperTextId]);\n  const getErrorTextProps = useMemo(() => () => _objectSpread(_objectSpread({\n    id: errorTextId\n  }, parts.errorText.attrs), {}, {\n    \"aria-live\": \"polite\"\n  }), [errorTextId]);\n  return {\n    refs: {\n      rootRef\n    },\n    disabled,\n    invalid,\n    getRootProps,\n    getLegendProps,\n    getHelperTextProps,\n    getErrorTextProps\n  };\n};\nexport { useFieldset };","map":{"version":3,"names":["_objectSpread","dataAttr","useRef","useId","useMemo","useEnvironmentContext","useSafeLayoutEffect","parts","useFieldset","_props$id","props","arguments","length","undefined","disabled","invalid","env","hasErrorText","hasHelperText","uid","id","rootRef","legendId","concat","errorTextId","helperTextId","rootNode","current","checkTextElements","docOrShadowRoot","getRootNode","getElementById","win","getWindow","observer","MutationObserver","observe","childList","subtree","disconnect","labelIds","ids","push","join","getRootProps","root","attrs","ref","getLegendProps","legend","getHelperTextProps","helperText","getErrorTextProps","errorText","refs"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@ark-ui/react/dist/components/fieldset/use-fieldset.js"],"sourcesContent":["'use client';\nimport { dataAttr } from '@zag-js/dom-query';\nimport { useRef, useId, useMemo } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useSafeLayoutEffect } from '../../utils/use-safe-layout-effect.js';\nimport { parts } from './fieldset.anatomy.js';\n\nconst useFieldset = (props = {}) => {\n  const { disabled = false, invalid = false } = props;\n  const env = useEnvironmentContext();\n  const hasErrorText = useRef(false);\n  const hasHelperText = useRef(false);\n  const uid = useId();\n  const id = props.id ?? uid;\n  const rootRef = useRef(null);\n  const legendId = `fieldset::${id}::legend`;\n  const errorTextId = `fieldset::${id}::error-text`;\n  const helperTextId = `fieldset::${id}::helper-text`;\n  useSafeLayoutEffect(() => {\n    const rootNode = rootRef.current;\n    if (!rootNode) return;\n    const checkTextElements = () => {\n      const docOrShadowRoot = env.getRootNode();\n      hasErrorText.current = !!docOrShadowRoot.getElementById(errorTextId);\n      hasHelperText.current = !!docOrShadowRoot.getElementById(helperTextId);\n    };\n    checkTextElements();\n    const win = env.getWindow();\n    const observer = new win.MutationObserver(checkTextElements);\n    observer.observe(rootNode, { childList: true, subtree: true });\n    return () => observer.disconnect();\n  }, [env, errorTextId, helperTextId]);\n  const labelIds = useMemo(() => {\n    const ids = [];\n    if (hasErrorText.current && invalid) ids.push(errorTextId);\n    if (hasHelperText.current) ids.push(helperTextId);\n    return ids.join(\" \") || void 0;\n  }, [invalid, errorTextId, helperTextId]);\n  const getRootProps = useMemo(\n    () => () => ({\n      ...parts.root.attrs,\n      ref: rootRef,\n      disabled,\n      \"data-disabled\": dataAttr(disabled),\n      \"data-invalid\": dataAttr(invalid),\n      \"aria-labelledby\": legendId,\n      \"aria-describedby\": labelIds\n    }),\n    [disabled, invalid, legendId, labelIds]\n  );\n  const getLegendProps = useMemo(\n    () => () => ({\n      id: legendId,\n      ...parts.legend.attrs,\n      \"data-disabled\": dataAttr(disabled),\n      \"data-invalid\": dataAttr(invalid)\n    }),\n    [legendId, disabled, invalid]\n  );\n  const getHelperTextProps = useMemo(\n    () => () => ({\n      id: helperTextId,\n      ...parts.helperText.attrs\n    }),\n    [helperTextId]\n  );\n  const getErrorTextProps = useMemo(\n    () => () => ({\n      id: errorTextId,\n      ...parts.errorText.attrs,\n      \"aria-live\": \"polite\"\n    }),\n    [errorTextId]\n  );\n  return {\n    refs: {\n      rootRef\n    },\n    disabled,\n    invalid,\n    getRootProps,\n    getLegendProps,\n    getHelperTextProps,\n    getErrorTextProps\n  };\n};\n\nexport { useFieldset };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}