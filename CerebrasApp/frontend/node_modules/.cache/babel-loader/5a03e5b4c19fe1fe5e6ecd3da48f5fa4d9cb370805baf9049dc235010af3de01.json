{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"data\", \"defaultExpandedDepth\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { getRootNode, nodeToString, nodeToValue } from '@zag-js/json-tree-utils';\nimport { forwardRef, useMemo } from 'react';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { createTreeCollection } from '../collection/tree-collection.js';\nimport { TreeViewRoot } from '../tree-view/tree-view-root.js';\nimport { getBranchValues } from './get-branch-value.js';\nimport { JsonTreeViewPropsProvider } from './json-tree-view-props-context.js';\nconst splitJsonTreeViewProps = createSplitProps();\nconst JsonTreeViewRoot = forwardRef((props, ref) => {\n  const [jsonTreeProps, localProps] = splitJsonTreeViewProps(props, [\"maxPreviewItems\", \"collapseStringsAfterLength\", \"quotesOnKeys\", \"groupArraysAfterLength\", \"showNonenumerable\"]);\n  const {\n      data,\n      defaultExpandedDepth\n    } = localProps,\n    restProps = _objectWithoutProperties(localProps, _excluded);\n  const collection = useMemo(() => {\n    return createTreeCollection({\n      nodeToValue,\n      nodeToString,\n      rootNode: getRootNode(data)\n    });\n  }, [data]);\n  const defaultExpandedValue = useMemo(() => {\n    return defaultExpandedDepth != null ? getBranchValues(collection, defaultExpandedDepth) : void 0;\n  }, [collection, defaultExpandedDepth]);\n  return /* @__PURE__ */jsx(JsonTreeViewPropsProvider, {\n    value: jsonTreeProps,\n    children: /* @__PURE__ */jsx(TreeViewRoot, _objectSpread(_objectSpread({\n      \"data-scope\": \"json-tree-view\",\n      collection,\n      defaultExpandedValue\n    }, restProps), {}, {\n      ref\n    }))\n  });\n});\nJsonTreeViewRoot.displayName = \"JsonTreeViewRoot\";\nexport { JsonTreeViewRoot };","map":{"version":3,"names":["_objectSpread","_objectWithoutProperties","_excluded","jsx","getRootNode","nodeToString","nodeToValue","forwardRef","useMemo","createSplitProps","createTreeCollection","TreeViewRoot","getBranchValues","JsonTreeViewPropsProvider","splitJsonTreeViewProps","JsonTreeViewRoot","props","ref","jsonTreeProps","localProps","data","defaultExpandedDepth","restProps","collection","rootNode","defaultExpandedValue","value","children","displayName"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@ark-ui/react/dist/components/json-tree-view/json-tree-view-root.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { getRootNode, nodeToString, nodeToValue } from '@zag-js/json-tree-utils';\nimport { forwardRef, useMemo } from 'react';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { createTreeCollection } from '../collection/tree-collection.js';\nimport { TreeViewRoot } from '../tree-view/tree-view-root.js';\nimport { getBranchValues } from './get-branch-value.js';\nimport { JsonTreeViewPropsProvider } from './json-tree-view-props-context.js';\n\nconst splitJsonTreeViewProps = createSplitProps();\nconst JsonTreeViewRoot = forwardRef((props, ref) => {\n  const [jsonTreeProps, localProps] = splitJsonTreeViewProps(props, [\n    \"maxPreviewItems\",\n    \"collapseStringsAfterLength\",\n    \"quotesOnKeys\",\n    \"groupArraysAfterLength\",\n    \"showNonenumerable\"\n  ]);\n  const { data, defaultExpandedDepth, ...restProps } = localProps;\n  const collection = useMemo(() => {\n    return createTreeCollection({\n      nodeToValue,\n      nodeToString,\n      rootNode: getRootNode(data)\n    });\n  }, [data]);\n  const defaultExpandedValue = useMemo(() => {\n    return defaultExpandedDepth != null ? getBranchValues(collection, defaultExpandedDepth) : void 0;\n  }, [collection, defaultExpandedDepth]);\n  return /* @__PURE__ */ jsx(JsonTreeViewPropsProvider, { value: jsonTreeProps, children: /* @__PURE__ */ jsx(\n    TreeViewRoot,\n    {\n      \"data-scope\": \"json-tree-view\",\n      collection,\n      defaultExpandedValue,\n      ...restProps,\n      ref\n    }\n  ) });\n});\nJsonTreeViewRoot.displayName = \"JsonTreeViewRoot\";\n\nexport { JsonTreeViewRoot };\n"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,aAAA;AAAA,OAAAC,wBAAA;AAAA,MAAAC,SAAA;AACb,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,WAAW,EAAEC,YAAY,EAAEC,WAAW,QAAQ,yBAAyB;AAChF,SAASC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,oBAAoB,QAAQ,kCAAkC;AACvE,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,yBAAyB,QAAQ,mCAAmC;AAE7E,MAAMC,sBAAsB,GAAGL,gBAAgB,CAAC,CAAC;AACjD,MAAMM,gBAAgB,GAAGR,UAAU,CAAC,CAACS,KAAK,EAAEC,GAAG,KAAK;EAClD,MAAM,CAACC,aAAa,EAAEC,UAAU,CAAC,GAAGL,sBAAsB,CAACE,KAAK,EAAE,CAChE,iBAAiB,EACjB,4BAA4B,EAC5B,cAAc,EACd,wBAAwB,EACxB,mBAAmB,CACpB,CAAC;EACF,MAAM;MAAEI,IAAI;MAAEC;IAAmC,CAAC,GAAGF,UAAU;IAAxBG,SAAS,GAAArB,wBAAA,CAAKkB,UAAU,EAAAjB,SAAA;EAC/D,MAAMqB,UAAU,GAAGf,OAAO,CAAC,MAAM;IAC/B,OAAOE,oBAAoB,CAAC;MAC1BJ,WAAW;MACXD,YAAY;MACZmB,QAAQ,EAAEpB,WAAW,CAACgB,IAAI;IAC5B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACV,MAAMK,oBAAoB,GAAGjB,OAAO,CAAC,MAAM;IACzC,OAAOa,oBAAoB,IAAI,IAAI,GAAGT,eAAe,CAACW,UAAU,EAAEF,oBAAoB,CAAC,GAAG,KAAK,CAAC;EAClG,CAAC,EAAE,CAACE,UAAU,EAAEF,oBAAoB,CAAC,CAAC;EACtC,OAAO,eAAgBlB,GAAG,CAACU,yBAAyB,EAAE;IAAEa,KAAK,EAAER,aAAa;IAAES,QAAQ,EAAE,eAAgBxB,GAAG,CACzGQ,YAAY,EAAAX,aAAA,CAAAA,aAAA;MAEV,YAAY,EAAE,gBAAgB;MAC9BuB,UAAU;MACVE;IAAoB,GACjBH,SAAS;MACZL;IAAG,EAEP;EAAE,CAAC,CAAC;AACN,CAAC,CAAC;AACFF,gBAAgB,CAACa,WAAW,GAAG,kBAAkB;AAEjD,SAASb,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}