{"ast":null,"code":"import _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { getByTypeahead, dataAttr, isLeftClick, ariaAttr, isAnchorElement, isModifierKey, isComposingEvent, getEventTarget, isEditableElement, getEventKey } from '@zag-js/dom-query';\nimport { addOrRemove, first, uniq, diff, isArray, toArray, remove, last, isEqual, createSplitProps, add, partition, ensure } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\"branch\", \"branchContent\", \"branchControl\", \"branchIndentGuide\", \"branchIndicator\", \"branchText\", \"branchTrigger\", \"item\", \"itemIndicator\", \"itemText\", \"label\", \"nodeCheckbox\", \"root\", \"tree\");\nvar parts = anatomy.build();\nvar collection = options => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({\n    rootNode: {\n      children: []\n    }\n  });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = ctx => {\n  var _ctx$ids$root, _ctx$ids;\n  return (_ctx$ids$root = (_ctx$ids = ctx.ids) === null || _ctx$ids === void 0 ? void 0 : _ctx$ids.root) !== null && _ctx$ids$root !== void 0 ? _ctx$ids$root : \"tree:\".concat(ctx.id, \":root\");\n};\nvar getLabelId = ctx => {\n  var _ctx$ids$label, _ctx$ids2;\n  return (_ctx$ids$label = (_ctx$ids2 = ctx.ids) === null || _ctx$ids2 === void 0 ? void 0 : _ctx$ids2.label) !== null && _ctx$ids$label !== void 0 ? _ctx$ids$label : \"tree:\".concat(ctx.id, \":label\");\n};\nvar getNodeId = (ctx, value) => {\n  var _ctx$ids$node, _ctx$ids3, _ctx$ids3$node;\n  return (_ctx$ids$node = (_ctx$ids3 = ctx.ids) === null || _ctx$ids3 === void 0 || (_ctx$ids3$node = _ctx$ids3.node) === null || _ctx$ids3$node === void 0 ? void 0 : _ctx$ids3$node.call(_ctx$ids3, value)) !== null && _ctx$ids$node !== void 0 ? _ctx$ids$node : \"tree:\".concat(ctx.id, \":node:\").concat(value);\n};\nvar getTreeId = ctx => {\n  var _ctx$ids$tree, _ctx$ids4;\n  return (_ctx$ids$tree = (_ctx$ids4 = ctx.ids) === null || _ctx$ids4 === void 0 ? void 0 : _ctx$ids4.tree) !== null && _ctx$ids$tree !== void 0 ? _ctx$ids$tree : \"tree:\".concat(ctx.id, \":tree\");\n};\nvar focusNode = (ctx, value) => {\n  var _ctx$getById;\n  if (value == null) return;\n  (_ctx$getById = ctx.getById(getNodeId(ctx, value))) === null || _ctx$getById === void 0 || _ctx$getById.focus();\n};\nfunction getCheckedState(collection2, node, checkedValue) {\n  const value = collection2.getNodeValue(node);\n  if (!collection2.isBranchNode(node)) {\n    return checkedValue.includes(value);\n  }\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every(v => checkedValue.includes(v));\n  const someChecked = childValues.some(v => checkedValue.includes(v));\n  return allChecked ? true : someChecked ? \"indeterminate\" : false;\n}\nfunction toggleBranchChecked(collection2, value, checkedValue) {\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every(child => checkedValue.includes(child));\n  return uniq(allChecked ? remove(checkedValue, ...childValues) : add(checkedValue, ...childValues));\n}\nfunction getCheckedValueMap(collection2, checkedValue) {\n  const map = /* @__PURE__ */new Map();\n  collection2.visit({\n    onEnter: node => {\n      const value = collection2.getNodeValue(node);\n      const isBranch = collection2.isBranchNode(node);\n      const checked = getCheckedState(collection2, node, checkedValue);\n      map.set(value, {\n        type: isBranch ? \"branch\" : \"leaf\",\n        checked\n      });\n    }\n  });\n  return map;\n}\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    scope,\n    computed,\n    prop,\n    send\n  } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const checkedValue = Array.from(context.get(\"checkedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  const loadingStatus = context.get(\"loadingStatus\");\n  function getNodeState(props2) {\n    const {\n      node,\n      indexPath\n    } = props2;\n    const value = collection2.getNodeValue(node);\n    const firstNode = collection2.getFirstNode();\n    const firstNodeValue = firstNode ? collection2.getNodeValue(firstNode) : null;\n    return {\n      id: getNodeId(scope, value),\n      value,\n      indexPath,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? firstNodeValue == value : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      loading: loadingStatus[value] === \"loading\",\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node),\n      get checked() {\n        return getCheckedState(collection2, node, checkedValue);\n      }\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    checkedValue,\n    toggleChecked(value, isBranch) {\n      send({\n        type: \"CHECKED.TOGGLE\",\n        value,\n        isBranch\n      });\n    },\n    setChecked(value) {\n      send({\n        type: \"CHECKED.SET\",\n        value\n      });\n    },\n    clearChecked() {\n      send({\n        type: \"CHECKED.CLEAR\"\n      });\n    },\n    getCheckedMap() {\n      return getCheckedValueMap(collection2, checkedValue);\n    },\n    expand(value) {\n      send({\n        type: value ? \"BRANCH.EXPAND\" : \"EXPANDED.ALL\",\n        value\n      });\n    },\n    collapse(value) {\n      send({\n        type: value ? \"BRANCH.COLLAPSE\" : \"EXPANDED.CLEAR\",\n        value\n      });\n    },\n    deselect(value) {\n      send({\n        type: value ? \"NODE.DESELECT\" : \"SELECTED.CLEAR\",\n        value\n      });\n    },\n    select(value) {\n      send({\n        type: value ? \"NODE.SELECT\" : \"SELECTED.ALL\",\n        value,\n        isTrusted: false\n      });\n    },\n    getVisibleNodes() {\n      return computed(\"visibleNodes\").map(_ref => {\n        let {\n          node\n        } = _ref;\n        return node;\n      });\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"select.parent\"\n      });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand.parent\"\n      });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue\n      });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue\n      });\n    },\n    getRootProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.root.attrs), {}, {\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      }));\n    },\n    getLabelProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.label.attrs), {}, {\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      }));\n    },\n    getTreeProps() {\n      return normalize.element(_objectSpread(_objectSpread({}, parts.tree.attrs), {}, {\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target === null || target === void 0 ? void 0 : target.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(\"[zag-js/tree-view] Node id not found for node\", node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_DOWN\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_UP\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\",\n                id: nodeId\n              });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"BRANCH_NODE.ARROW_RIGHT\",\n                id: nodeId\n              });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.HOME\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.END\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({\n                  type: \"TREE.TYPEAHEAD\",\n                  key: event2.key\n                });\n              } else {\n                var _keyMap$Enter;\n                (_keyMap$Enter = keyMap.Enter) === null || _keyMap$Enter === void 0 || _keyMap$Enter.call(keyMap, event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              if (isAnchorElement(target) && isModifierKey(event2)) return;\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\",\n                id: nodeId,\n                src: \"keyboard\"\n              });\n              if (!isAnchorElement(target)) {\n                event2.preventDefault();\n              }\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SIBLINGS.EXPAND\",\n                id: nodeId\n              });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SELECTED.ALL\",\n                moveFocus: true\n              });\n            }\n          };\n          const key = getEventKey(event, {\n            dir: prop(\"dir\")\n          });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!getByTypeahead.isValidEvent(event)) return;\n          send({\n            type: \"TREE.TYPEAHEAD\",\n            key: event.key,\n            id: nodeId\n          });\n          event.preventDefault();\n        }\n      }));\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.item.attrs), {}, {\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(nodeState.focused),\n        role: \"treeitem\",\n        \"aria-current\": nodeState.selected ? \"true\" : void 0,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"aria-level\": nodeState.depth,\n        \"data-depth\": nodeState.depth,\n        style: {\n          \"--depth\": nodeState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n          if (!isAnchorElement(event.currentTarget)) {\n            event.preventDefault();\n          }\n        }\n      }));\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.itemText.attrs), {}, {\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      }));\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.itemIndicator.attrs), {}, {\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      }));\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branch.attrs), {}, {\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      }));\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branchIndicator.attrs), {}, {\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-loading\": dataAttr(nodeState.loading)\n      }));\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branchTrigger.attrs), {}, {\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        \"data-loading\": dataAttr(nodeState.loading),\n        disabled: nodeState.loading,\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          send({\n            type: \"BRANCH_TOGGLE.CLICK\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        }\n      }));\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branchControl.attrs), {}, {\n        role: \"button\",\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        onFocus(event) {\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (nodeState.loading) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"BRANCH_NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n        }\n      }));\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branchText.attrs), {}, {\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-loading\": dataAttr(nodeState.loading)\n      }));\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branchContent.attrs), {}, {\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      }));\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element(_objectSpread(_objectSpread({}, parts.branchIndentGuide.attrs), {}, {\n        \"data-depth\": nodeState.depth\n      }));\n    },\n    getNodeCheckboxProps(props2) {\n      const nodeState = getNodeState(props2);\n      const checkedState = nodeState.checked;\n      return normalize.element(_objectSpread(_objectSpread({}, parts.nodeCheckbox.attrs), {}, {\n        tabIndex: -1,\n        role: \"checkbox\",\n        \"data-state\": checkedState === true ? \"checked\" : checkedState === false ? \"unchecked\" : \"indeterminate\",\n        \"aria-checked\": checkedState === true ? \"true\" : checkedState === false ? \"false\" : \"mixed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          send({\n            type: \"CHECKED.TOGGLE\",\n            value: nodeState.value,\n            isBranch: nodeState.isBranch\n          });\n          event.stopPropagation();\n          const node = event.currentTarget.closest(\"[role=treeitem]\");\n          node === null || node === void 0 || node.focus({\n            preventScroll: true\n          });\n        }\n      }));\n    }\n  };\n}\nfunction expandBranches(params, values) {\n  const {\n    context,\n    prop,\n    refs\n  } = params;\n  if (!prop(\"loadChildren\")) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...values)));\n    return;\n  }\n  const loadingStatus = context.get(\"loadingStatus\");\n  const [loadedValues, loadingValues] = partition(values, value => loadingStatus[value] === \"loaded\");\n  if (loadedValues.length > 0) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...loadedValues)));\n  }\n  if (loadingValues.length === 0) return;\n  const collection2 = prop(\"collection\");\n  const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, id => {\n    const node = collection2.findNode(id);\n    return collection2.getNodeChildren(node).length > 0;\n  });\n  if (nodeWithChildren.length > 0) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...nodeWithChildren)));\n  }\n  if (nodeWithoutChildren.length === 0) return;\n  context.set(\"loadingStatus\", prev => _objectSpread(_objectSpread({}, prev), nodeWithoutChildren.reduce((acc, id) => _objectSpread(_objectSpread({}, acc), {}, {\n    [id]: \"loading\"\n  }), {})));\n  const nodesToLoad = nodeWithoutChildren.map(id => {\n    const indexPath = collection2.getIndexPath(id);\n    const valuePath = collection2.getValuePath(indexPath);\n    const node = collection2.findNode(id);\n    return {\n      id,\n      indexPath,\n      valuePath,\n      node\n    };\n  });\n  const pendingAborts = refs.get(\"pendingAborts\");\n  const loadChildren = prop(\"loadChildren\");\n  ensure(loadChildren, () => \"[zag-js/tree-view] `loadChildren` is required for async expansion\");\n  const proms = nodesToLoad.map(_ref2 => {\n    let {\n      id,\n      indexPath,\n      valuePath,\n      node\n    } = _ref2;\n    const existingAbort = pendingAborts.get(id);\n    if (existingAbort) {\n      existingAbort.abort();\n      pendingAborts.delete(id);\n    }\n    const abortController = new AbortController();\n    pendingAborts.set(id, abortController);\n    return loadChildren({\n      valuePath,\n      indexPath,\n      node,\n      signal: abortController.signal\n    });\n  });\n  Promise.allSettled(proms).then(results => {\n    const loadedValues2 = [];\n    const nodeWithErrors = [];\n    const nextLoadingStatus = context.get(\"loadingStatus\");\n    let collection3 = prop(\"collection\");\n    results.forEach((result, index) => {\n      const {\n        id,\n        indexPath,\n        node,\n        valuePath\n      } = nodesToLoad[index];\n      if (result.status === \"fulfilled\") {\n        nextLoadingStatus[id] = \"loaded\";\n        loadedValues2.push(id);\n        collection3 = collection3.replace(indexPath, _objectSpread(_objectSpread({}, node), {}, {\n          children: result.value\n        }));\n      } else {\n        pendingAborts.delete(id);\n        Reflect.deleteProperty(nextLoadingStatus, id);\n        nodeWithErrors.push({\n          node,\n          error: result.reason,\n          indexPath,\n          valuePath\n        });\n      }\n    });\n    context.set(\"loadingStatus\", nextLoadingStatus);\n    if (loadedValues2.length) {\n      var _prop;\n      context.set(\"expandedValue\", prev => uniq(add(prev, ...loadedValues2)));\n      (_prop = prop(\"onLoadChildrenComplete\")) === null || _prop === void 0 || _prop({\n        collection: collection3\n      });\n    }\n    if (nodeWithErrors.length) {\n      var _prop2;\n      (_prop2 = prop(\"onLoadChildrenError\")) === null || _prop2 === void 0 || _prop2({\n        nodes: nodeWithErrors\n      });\n    }\n  });\n}\n\n// src/utils/visit-skip.ts\nfunction skipFn(params) {\n  const {\n    prop,\n    context\n  } = params;\n  return function skip(_ref3) {\n    let {\n      indexPath\n    } = _ref3;\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some(value => !context.get(\"expandedValue\").includes(value));\n  };\n}\n\n// src/tree-view.machine.ts\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props(_ref4) {\n    let {\n      props: props2\n    } = _ref4;\n    return _objectSpread({\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: []\n    }, props2);\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context(_ref5) {\n    let {\n      prop,\n      bindable,\n      getContext\n    } = _ref5;\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual,\n        onChange(expandedValue) {\n          var _prop3;\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          (_prop3 = prop(\"onExpandedChange\")) === null || _prop3 === void 0 || _prop3({\n            expandedValue,\n            focusedValue,\n            get expandedNodes() {\n              return prop(\"collection\").findNodes(expandedValue);\n            }\n          });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual,\n        onChange(selectedValue) {\n          var _prop4;\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          (_prop4 = prop(\"onSelectionChange\")) === null || _prop4 === void 0 || _prop4({\n            selectedValue,\n            focusedValue,\n            get selectedNodes() {\n              return prop(\"collection\").findNodes(selectedValue);\n            }\n          });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"defaultFocusedValue\") || null,\n        value: prop(\"focusedValue\"),\n        onChange(focusedValue) {\n          var _prop5;\n          (_prop5 = prop(\"onFocusChange\")) === null || _prop5 === void 0 || _prop5({\n            focusedValue,\n            get focusedNode() {\n              return focusedValue ? prop(\"collection\").findNode(focusedValue) : null;\n            }\n          });\n        }\n      })),\n      loadingStatus: bindable(() => ({\n        defaultValue: {}\n      })),\n      checkedValue: bindable(() => ({\n        defaultValue: prop(\"defaultCheckedValue\") || [],\n        value: prop(\"checkedValue\"),\n        isEqual,\n        onChange(value) {\n          var _prop6;\n          (_prop6 = prop(\"onCheckedChange\")) === null || _prop6 === void 0 || _prop6({\n            checkedValue: value\n          });\n        }\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: _objectSpread({}, getByTypeahead.defaultOptions),\n      pendingAborts: /* @__PURE__ */new Map()\n    };\n  },\n  computed: {\n    isMultipleSelection: _ref6 => {\n      let {\n        prop\n      } = _ref6;\n      return prop(\"selectionMode\") === \"multiple\";\n    },\n    isTypingAhead: _ref7 => {\n      let {\n        refs\n      } = _ref7;\n      return refs.get(\"typeaheadState\").keysSoFar.length > 0;\n    },\n    visibleNodes: _ref8 => {\n      let {\n        prop,\n        context\n      } = _ref8;\n      const nodes = [];\n      prop(\"collection\").visit({\n        skip: skipFn({\n          prop,\n          context\n        }),\n        onEnter: (node, indexPath) => {\n          nodes.push({\n            node,\n            indexPath\n          });\n        }\n      });\n      return nodes;\n    }\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"EXPANDED.CLEAR\": {\n      actions: [\"clearExpanded\"]\n    },\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    },\n    \"BRANCH.EXPAND\": {\n      actions: [\"expandBranches\"]\n    },\n    \"BRANCH.COLLAPSE\": {\n      actions: [\"collapseBranches\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [{\n      guard: and(\"isMultipleSelection\", \"moveFocus\"),\n      actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n    }, {\n      guard: \"isMultipleSelection\",\n      actions: [\"selectAllNodes\"]\n    }],\n    \"SELECTED.CLEAR\": {\n      actions: [\"clearSelected\"]\n    },\n    \"NODE.SELECT\": {\n      actions: [\"selectNode\"]\n    },\n    \"NODE.DESELECT\": {\n      actions: [\"deselectNode\"]\n    },\n    \"CHECKED.TOGGLE\": {\n      actions: [\"toggleChecked\"]\n    },\n    \"CHECKED.SET\": {\n      actions: [\"setChecked\"]\n    },\n    \"CHECKED.CLEAR\": {\n      actions: [\"clearChecked\"]\n    }\n  },\n  exit: [\"clearPendingAborts\"],\n  states: {\n    idle: {\n      on: {\n        \"NODE.FOCUS\": {\n          actions: [\"setFocusedNode\"]\n        },\n        \"NODE.ARROW_DOWN\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n        }, {\n          actions: [\"focusTreeNextNode\"]\n        }],\n        \"NODE.ARROW_UP\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n        }, {\n          actions: [\"focusTreePrevNode\"]\n        }],\n        \"NODE.ARROW_LEFT\": {\n          actions: [\"focusBranchNode\"]\n        },\n        \"BRANCH_NODE.ARROW_LEFT\": [{\n          guard: \"isBranchExpanded\",\n          actions: [\"collapseBranch\"]\n        }, {\n          actions: [\"focusBranchNode\"]\n        }],\n        \"BRANCH_NODE.ARROW_RIGHT\": [{\n          guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n          actions: [\"focusBranchFirstNode\"]\n        }, {\n          actions: [\"expandBranch\"]\n        }],\n        \"SIBLINGS.EXPAND\": {\n          actions: [\"expandSiblingBranches\"]\n        },\n        \"NODE.HOME\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n        }, {\n          actions: [\"focusTreeFirstNode\"]\n        }],\n        \"NODE.END\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n        }, {\n          actions: [\"focusTreeLastNode\"]\n        }],\n        \"NODE.CLICK\": [{\n          guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n          actions: [\"toggleNodeSelection\"]\n        }, {\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToNode\"]\n        }, {\n          actions: [\"selectNode\"]\n        }],\n        \"BRANCH_NODE.CLICK\": [{\n          guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n          actions: [\"toggleNodeSelection\"]\n        }, {\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToNode\"]\n        }, {\n          guard: \"expandOnClick\",\n          actions: [\"selectNode\", \"toggleBranchNode\"]\n        }, {\n          actions: [\"selectNode\"]\n        }],\n        \"BRANCH_TOGGLE.CLICK\": {\n          actions: [\"toggleBranchNode\"]\n        },\n        \"TREE.TYPEAHEAD\": {\n          actions: [\"focusMatchedNode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: _ref9 => {\n        let {\n          context,\n          event\n        } = _ref9;\n        return context.get(\"focusedValue\") === event.id;\n      },\n      isBranchExpanded: _ref0 => {\n        let {\n          context,\n          event\n        } = _ref0;\n        return context.get(\"expandedValue\").includes(event.id);\n      },\n      isShiftKey: _ref1 => {\n        let {\n          event\n        } = _ref1;\n        return event.shiftKey;\n      },\n      isCtrlKey: _ref10 => {\n        let {\n          event\n        } = _ref10;\n        return event.ctrlKey;\n      },\n      hasSelectedItems: _ref11 => {\n        let {\n          context\n        } = _ref11;\n        return context.get(\"selectedValue\").length > 0;\n      },\n      isMultipleSelection: _ref12 => {\n        let {\n          prop\n        } = _ref12;\n        return prop(\"selectionMode\") === \"multiple\";\n      },\n      moveFocus: _ref13 => {\n        let {\n          event\n        } = _ref13;\n        return !!event.moveFocus;\n      },\n      expandOnClick: _ref14 => {\n        let {\n          prop\n        } = _ref14;\n        return !!prop(\"expandOnClick\");\n      }\n    },\n    actions: {\n      selectNode(_ref15) {\n        let {\n          context,\n          event\n        } = _ref15;\n        const value = event.id || event.value;\n        context.set(\"selectedValue\", prev => {\n          if (value == null) return prev;\n          if (!event.isTrusted && isArray(value)) return prev.concat(...value);\n          return [isArray(value) ? last(value) : value].filter(Boolean);\n        });\n      },\n      deselectNode(_ref16) {\n        let {\n          context,\n          event\n        } = _ref16;\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", prev => remove(prev, ...value));\n      },\n      setFocusedNode(_ref17) {\n        let {\n          context,\n          event\n        } = _ref17;\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode(_ref18) {\n        let {\n          context\n        } = _ref18;\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem(_ref19) {\n        let {\n          context\n        } = _ref19;\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode(_ref20) {\n        let {\n          context,\n          event,\n          action\n        } = _ref20;\n        const isExpanded = context.get(\"expandedValue\").includes(event.id);\n        action(isExpanded ? [\"collapseBranch\"] : [\"expandBranch\"]);\n      },\n      expandBranch(params) {\n        const {\n          event\n        } = params;\n        expandBranches(params, [event.id]);\n      },\n      expandBranches(params) {\n        const {\n          context,\n          event\n        } = params;\n        const valuesToExpand = toArray(event.value);\n        expandBranches(params, diff(valuesToExpand, context.get(\"expandedValue\")));\n      },\n      collapseBranch(_ref21) {\n        let {\n          context,\n          event\n        } = _ref21;\n        context.set(\"expandedValue\", prev => remove(prev, event.id));\n      },\n      collapseBranches(params) {\n        const {\n          context,\n          event\n        } = params;\n        const value = toArray(event.value);\n        context.set(\"expandedValue\", prev => remove(prev, ...value));\n      },\n      setExpanded(_ref22) {\n        let {\n          context,\n          event\n        } = _ref22;\n        if (!isArray(event.value)) return;\n        context.set(\"expandedValue\", event.value);\n      },\n      clearExpanded(_ref23) {\n        let {\n          context\n        } = _ref23;\n        context.set(\"expandedValue\", []);\n      },\n      setSelected(_ref24) {\n        let {\n          context,\n          event\n        } = _ref24;\n        if (!isArray(event.value)) return;\n        context.set(\"selectedValue\", event.value);\n      },\n      clearSelected(_ref25) {\n        let {\n          context\n        } = _ref25;\n        context.set(\"selectedValue\", []);\n      },\n      focusTreeFirstNode(_ref26) {\n        let {\n          prop,\n          scope\n        } = _ref26;\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode(params) {\n        const {\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode(void 0, {\n          skip: skipFn(params)\n        });\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode(_ref27) {\n        let {\n          event,\n          prop,\n          scope\n        } = _ref27;\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode(_ref28) {\n        let {\n          event,\n          prop,\n          scope\n        } = _ref28;\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes(_ref29) {\n        let {\n          context,\n          prop\n        } = _ref29;\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const {\n          context,\n          prop,\n          refs,\n          event,\n          scope,\n          computed\n        } = params;\n        const nodes = computed(\"visibleNodes\");\n        const elements = nodes.map(_ref30 => {\n          let {\n            node: node2\n          } = _ref30;\n          return {\n            textContent: prop(\"collection\").stringifyNode(node2),\n            id: prop(\"collection\").getNodeValue(node2)\n          };\n        });\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node === null || node === void 0 ? void 0 : node.id);\n      },\n      toggleNodeSelection(_ref31) {\n        let {\n          context,\n          event\n        } = _ref31;\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const branchValues = prop(\"collection\").getBranchValues();\n        const valuesToExpand = diff(branchValues, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      expandSiblingBranches(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map(node => collection2.getNodeValue(node));\n        const valuesToExpand = diff(values, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      extendSelectionToNode(params) {\n        const {\n          context,\n          event,\n          prop,\n          computed\n        } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = computed(\"visibleNodes\");\n        visibleNodes.forEach(_ref32 => {\n          let {\n            node\n          } = _ref32;\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      clearPendingAborts(_ref33) {\n        let {\n          refs\n        } = _ref33;\n        const aborts = refs.get(\"pendingAborts\");\n        aborts.forEach(abort => abort.abort());\n        aborts.clear();\n      },\n      toggleChecked(_ref34) {\n        let {\n          context,\n          event,\n          prop\n        } = _ref34;\n        const collection2 = prop(\"collection\");\n        context.set(\"checkedValue\", prev => event.isBranch ? toggleBranchChecked(collection2, event.value, prev) : addOrRemove(prev, event.value));\n      },\n      setChecked(_ref35) {\n        let {\n          context,\n          event\n        } = _ref35;\n        context.set(\"checkedValue\", event.value);\n      },\n      clearChecked(_ref36) {\n        let {\n          context\n        } = _ref36;\n        context.set(\"checkedValue\", []);\n      }\n    }\n  }\n});\nvar props = createProps()([\"ids\", \"collection\", \"dir\", \"expandedValue\", \"expandOnClick\", \"defaultFocusedValue\", \"focusedValue\", \"getRootNode\", \"id\", \"onExpandedChange\", \"onFocusChange\", \"onSelectionChange\", \"checkedValue\", \"selectedValue\", \"selectionMode\", \"typeahead\", \"defaultExpandedValue\", \"defaultSelectedValue\", \"defaultCheckedValue\", \"onCheckedChange\", \"onLoadChildrenComplete\", \"onLoadChildrenError\", \"loadChildren\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","TreeCollection","filePathToTree","getByTypeahead","dataAttr","isLeftClick","ariaAttr","isAnchorElement","isModifierKey","isComposingEvent","getEventTarget","isEditableElement","getEventKey","addOrRemove","first","uniq","diff","isArray","toArray","remove","last","isEqual","createSplitProps","add","partition","ensure","createGuards","createMachine","createProps","anatomy","parts","build","collection","options","empty","rootNode","children","filePathCollection","paths","getRootId","ctx","_ctx$ids$root","_ctx$ids","ids","root","concat","id","getLabelId","_ctx$ids$label","_ctx$ids2","label","getNodeId","value","_ctx$ids$node","_ctx$ids3","_ctx$ids3$node","node","call","getTreeId","_ctx$ids$tree","_ctx$ids4","tree","focusNode","_ctx$getById","getById","focus","getCheckedState","collection2","checkedValue","getNodeValue","isBranchNode","includes","childValues","getDescendantValues","allChecked","every","v","someChecked","some","toggleBranchChecked","child","getCheckedValueMap","map","Map","visit","onEnter","isBranch","checked","set","type","connect","service","normalize","context","scope","computed","prop","send","expandedValue","Array","from","get","selectedValue","isTypingAhead","focusedValue","loadingStatus","getNodeState","props2","indexPath","firstNode","getFirstNode","firstNodeValue","valuePath","getValuePath","disabled","Boolean","focused","selected","expanded","loading","depth","length","toggleChecked","setChecked","clearChecked","getCheckedMap","expand","collapse","deselect","select","isTrusted","getVisibleNodes","_ref","selectParent","parentNode","getParentNode","_selectedValue","src","expandParent","_expandedValue","setExpandedValue","setSelectedValue","getRootProps","element","_objectSpread","attrs","dir","getLabelProps","getTreeProps","role","tabIndex","onKeyDown","event","defaultPrevented","target","closest","nodeId","dataset","console","warn","matches","keyMap","ArrowDown","event2","preventDefault","shiftKey","ArrowUp","ArrowLeft","ArrowRight","Home","End","Space","key","_keyMap$Enter","Enter","*","a","metaKey","moveFocus","exec","isValidEvent","getItemProps","nodeState","item","join","style","onFocus","stopPropagation","onClick","currentTarget","isMetaKey","ctrlKey","getItemTextProps","itemState","itemText","getItemIndicatorProps","itemIndicator","hidden","getBranchProps","branch","getBranchIndicatorProps","branchIndicator","getBranchTriggerProps","branchTrigger","getBranchControlProps","branchControl","getBranchTextProps","branchText","getBranchContentProps","branchContent","getBranchIndentGuideProps","branchIndentGuide","getNodeCheckboxProps","checkedState","nodeCheckbox","preventScroll","expandBranches","params","values","refs","prev","loadedValues","loadingValues","nodeWithChildren","nodeWithoutChildren","findNode","getNodeChildren","reduce","acc","nodesToLoad","getIndexPath","pendingAborts","loadChildren","proms","_ref2","existingAbort","abort","delete","abortController","AbortController","signal","Promise","allSettled","then","results","loadedValues2","nodeWithErrors","nextLoadingStatus","collection3","forEach","result","index","status","push","replace","Reflect","deleteProperty","error","reason","_prop","_prop2","nodes","skipFn","skip","_ref3","slice","and","machine","props","_ref4","selectionMode","typeahead","expandOnClick","defaultExpandedValue","defaultSelectedValue","initialState","_ref5","bindable","getContext","defaultValue","onChange","_prop3","expandedNodes","findNodes","_prop4","selectedNodes","_prop5","focusedNode","_prop6","typeaheadState","defaultOptions","isMultipleSelection","_ref6","_ref7","keysSoFar","visibleNodes","_ref8","on","actions","guard","exit","states","idle","implementations","guards","isBranchFocused","_ref9","isBranchExpanded","_ref0","isShiftKey","_ref1","isCtrlKey","_ref10","hasSelectedItems","_ref11","_ref12","_ref13","_ref14","selectNode","_ref15","filter","deselectNode","_ref16","setFocusedNode","_ref17","clearFocusedNode","_ref18","clearSelectedItem","_ref19","toggleBranchNode","_ref20","action","isExpanded","expandBranch","valuesToExpand","collapseBranch","_ref21","collapseBranches","setExpanded","_ref22","clearExpanded","_ref23","setSelected","_ref24","clearSelected","_ref25","focusTreeFirstNode","_ref26","firstValue","focusTreeLastNode","lastNode","getLastNode","lastValue","focusBranchFirstNode","_ref27","branchNode","focusTreeNextNode","nextNode","getNextNode","nextValue","focusTreePrevNode","prevNode","getPreviousNode","prevValue","focusBranchNode","_ref28","parentValue","selectAllNodes","_ref29","getValues","focusMatchedNode","elements","_ref30","node2","textContent","stringifyNode","state","activeId","toggleNodeSelection","_ref31","expandAllBranches","branchValues","getBranchValues","expandSiblingBranches","getSiblingNodes","extendSelectionToNode","anchorValue","targetValue","hits","_ref32","nodeValue","extendSelectionToNextNode","Set","has","extendSelectionToPrevNode","extendSelectionToFirstNode","currentSelection","extendSelectionToLastNode","current","clearPendingAborts","_ref33","aborts","clear","_ref34","_ref35","_ref36","splitProps","itemProps","splitItemProps"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@zag-js/tree-view/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { getByTypeahead, dataAttr, isLeftClick, ariaAttr, isAnchorElement, isModifierKey, isComposingEvent, getEventTarget, isEditableElement, getEventKey } from '@zag-js/dom-query';\nimport { addOrRemove, first, uniq, diff, isArray, toArray, remove, last, isEqual, createSplitProps, add, partition, ensure } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\n  \"branch\",\n  \"branchContent\",\n  \"branchControl\",\n  \"branchIndentGuide\",\n  \"branchIndicator\",\n  \"branchText\",\n  \"branchTrigger\",\n  \"item\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"label\",\n  \"nodeCheckbox\",\n  \"root\",\n  \"tree\"\n);\nvar parts = anatomy.build();\nvar collection = (options) => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({ rootNode: { children: [] } });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = (ctx) => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = (ctx) => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  ctx.getById(getNodeId(ctx, value))?.focus();\n};\nfunction getCheckedState(collection2, node, checkedValue) {\n  const value = collection2.getNodeValue(node);\n  if (!collection2.isBranchNode(node)) {\n    return checkedValue.includes(value);\n  }\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every((v) => checkedValue.includes(v));\n  const someChecked = childValues.some((v) => checkedValue.includes(v));\n  return allChecked ? true : someChecked ? \"indeterminate\" : false;\n}\nfunction toggleBranchChecked(collection2, value, checkedValue) {\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every((child) => checkedValue.includes(child));\n  return uniq(allChecked ? remove(checkedValue, ...childValues) : add(checkedValue, ...childValues));\n}\nfunction getCheckedValueMap(collection2, checkedValue) {\n  const map = /* @__PURE__ */ new Map();\n  collection2.visit({\n    onEnter: (node) => {\n      const value = collection2.getNodeValue(node);\n      const isBranch = collection2.isBranchNode(node);\n      const checked = getCheckedState(collection2, node, checkedValue);\n      map.set(value, {\n        type: isBranch ? \"branch\" : \"leaf\",\n        checked\n      });\n    }\n  });\n  return map;\n}\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const { context, scope, computed, prop, send } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const checkedValue = Array.from(context.get(\"checkedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  const loadingStatus = context.get(\"loadingStatus\");\n  function getNodeState(props2) {\n    const { node, indexPath } = props2;\n    const value = collection2.getNodeValue(node);\n    const firstNode = collection2.getFirstNode();\n    const firstNodeValue = firstNode ? collection2.getNodeValue(firstNode) : null;\n    return {\n      id: getNodeId(scope, value),\n      value,\n      indexPath,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? firstNodeValue == value : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      loading: loadingStatus[value] === \"loading\",\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node),\n      get checked() {\n        return getCheckedState(collection2, node, checkedValue);\n      }\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    checkedValue,\n    toggleChecked(value, isBranch) {\n      send({ type: \"CHECKED.TOGGLE\", value, isBranch });\n    },\n    setChecked(value) {\n      send({ type: \"CHECKED.SET\", value });\n    },\n    clearChecked() {\n      send({ type: \"CHECKED.CLEAR\" });\n    },\n    getCheckedMap() {\n      return getCheckedValueMap(collection2, checkedValue);\n    },\n    expand(value) {\n      send({ type: value ? \"BRANCH.EXPAND\" : \"EXPANDED.ALL\", value });\n    },\n    collapse(value) {\n      send({ type: value ? \"BRANCH.COLLAPSE\" : \"EXPANDED.CLEAR\", value });\n    },\n    deselect(value) {\n      send({ type: value ? \"NODE.DESELECT\" : \"SELECTED.CLEAR\", value });\n    },\n    select(value) {\n      send({ type: value ? \"NODE.SELECT\" : \"SELECTED.ALL\", value, isTrusted: false });\n    },\n    getVisibleNodes() {\n      return computed(\"visibleNodes\").map(({ node }) => node);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"select.parent\" });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand.parent\" });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({ type: \"EXPANDED.SET\", value: _expandedValue });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({ type: \"SELECTED.SET\", value: _selectedValue });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_DOWN\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_UP\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\", id: nodeId });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"BRANCH_NODE.ARROW_RIGHT\", id: nodeId });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.HOME\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.END\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({ type: \"TREE.TYPEAHEAD\", key: event2.key });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              if (isAnchorElement(target) && isModifierKey(event2)) return;\n              send({ type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\", id: nodeId, src: \"keyboard\" });\n              if (!isAnchorElement(target)) {\n                event2.preventDefault();\n              }\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SIBLINGS.EXPAND\", id: nodeId });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SELECTED.ALL\", moveFocus: true });\n            }\n          };\n          const key = getEventKey(event, { dir: prop(\"dir\") });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!getByTypeahead.isValidEvent(event)) return;\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(nodeState.focused),\n        role: \"treeitem\",\n        \"aria-current\": nodeState.selected ? \"true\" : void 0,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"aria-level\": nodeState.depth,\n        \"data-depth\": nodeState.depth,\n        style: {\n          \"--depth\": nodeState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n          if (!isAnchorElement(event.currentTarget)) {\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        \"data-loading\": dataAttr(nodeState.loading),\n        disabled: nodeState.loading,\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: nodeState.value });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        onFocus(event) {\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (nodeState.loading) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"BRANCH_NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    },\n    getNodeCheckboxProps(props2) {\n      const nodeState = getNodeState(props2);\n      const checkedState = nodeState.checked;\n      return normalize.element({\n        ...parts.nodeCheckbox.attrs,\n        tabIndex: -1,\n        role: \"checkbox\",\n        \"data-state\": checkedState === true ? \"checked\" : checkedState === false ? \"unchecked\" : \"indeterminate\",\n        \"aria-checked\": checkedState === true ? \"true\" : checkedState === false ? \"false\" : \"mixed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          send({ type: \"CHECKED.TOGGLE\", value: nodeState.value, isBranch: nodeState.isBranch });\n          event.stopPropagation();\n          const node = event.currentTarget.closest(\"[role=treeitem]\");\n          node?.focus({ preventScroll: true });\n        }\n      });\n    }\n  };\n}\nfunction expandBranches(params, values) {\n  const { context, prop, refs } = params;\n  if (!prop(\"loadChildren\")) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...values)));\n    return;\n  }\n  const loadingStatus = context.get(\"loadingStatus\");\n  const [loadedValues, loadingValues] = partition(values, (value) => loadingStatus[value] === \"loaded\");\n  if (loadedValues.length > 0) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...loadedValues)));\n  }\n  if (loadingValues.length === 0) return;\n  const collection2 = prop(\"collection\");\n  const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, (id) => {\n    const node = collection2.findNode(id);\n    return collection2.getNodeChildren(node).length > 0;\n  });\n  if (nodeWithChildren.length > 0) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...nodeWithChildren)));\n  }\n  if (nodeWithoutChildren.length === 0) return;\n  context.set(\"loadingStatus\", (prev) => ({\n    ...prev,\n    ...nodeWithoutChildren.reduce((acc, id) => ({ ...acc, [id]: \"loading\" }), {})\n  }));\n  const nodesToLoad = nodeWithoutChildren.map((id) => {\n    const indexPath = collection2.getIndexPath(id);\n    const valuePath = collection2.getValuePath(indexPath);\n    const node = collection2.findNode(id);\n    return { id, indexPath, valuePath, node };\n  });\n  const pendingAborts = refs.get(\"pendingAborts\");\n  const loadChildren = prop(\"loadChildren\");\n  ensure(loadChildren, () => \"[zag-js/tree-view] `loadChildren` is required for async expansion\");\n  const proms = nodesToLoad.map(({ id, indexPath, valuePath, node }) => {\n    const existingAbort = pendingAborts.get(id);\n    if (existingAbort) {\n      existingAbort.abort();\n      pendingAborts.delete(id);\n    }\n    const abortController = new AbortController();\n    pendingAborts.set(id, abortController);\n    return loadChildren({\n      valuePath,\n      indexPath,\n      node,\n      signal: abortController.signal\n    });\n  });\n  Promise.allSettled(proms).then((results) => {\n    const loadedValues2 = [];\n    const nodeWithErrors = [];\n    const nextLoadingStatus = context.get(\"loadingStatus\");\n    let collection3 = prop(\"collection\");\n    results.forEach((result, index) => {\n      const { id, indexPath, node, valuePath } = nodesToLoad[index];\n      if (result.status === \"fulfilled\") {\n        nextLoadingStatus[id] = \"loaded\";\n        loadedValues2.push(id);\n        collection3 = collection3.replace(indexPath, { ...node, children: result.value });\n      } else {\n        pendingAborts.delete(id);\n        Reflect.deleteProperty(nextLoadingStatus, id);\n        nodeWithErrors.push({ node, error: result.reason, indexPath, valuePath });\n      }\n    });\n    context.set(\"loadingStatus\", nextLoadingStatus);\n    if (loadedValues2.length) {\n      context.set(\"expandedValue\", (prev) => uniq(add(prev, ...loadedValues2)));\n      prop(\"onLoadChildrenComplete\")?.({ collection: collection3 });\n    }\n    if (nodeWithErrors.length) {\n      prop(\"onLoadChildrenError\")?.({ nodes: nodeWithErrors });\n    }\n  });\n}\n\n// src/utils/visit-skip.ts\nfunction skipFn(params) {\n  const { prop, context } = params;\n  return function skip({ indexPath }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some((value) => !context.get(\"expandedValue\").includes(value));\n  };\n}\n\n// src/tree-view.machine.ts\nvar { and } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual,\n        onChange(expandedValue) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({\n            expandedValue,\n            focusedValue,\n            get expandedNodes() {\n              return prop(\"collection\").findNodes(expandedValue);\n            }\n          });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual,\n        onChange(selectedValue) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({\n            selectedValue,\n            focusedValue,\n            get selectedNodes() {\n              return prop(\"collection\").findNodes(selectedValue);\n            }\n          });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"defaultFocusedValue\") || null,\n        value: prop(\"focusedValue\"),\n        onChange(focusedValue) {\n          prop(\"onFocusChange\")?.({\n            focusedValue,\n            get focusedNode() {\n              return focusedValue ? prop(\"collection\").findNode(focusedValue) : null;\n            }\n          });\n        }\n      })),\n      loadingStatus: bindable(() => ({\n        defaultValue: {}\n      })),\n      checkedValue: bindable(() => ({\n        defaultValue: prop(\"defaultCheckedValue\") || [],\n        value: prop(\"checkedValue\"),\n        isEqual,\n        onChange(value) {\n          prop(\"onCheckedChange\")?.({ checkedValue: value });\n        }\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: { ...getByTypeahead.defaultOptions },\n      pendingAborts: /* @__PURE__ */ new Map()\n    };\n  },\n  computed: {\n    isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({ refs }) => refs.get(\"typeaheadState\").keysSoFar.length > 0,\n    visibleNodes: ({ prop, context }) => {\n      const nodes = [];\n      prop(\"collection\").visit({\n        skip: skipFn({ prop, context }),\n        onEnter: (node, indexPath) => {\n          nodes.push({ node, indexPath });\n        }\n      });\n      return nodes;\n    }\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"EXPANDED.CLEAR\": {\n      actions: [\"clearExpanded\"]\n    },\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    },\n    \"BRANCH.EXPAND\": {\n      actions: [\"expandBranches\"]\n    },\n    \"BRANCH.COLLAPSE\": {\n      actions: [\"collapseBranches\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [\n      {\n        guard: and(\"isMultipleSelection\", \"moveFocus\"),\n        actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n      },\n      {\n        guard: \"isMultipleSelection\",\n        actions: [\"selectAllNodes\"]\n      }\n    ],\n    \"SELECTED.CLEAR\": {\n      actions: [\"clearSelected\"]\n    },\n    \"NODE.SELECT\": {\n      actions: [\"selectNode\"]\n    },\n    \"NODE.DESELECT\": {\n      actions: [\"deselectNode\"]\n    },\n    \"CHECKED.TOGGLE\": {\n      actions: [\"toggleChecked\"]\n    },\n    \"CHECKED.SET\": {\n      actions: [\"setChecked\"]\n    },\n    \"CHECKED.CLEAR\": {\n      actions: [\"clearChecked\"]\n    }\n  },\n  exit: [\"clearPendingAborts\"],\n  states: {\n    idle: {\n      on: {\n        \"NODE.FOCUS\": {\n          actions: [\"setFocusedNode\"]\n        },\n        \"NODE.ARROW_DOWN\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n          },\n          {\n            actions: [\"focusTreeNextNode\"]\n          }\n        ],\n        \"NODE.ARROW_UP\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n          },\n          {\n            actions: [\"focusTreePrevNode\"]\n          }\n        ],\n        \"NODE.ARROW_LEFT\": {\n          actions: [\"focusBranchNode\"]\n        },\n        \"BRANCH_NODE.ARROW_LEFT\": [\n          {\n            guard: \"isBranchExpanded\",\n            actions: [\"collapseBranch\"]\n          },\n          {\n            actions: [\"focusBranchNode\"]\n          }\n        ],\n        \"BRANCH_NODE.ARROW_RIGHT\": [\n          {\n            guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n            actions: [\"focusBranchFirstNode\"]\n          },\n          {\n            actions: [\"expandBranch\"]\n          }\n        ],\n        \"SIBLINGS.EXPAND\": {\n          actions: [\"expandSiblingBranches\"]\n        },\n        \"NODE.HOME\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n          },\n          {\n            actions: [\"focusTreeFirstNode\"]\n          }\n        ],\n        \"NODE.END\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n          },\n          {\n            actions: [\"focusTreeLastNode\"]\n          }\n        ],\n        \"NODE.CLICK\": [\n          {\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          },\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          },\n          {\n            actions: [\"selectNode\"]\n          }\n        ],\n        \"BRANCH_NODE.CLICK\": [\n          {\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          },\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          },\n          {\n            guard: \"expandOnClick\",\n            actions: [\"selectNode\", \"toggleBranchNode\"]\n          },\n          {\n            actions: [\"selectNode\"]\n          }\n        ],\n        \"BRANCH_TOGGLE.CLICK\": {\n          actions: [\"toggleBranchNode\"]\n        },\n        \"TREE.TYPEAHEAD\": {\n          actions: [\"focusMatchedNode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({ context, event }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({ context, event }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({ event }) => event.shiftKey,\n      isCtrlKey: ({ event }) => event.ctrlKey,\n      hasSelectedItems: ({ context }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({ event }) => !!event.moveFocus,\n      expandOnClick: ({ prop }) => !!prop(\"expandOnClick\")\n    },\n    actions: {\n      selectNode({ context, event }) {\n        const value = event.id || event.value;\n        context.set(\"selectedValue\", (prev) => {\n          if (value == null) return prev;\n          if (!event.isTrusted && isArray(value)) return prev.concat(...value);\n          return [isArray(value) ? last(value) : value].filter(Boolean);\n        });\n      },\n      deselectNode({ context, event }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", (prev) => remove(prev, ...value));\n      },\n      setFocusedNode({ context, event }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({ context }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({ context }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({ context, event, action }) {\n        const isExpanded = context.get(\"expandedValue\").includes(event.id);\n        action(isExpanded ? [\"collapseBranch\"] : [\"expandBranch\"]);\n      },\n      expandBranch(params) {\n        const { event } = params;\n        expandBranches(params, [event.id]);\n      },\n      expandBranches(params) {\n        const { context, event } = params;\n        const valuesToExpand = toArray(event.value);\n        expandBranches(params, diff(valuesToExpand, context.get(\"expandedValue\")));\n      },\n      collapseBranch({ context, event }) {\n        context.set(\"expandedValue\", (prev) => remove(prev, event.id));\n      },\n      collapseBranches(params) {\n        const { context, event } = params;\n        const value = toArray(event.value);\n        context.set(\"expandedValue\", (prev) => remove(prev, ...value));\n      },\n      setExpanded({ context, event }) {\n        if (!isArray(event.value)) return;\n        context.set(\"expandedValue\", event.value);\n      },\n      clearExpanded({ context }) {\n        context.set(\"expandedValue\", []);\n      },\n      setSelected({ context, event }) {\n        if (!isArray(event.value)) return;\n        context.set(\"selectedValue\", event.value);\n      },\n      clearSelected({ context }) {\n        context.set(\"selectedValue\", []);\n      },\n      focusTreeFirstNode({ prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode(params) {\n        const { prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode(void 0, { skip: skipFn(params) });\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({ context, prop }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const { context, prop, refs, event, scope, computed } = params;\n        const nodes = computed(\"visibleNodes\");\n        const elements = nodes.map(({ node: node2 }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({ context, event }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches(params) {\n        const { context, prop } = params;\n        const branchValues = prop(\"collection\").getBranchValues();\n        const valuesToExpand = diff(branchValues, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      expandSiblingBranches(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map((node) => collection2.getNodeValue(node));\n        const valuesToExpand = diff(values, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      extendSelectionToNode(params) {\n        const { context, event, prop, computed } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = computed(\"visibleNodes\");\n        visibleNodes.forEach(({ node }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      clearPendingAborts({ refs }) {\n        const aborts = refs.get(\"pendingAborts\");\n        aborts.forEach((abort) => abort.abort());\n        aborts.clear();\n      },\n      toggleChecked({ context, event, prop }) {\n        const collection2 = prop(\"collection\");\n        context.set(\n          \"checkedValue\",\n          (prev) => event.isBranch ? toggleBranchChecked(collection2, event.value, prev) : addOrRemove(prev, event.value)\n        );\n      },\n      setChecked({ context, event }) {\n        context.set(\"checkedValue\", event.value);\n      },\n      clearChecked({ context }) {\n        context.set(\"checkedValue\", []);\n      }\n    }\n  }\n});\nvar props = createProps()([\n  \"ids\",\n  \"collection\",\n  \"dir\",\n  \"expandedValue\",\n  \"expandOnClick\",\n  \"defaultFocusedValue\",\n  \"focusedValue\",\n  \"getRootNode\",\n  \"id\",\n  \"onExpandedChange\",\n  \"onFocusChange\",\n  \"onSelectionChange\",\n  \"checkedValue\",\n  \"selectedValue\",\n  \"selectionMode\",\n  \"typeahead\",\n  \"defaultExpandedValue\",\n  \"defaultSelectedValue\",\n  \"defaultCheckedValue\",\n  \"onCheckedChange\",\n  \"onLoadChildrenComplete\",\n  \"onLoadChildrenError\",\n  \"loadChildren\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\n\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,cAAc,EAAEC,cAAc,QAAQ,oBAAoB;AACnE,SAASC,cAAc,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,WAAW,QAAQ,mBAAmB;AACrL,SAASC,WAAW,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,GAAG,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AACjJ,SAASC,YAAY,EAAEC,aAAa,QAAQ,cAAc;AAC1D,SAASC,WAAW,QAAQ,eAAe;;AAE3C;AACA,IAAIC,OAAO,GAAG7B,aAAa,CAAC,WAAW,CAAC,CAAC8B,KAAK,CAC5C,QAAQ,EACR,eAAe,EACf,eAAe,EACf,mBAAmB,EACnB,iBAAiB,EACjB,YAAY,EACZ,eAAe,EACf,MAAM,EACN,eAAe,EACf,UAAU,EACV,OAAO,EACP,cAAc,EACd,MAAM,EACN,MACF,CAAC;AACD,IAAIA,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC;AAC3B,IAAIC,UAAU,GAAIC,OAAO,IAAK;EAC5B,OAAO,IAAIhC,cAAc,CAACgC,OAAO,CAAC;AACpC,CAAC;AACDD,UAAU,CAACE,KAAK,GAAG,MAAM;EACvB,OAAO,IAAIjC,cAAc,CAAC;IAAEkC,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAG;EAAE,CAAC,CAAC;AAC3D,CAAC;AACD,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EACjC,OAAOpC,cAAc,CAACoC,KAAK,CAAC;AAC9B;;AAEA;AACA,IAAIC,SAAS,GAAIC,GAAG;EAAA,IAAAC,aAAA,EAAAC,QAAA;EAAA,QAAAD,aAAA,IAAAC,QAAA,GAAKF,GAAG,CAACG,GAAG,cAAAD,QAAA,uBAAPA,QAAA,CAASE,IAAI,cAAAH,aAAA,cAAAA,aAAA,WAAAI,MAAA,CAAYL,GAAG,CAACM,EAAE;AAAA,CAAO;AAC/D,IAAIC,UAAU,GAAIP,GAAG;EAAA,IAAAQ,cAAA,EAAAC,SAAA;EAAA,QAAAD,cAAA,IAAAC,SAAA,GAAKT,GAAG,CAACG,GAAG,cAAAM,SAAA,uBAAPA,SAAA,CAASC,KAAK,cAAAF,cAAA,cAAAA,cAAA,WAAAH,MAAA,CAAYL,GAAG,CAACM,EAAE;AAAA,CAAQ;AAClE,IAAIK,SAAS,GAAGA,CAACX,GAAG,EAAEY,KAAK;EAAA,IAAAC,aAAA,EAAAC,SAAA,EAAAC,cAAA;EAAA,QAAAF,aAAA,IAAAC,SAAA,GAAKd,GAAG,CAACG,GAAG,cAAAW,SAAA,gBAAAC,cAAA,GAAPD,SAAA,CAASE,IAAI,cAAAD,cAAA,uBAAbA,cAAA,CAAAE,IAAA,CAAAH,SAAA,EAAgBF,KAAK,CAAC,cAAAC,aAAA,cAAAA,aAAA,WAAAR,MAAA,CAAYL,GAAG,CAACM,EAAE,YAAAD,MAAA,CAASO,KAAK;AAAA,CAAE;AACxF,IAAIM,SAAS,GAAIlB,GAAG;EAAA,IAAAmB,aAAA,EAAAC,SAAA;EAAA,QAAAD,aAAA,IAAAC,SAAA,GAAKpB,GAAG,CAACG,GAAG,cAAAiB,SAAA,uBAAPA,SAAA,CAASC,IAAI,cAAAF,aAAA,cAAAA,aAAA,WAAAd,MAAA,CAAYL,GAAG,CAACM,EAAE;AAAA,CAAO;AAC/D,IAAIgB,SAAS,GAAGA,CAACtB,GAAG,EAAEY,KAAK,KAAK;EAAA,IAAAW,YAAA;EAC9B,IAAIX,KAAK,IAAI,IAAI,EAAE;EACnB,CAAAW,YAAA,GAAAvB,GAAG,CAACwB,OAAO,CAACb,SAAS,CAACX,GAAG,EAAEY,KAAK,CAAC,CAAC,cAAAW,YAAA,eAAlCA,YAAA,CAAoCE,KAAK,CAAC,CAAC;AAC7C,CAAC;AACD,SAASC,eAAeA,CAACC,WAAW,EAAEX,IAAI,EAAEY,YAAY,EAAE;EACxD,MAAMhB,KAAK,GAAGe,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC;EAC5C,IAAI,CAACW,WAAW,CAACG,YAAY,CAACd,IAAI,CAAC,EAAE;IACnC,OAAOY,YAAY,CAACG,QAAQ,CAACnB,KAAK,CAAC;EACrC;EACA,MAAMoB,WAAW,GAAGL,WAAW,CAACM,mBAAmB,CAACrB,KAAK,CAAC;EAC1D,MAAMsB,UAAU,GAAGF,WAAW,CAACG,KAAK,CAAEC,CAAC,IAAKR,YAAY,CAACG,QAAQ,CAACK,CAAC,CAAC,CAAC;EACrE,MAAMC,WAAW,GAAGL,WAAW,CAACM,IAAI,CAAEF,CAAC,IAAKR,YAAY,CAACG,QAAQ,CAACK,CAAC,CAAC,CAAC;EACrE,OAAOF,UAAU,GAAG,IAAI,GAAGG,WAAW,GAAG,eAAe,GAAG,KAAK;AAClE;AACA,SAASE,mBAAmBA,CAACZ,WAAW,EAAEf,KAAK,EAAEgB,YAAY,EAAE;EAC7D,MAAMI,WAAW,GAAGL,WAAW,CAACM,mBAAmB,CAACrB,KAAK,CAAC;EAC1D,MAAMsB,UAAU,GAAGF,WAAW,CAACG,KAAK,CAAEK,KAAK,IAAKZ,YAAY,CAACG,QAAQ,CAACS,KAAK,CAAC,CAAC;EAC7E,OAAOjE,IAAI,CAAC2D,UAAU,GAAGvD,MAAM,CAACiD,YAAY,EAAE,GAAGI,WAAW,CAAC,GAAGjD,GAAG,CAAC6C,YAAY,EAAE,GAAGI,WAAW,CAAC,CAAC;AACpG;AACA,SAASS,kBAAkBA,CAACd,WAAW,EAAEC,YAAY,EAAE;EACrD,MAAMc,GAAG,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;EACrChB,WAAW,CAACiB,KAAK,CAAC;IAChBC,OAAO,EAAG7B,IAAI,IAAK;MACjB,MAAMJ,KAAK,GAAGe,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC;MAC5C,MAAM8B,QAAQ,GAAGnB,WAAW,CAACG,YAAY,CAACd,IAAI,CAAC;MAC/C,MAAM+B,OAAO,GAAGrB,eAAe,CAACC,WAAW,EAAEX,IAAI,EAAEY,YAAY,CAAC;MAChEc,GAAG,CAACM,GAAG,CAACpC,KAAK,EAAE;QACbqC,IAAI,EAAEH,QAAQ,GAAG,QAAQ,GAAG,MAAM;QAClCC;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAOL,GAAG;AACZ;;AAEA;AACA,SAASQ,OAAOA,CAACC,OAAO,EAAEC,SAAS,EAAE;EACnC,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAGN,OAAO;EACxD,MAAMxB,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;EACtC,MAAME,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACP,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;EAC9D,MAAMC,aAAa,GAAGH,KAAK,CAACC,IAAI,CAACP,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;EAC9D,MAAMjC,YAAY,GAAG+B,KAAK,CAACC,IAAI,CAACP,OAAO,CAACQ,GAAG,CAAC,cAAc,CAAC,CAAC;EAC5D,MAAME,aAAa,GAAGR,QAAQ,CAAC,eAAe,CAAC;EAC/C,MAAMS,YAAY,GAAGX,OAAO,CAACQ,GAAG,CAAC,cAAc,CAAC;EAChD,MAAMI,aAAa,GAAGZ,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC;EAClD,SAASK,YAAYA,CAACC,MAAM,EAAE;IAC5B,MAAM;MAAEnD,IAAI;MAAEoD;IAAU,CAAC,GAAGD,MAAM;IAClC,MAAMvD,KAAK,GAAGe,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC;IAC5C,MAAMqD,SAAS,GAAG1C,WAAW,CAAC2C,YAAY,CAAC,CAAC;IAC5C,MAAMC,cAAc,GAAGF,SAAS,GAAG1C,WAAW,CAACE,YAAY,CAACwC,SAAS,CAAC,GAAG,IAAI;IAC7E,OAAO;MACL/D,EAAE,EAAEK,SAAS,CAAC2C,KAAK,EAAE1C,KAAK,CAAC;MAC3BA,KAAK;MACLwD,SAAS;MACTI,SAAS,EAAE7C,WAAW,CAAC8C,YAAY,CAACL,SAAS,CAAC;MAC9CM,QAAQ,EAAEC,OAAO,CAAC3D,IAAI,CAAC0D,QAAQ,CAAC;MAChCE,OAAO,EAAEZ,YAAY,IAAI,IAAI,GAAGO,cAAc,IAAI3D,KAAK,GAAGoD,YAAY,KAAKpD,KAAK;MAChFiE,QAAQ,EAAEf,aAAa,CAAC/B,QAAQ,CAACnB,KAAK,CAAC;MACvCkE,QAAQ,EAAEpB,aAAa,CAAC3B,QAAQ,CAACnB,KAAK,CAAC;MACvCmE,OAAO,EAAEd,aAAa,CAACrD,KAAK,CAAC,KAAK,SAAS;MAC3CoE,KAAK,EAAEZ,SAAS,CAACa,MAAM;MACvBnC,QAAQ,EAAEnB,WAAW,CAACG,YAAY,CAACd,IAAI,CAAC;MACxC,IAAI+B,OAAOA,CAAA,EAAG;QACZ,OAAOrB,eAAe,CAACC,WAAW,EAAEX,IAAI,EAAEY,YAAY,CAAC;MACzD;IACF,CAAC;EACH;EACA,OAAO;IACLpC,UAAU,EAAEmC,WAAW;IACvB+B,aAAa;IACbI,aAAa;IACblC,YAAY;IACZsD,aAAaA,CAACtE,KAAK,EAAEkC,QAAQ,EAAE;MAC7BW,IAAI,CAAC;QAAER,IAAI,EAAE,gBAAgB;QAAErC,KAAK;QAAEkC;MAAS,CAAC,CAAC;IACnD,CAAC;IACDqC,UAAUA,CAACvE,KAAK,EAAE;MAChB6C,IAAI,CAAC;QAAER,IAAI,EAAE,aAAa;QAAErC;MAAM,CAAC,CAAC;IACtC,CAAC;IACDwE,YAAYA,CAAA,EAAG;MACb3B,IAAI,CAAC;QAAER,IAAI,EAAE;MAAgB,CAAC,CAAC;IACjC,CAAC;IACDoC,aAAaA,CAAA,EAAG;MACd,OAAO5C,kBAAkB,CAACd,WAAW,EAAEC,YAAY,CAAC;IACtD,CAAC;IACD0D,MAAMA,CAAC1E,KAAK,EAAE;MACZ6C,IAAI,CAAC;QAAER,IAAI,EAAErC,KAAK,GAAG,eAAe,GAAG,cAAc;QAAEA;MAAM,CAAC,CAAC;IACjE,CAAC;IACD2E,QAAQA,CAAC3E,KAAK,EAAE;MACd6C,IAAI,CAAC;QAAER,IAAI,EAAErC,KAAK,GAAG,iBAAiB,GAAG,gBAAgB;QAAEA;MAAM,CAAC,CAAC;IACrE,CAAC;IACD4E,QAAQA,CAAC5E,KAAK,EAAE;MACd6C,IAAI,CAAC;QAAER,IAAI,EAAErC,KAAK,GAAG,eAAe,GAAG,gBAAgB;QAAEA;MAAM,CAAC,CAAC;IACnE,CAAC;IACD6E,MAAMA,CAAC7E,KAAK,EAAE;MACZ6C,IAAI,CAAC;QAAER,IAAI,EAAErC,KAAK,GAAG,aAAa,GAAG,cAAc;QAAEA,KAAK;QAAE8E,SAAS,EAAE;MAAM,CAAC,CAAC;IACjF,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,OAAOpC,QAAQ,CAAC,cAAc,CAAC,CAACb,GAAG,CAACkD,IAAA;QAAA,IAAC;UAAE5E;QAAK,CAAC,GAAA4E,IAAA;QAAA,OAAK5E,IAAI;MAAA,EAAC;IACzD,CAAC;IACDS,KAAKA,CAACb,KAAK,EAAE;MACXU,SAAS,CAACgC,KAAK,EAAE1C,KAAK,CAAC;IACzB,CAAC;IACDiF,YAAYA,CAACjF,KAAK,EAAE;MAClB,MAAMkF,UAAU,GAAGnE,WAAW,CAACoE,aAAa,CAACnF,KAAK,CAAC;MACnD,IAAI,CAACkF,UAAU,EAAE;MACjB,MAAME,cAAc,GAAGjH,GAAG,CAAC+E,aAAa,EAAEnC,WAAW,CAACE,YAAY,CAACiE,UAAU,CAAC,CAAC;MAC/ErC,IAAI,CAAC;QAAER,IAAI,EAAE,cAAc;QAAErC,KAAK,EAAEoF,cAAc;QAAEC,GAAG,EAAE;MAAgB,CAAC,CAAC;IAC7E,CAAC;IACDC,YAAYA,CAACtF,KAAK,EAAE;MAClB,MAAMkF,UAAU,GAAGnE,WAAW,CAACoE,aAAa,CAACnF,KAAK,CAAC;MACnD,IAAI,CAACkF,UAAU,EAAE;MACjB,MAAMK,cAAc,GAAGpH,GAAG,CAAC2E,aAAa,EAAE/B,WAAW,CAACE,YAAY,CAACiE,UAAU,CAAC,CAAC;MAC/ErC,IAAI,CAAC;QAAER,IAAI,EAAE,cAAc;QAAErC,KAAK,EAAEuF,cAAc;QAAEF,GAAG,EAAE;MAAgB,CAAC,CAAC;IAC7E,CAAC;IACDG,gBAAgBA,CAACxF,KAAK,EAAE;MACtB,MAAMuF,cAAc,GAAG5H,IAAI,CAACqC,KAAK,CAAC;MAClC6C,IAAI,CAAC;QAAER,IAAI,EAAE,cAAc;QAAErC,KAAK,EAAEuF;MAAe,CAAC,CAAC;IACvD,CAAC;IACDE,gBAAgBA,CAACzF,KAAK,EAAE;MACtB,MAAMoF,cAAc,GAAGzH,IAAI,CAACqC,KAAK,CAAC;MAClC6C,IAAI,CAAC;QAAER,IAAI,EAAE,cAAc;QAAErC,KAAK,EAAEoF;MAAe,CAAC,CAAC;IACvD,CAAC;IACDM,YAAYA,CAAA,EAAG;MACb,OAAOlD,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACc,IAAI,CAACqG,KAAK;QACnBnG,EAAE,EAAEP,SAAS,CAACuD,KAAK,CAAC;QACpBoD,GAAG,EAAElD,IAAI,CAAC,KAAK;MAAC,EACjB,CAAC;IACJ,CAAC;IACDmD,aAAaA,CAAA,EAAG;MACd,OAAOvD,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACoB,KAAK,CAAC+F,KAAK;QACpBnG,EAAE,EAAEC,UAAU,CAAC+C,KAAK,CAAC;QACrBoD,GAAG,EAAElD,IAAI,CAAC,KAAK;MAAC,EACjB,CAAC;IACJ,CAAC;IACDoD,YAAYA,CAAA,EAAG;MACb,OAAOxD,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAAC+B,IAAI,CAACoF,KAAK;QACnBnG,EAAE,EAAEY,SAAS,CAACoC,KAAK,CAAC;QACpBoD,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChBqD,IAAI,EAAE,MAAM;QACZ,YAAY,EAAE,WAAW;QACzB,iBAAiB,EAAEtG,UAAU,CAAC+C,KAAK,CAAC;QACpC,sBAAsB,EAAEE,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU,IAAI,KAAK,CAAC;QACtEsD,QAAQ,EAAE,CAAC,CAAC;QACZC,SAASA,CAACC,KAAK,EAAE;UACf,IAAIA,KAAK,CAACC,gBAAgB,EAAE;UAC5B,IAAIhJ,gBAAgB,CAAC+I,KAAK,CAAC,EAAE;UAC7B,MAAME,MAAM,GAAGhJ,cAAc,CAAC8I,KAAK,CAAC;UACpC,IAAI7I,iBAAiB,CAAC+I,MAAM,CAAC,EAAE;UAC/B,MAAMlG,IAAI,GAAGkG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,OAAO,CAAC,8CAA8C,CAAC;UAC5E,IAAI,CAACnG,IAAI,EAAE;UACX,MAAMoG,MAAM,GAAGpG,IAAI,CAACqG,OAAO,CAACzG,KAAK;UACjC,IAAIwG,MAAM,IAAI,IAAI,EAAE;YAClBE,OAAO,CAACC,IAAI,kDAAkDvG,IAAI,CAAC;YACnE;UACF;UACA,MAAMc,YAAY,GAAGd,IAAI,CAACwG,OAAO,CAAC,4BAA4B,CAAC;UAC/D,MAAMC,MAAM,GAAG;YACbC,SAASA,CAACC,MAAM,EAAE;cAChB,IAAI3J,aAAa,CAAC2J,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,iBAAiB;gBAAE3C,EAAE,EAAE8G,MAAM;gBAAES,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YAC1E,CAAC;YACDC,OAAOA,CAACH,MAAM,EAAE;cACd,IAAI3J,aAAa,CAAC2J,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,eAAe;gBAAE3C,EAAE,EAAE8G,MAAM;gBAAES,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YACxE,CAAC;YACDE,SAASA,CAACJ,MAAM,EAAE;cAChB,IAAI3J,aAAa,CAAC2J,MAAM,CAAC,IAAI3G,IAAI,CAACqG,OAAO,CAAC3C,QAAQ,EAAE;cACpDiD,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAEnB,YAAY,GAAG,wBAAwB,GAAG,iBAAiB;gBAAExB,EAAE,EAAE8G;cAAO,CAAC,CAAC;YACzF,CAAC;YACDY,UAAUA,CAACL,MAAM,EAAE;cACjB,IAAI,CAAC7F,YAAY,IAAId,IAAI,CAACqG,OAAO,CAAC3C,QAAQ,EAAE;cAC5CiD,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,yBAAyB;gBAAE3C,EAAE,EAAE8G;cAAO,CAAC,CAAC;YACvD,CAAC;YACDa,IAAIA,CAACN,MAAM,EAAE;cACX,IAAI3J,aAAa,CAAC2J,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,WAAW;gBAAE3C,EAAE,EAAE8G,MAAM;gBAAES,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YACpE,CAAC;YACDK,GAAGA,CAACP,MAAM,EAAE;cACV,IAAI3J,aAAa,CAAC2J,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,UAAU;gBAAE3C,EAAE,EAAE8G,MAAM;gBAAES,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YACnE,CAAC;YACDM,KAAKA,CAACR,MAAM,EAAE;cACZ,IAAI3G,IAAI,CAACqG,OAAO,CAAC3C,QAAQ,EAAE;cAC3B,IAAIX,aAAa,EAAE;gBACjBN,IAAI,CAAC;kBAAER,IAAI,EAAE,gBAAgB;kBAAEmF,GAAG,EAAET,MAAM,CAACS;gBAAI,CAAC,CAAC;cACnD,CAAC,MAAM;gBAAA,IAAAC,aAAA;gBACL,CAAAA,aAAA,GAAAZ,MAAM,CAACa,KAAK,cAAAD,aAAA,eAAZA,aAAA,CAAApH,IAAA,CAAAwG,MAAM,EAASE,MAAM,CAAC;cACxB;YACF,CAAC;YACDW,KAAKA,CAACX,MAAM,EAAE;cACZ,IAAI3G,IAAI,CAACqG,OAAO,CAAC3C,QAAQ,EAAE;cAC3B,IAAI3G,eAAe,CAACmJ,MAAM,CAAC,IAAIlJ,aAAa,CAAC2J,MAAM,CAAC,EAAE;cACtDlE,IAAI,CAAC;gBAAER,IAAI,EAAEnB,YAAY,GAAG,mBAAmB,GAAG,YAAY;gBAAExB,EAAE,EAAE8G,MAAM;gBAAEnB,GAAG,EAAE;cAAW,CAAC,CAAC;cAC9F,IAAI,CAAClI,eAAe,CAACmJ,MAAM,CAAC,EAAE;gBAC5BS,MAAM,CAACC,cAAc,CAAC,CAAC;cACzB;YACF,CAAC;YACD,GAAGW,CAACZ,MAAM,EAAE;cACV,IAAI3G,IAAI,CAACqG,OAAO,CAAC3C,QAAQ,EAAE;cAC3BiD,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,iBAAiB;gBAAE3C,EAAE,EAAE8G;cAAO,CAAC,CAAC;YAC/C,CAAC;YACDoB,CAACA,CAACb,MAAM,EAAE;cACR,IAAI,CAACA,MAAM,CAACc,OAAO,IAAIzH,IAAI,CAACqG,OAAO,CAAC3C,QAAQ,EAAE;cAC9CiD,MAAM,CAACC,cAAc,CAAC,CAAC;cACvBnE,IAAI,CAAC;gBAAER,IAAI,EAAE,cAAc;gBAAEyF,SAAS,EAAE;cAAK,CAAC,CAAC;YACjD;UACF,CAAC;UACD,MAAMN,GAAG,GAAGhK,WAAW,CAAC4I,KAAK,EAAE;YAAEN,GAAG,EAAElD,IAAI,CAAC,KAAK;UAAE,CAAC,CAAC;UACpD,MAAMmF,IAAI,GAAGlB,MAAM,CAACW,GAAG,CAAC;UACxB,IAAIO,IAAI,EAAE;YACRA,IAAI,CAAC3B,KAAK,CAAC;YACX;UACF;UACA,IAAI,CAACrJ,cAAc,CAACiL,YAAY,CAAC5B,KAAK,CAAC,EAAE;UACzCvD,IAAI,CAAC;YAAER,IAAI,EAAE,gBAAgB;YAAEmF,GAAG,EAAEpB,KAAK,CAACoB,GAAG;YAAE9H,EAAE,EAAE8G;UAAO,CAAC,CAAC;UAC5DJ,KAAK,CAACY,cAAc,CAAC,CAAC;QACxB;MAAC,EACF,CAAC;IACJ,CAAC;IACD1D,YAAY;IACZ2E,YAAYA,CAAC1E,MAAM,EAAE;MACnB,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACyJ,IAAI,CAACtC,KAAK;QACnBnG,EAAE,EAAEwI,SAAS,CAACxI,EAAE;QAChBoG,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChB,cAAc,EAAEtC,SAAS,CAACoC,KAAK,CAAC;QAChC,WAAW,EAAEa,MAAM,CAACC,SAAS,CAAC4E,IAAI,CAAC,GAAG,CAAC;QACvC,YAAY,EAAEF,SAAS,CAAClI,KAAK;QAC7BkG,QAAQ,EAAEgC,SAAS,CAAClE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,YAAY,EAAEhH,QAAQ,CAACkL,SAAS,CAAClE,OAAO,CAAC;QACzCiC,IAAI,EAAE,UAAU;QAChB,cAAc,EAAEiC,SAAS,CAACjE,QAAQ,GAAG,MAAM,GAAG,KAAK,CAAC;QACpD,eAAe,EAAEiE,SAAS,CAACpE,QAAQ,GAAG,KAAK,CAAC,GAAGoE,SAAS,CAACjE,QAAQ;QACjE,eAAe,EAAEjH,QAAQ,CAACkL,SAAS,CAACjE,QAAQ,CAAC;QAC7C,eAAe,EAAE/G,QAAQ,CAACgL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,eAAe,EAAE9G,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,YAAY,EAAEoE,SAAS,CAAC9D,KAAK;QAC7B,YAAY,EAAE8D,SAAS,CAAC9D,KAAK;QAC7BiE,KAAK,EAAE;UACL,SAAS,EAAEH,SAAS,CAAC9D;QACvB,CAAC;QACDkE,OAAOA,CAAClC,KAAK,EAAE;UACbA,KAAK,CAACmC,eAAe,CAAC,CAAC;UACvB1F,IAAI,CAAC;YAAER,IAAI,EAAE,YAAY;YAAE3C,EAAE,EAAEwI,SAAS,CAAClI;UAAM,CAAC,CAAC;QACnD,CAAC;QACDwI,OAAOA,CAACpC,KAAK,EAAE;UACb,IAAI8B,SAAS,CAACpE,QAAQ,EAAE;UACxB,IAAI,CAAC7G,WAAW,CAACmJ,KAAK,CAAC,EAAE;UACzB,IAAIjJ,eAAe,CAACiJ,KAAK,CAACqC,aAAa,CAAC,IAAIrL,aAAa,CAACgJ,KAAK,CAAC,EAAE;UAClE,MAAMsC,SAAS,GAAGtC,KAAK,CAACyB,OAAO,IAAIzB,KAAK,CAACuC,OAAO;UAChD9F,IAAI,CAAC;YAAER,IAAI,EAAE,YAAY;YAAE3C,EAAE,EAAEwI,SAAS,CAAClI,KAAK;YAAEiH,QAAQ,EAAEb,KAAK,CAACa,QAAQ;YAAE0B,OAAO,EAAED;UAAU,CAAC,CAAC;UAC/FtC,KAAK,CAACmC,eAAe,CAAC,CAAC;UACvB,IAAI,CAACpL,eAAe,CAACiJ,KAAK,CAACqC,aAAa,CAAC,EAAE;YACzCrC,KAAK,CAACY,cAAc,CAAC,CAAC;UACxB;QACF;MAAC,EACF,CAAC;IACJ,CAAC;IACD4B,gBAAgBA,CAACrF,MAAM,EAAE;MACvB,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACoK,QAAQ,CAACjD,KAAK;QACvB,eAAe,EAAE7I,QAAQ,CAAC6L,SAAS,CAAC/E,QAAQ,CAAC;QAC7C,eAAe,EAAE9G,QAAQ,CAAC6L,SAAS,CAAC5E,QAAQ,CAAC;QAC7C,YAAY,EAAEjH,QAAQ,CAAC6L,SAAS,CAAC7E,OAAO;MAAC,EAC1C,CAAC;IACJ,CAAC;IACD+E,qBAAqBA,CAACxF,MAAM,EAAE;MAC5B,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACsK,aAAa,CAACnD,KAAK;QAC5B,aAAa,EAAE,IAAI;QACnB,eAAe,EAAE7I,QAAQ,CAAC6L,SAAS,CAAC/E,QAAQ,CAAC;QAC7C,eAAe,EAAE9G,QAAQ,CAAC6L,SAAS,CAAC5E,QAAQ,CAAC;QAC7C,YAAY,EAAEjH,QAAQ,CAAC6L,SAAS,CAAC7E,OAAO,CAAC;QACzCiF,MAAM,EAAE,CAACJ,SAAS,CAAC5E;MAAQ,EAC5B,CAAC;IACJ,CAAC;IACDiF,cAAcA,CAAC3F,MAAM,EAAE;MACrB,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACyK,MAAM,CAACtD,KAAK;QACrB,YAAY,EAAEqC,SAAS,CAAC9D,KAAK;QAC7B0B,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChB,aAAa,EAAEsF,SAAS,CAAClI,KAAK;QAC9BiG,IAAI,EAAE,UAAU;QAChB,cAAc,EAAE3F,SAAS,CAACoC,KAAK,CAAC;QAChC,YAAY,EAAEwF,SAAS,CAAClI,KAAK;QAC7B,YAAY,EAAEkI,SAAS,CAAC9D,KAAK;QAC7B,eAAe,EAAE8D,SAAS,CAACpE,QAAQ,GAAG,KAAK,CAAC,GAAGoE,SAAS,CAACjE,QAAQ;QACjE,WAAW,EAAEV,MAAM,CAACC,SAAS,CAAC4E,IAAI,CAAC,GAAG,CAAC;QACvC,eAAe,EAAEpL,QAAQ,CAACkL,SAAS,CAACjE,QAAQ,CAAC;QAC7C,eAAe,EAAEiE,SAAS,CAAChE,QAAQ;QACnC,YAAY,EAAEgE,SAAS,CAAChE,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,eAAe,EAAEhH,QAAQ,CAACgL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,eAAe,EAAE9G,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,cAAc,EAAE9G,QAAQ,CAACkL,SAAS,CAAC/D,OAAO,CAAC;QAC3C,WAAW,EAAEjH,QAAQ,CAACgL,SAAS,CAAC/D,OAAO,CAAC;QACxCkE,KAAK,EAAE;UACL,SAAS,EAAEH,SAAS,CAAC9D;QACvB;MAAC,EACF,CAAC;IACJ,CAAC;IACDgF,uBAAuBA,CAAC7F,MAAM,EAAE;MAC9B,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAAC2K,eAAe,CAACxD,KAAK;QAC9B,aAAa,EAAE,IAAI;QACnB,YAAY,EAAEqC,SAAS,CAAChE,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,eAAe,EAAElH,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,eAAe,EAAE9G,QAAQ,CAACkL,SAAS,CAACjE,QAAQ,CAAC;QAC7C,YAAY,EAAEjH,QAAQ,CAACkL,SAAS,CAAClE,OAAO,CAAC;QACzC,cAAc,EAAEhH,QAAQ,CAACkL,SAAS,CAAC/D,OAAO;MAAC,EAC5C,CAAC;IACJ,CAAC;IACDmF,qBAAqBA,CAAC/F,MAAM,EAAE;MAC5B,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAAC6K,aAAa,CAAC1D,KAAK;QAC5BI,IAAI,EAAE,QAAQ;QACdH,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChB,eAAe,EAAE5F,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,YAAY,EAAEoE,SAAS,CAAChE,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,YAAY,EAAEgE,SAAS,CAAClI,KAAK;QAC7B,cAAc,EAAEhD,QAAQ,CAACkL,SAAS,CAAC/D,OAAO,CAAC;QAC3CL,QAAQ,EAAEoE,SAAS,CAAC/D,OAAO;QAC3BqE,OAAOA,CAACpC,KAAK,EAAE;UACb,IAAI8B,SAAS,CAACpE,QAAQ,IAAIoE,SAAS,CAAC/D,OAAO,EAAE;UAC7CtB,IAAI,CAAC;YAAER,IAAI,EAAE,qBAAqB;YAAE3C,EAAE,EAAEwI,SAAS,CAAClI;UAAM,CAAC,CAAC;UAC1DoG,KAAK,CAACmC,eAAe,CAAC,CAAC;QACzB;MAAC,EACF,CAAC;IACJ,CAAC;IACDiB,qBAAqBA,CAACjG,MAAM,EAAE;MAC5B,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAAC+K,aAAa,CAAC5D,KAAK;QAC5BI,IAAI,EAAE,QAAQ;QACdvG,EAAE,EAAEwI,SAAS,CAACxI,EAAE;QAChBoG,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChBsD,QAAQ,EAAEgC,SAAS,CAAClE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,WAAW,EAAET,MAAM,CAACC,SAAS,CAAC4E,IAAI,CAAC,GAAG,CAAC;QACvC,YAAY,EAAEF,SAAS,CAAChE,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,eAAe,EAAElH,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,eAAe,EAAE9G,QAAQ,CAACkL,SAAS,CAACjE,QAAQ,CAAC;QAC7C,YAAY,EAAEjH,QAAQ,CAACkL,SAAS,CAAClE,OAAO,CAAC;QACzC,YAAY,EAAEkE,SAAS,CAAClI,KAAK;QAC7B,YAAY,EAAEkI,SAAS,CAAC9D,KAAK;QAC7B,cAAc,EAAEpH,QAAQ,CAACkL,SAAS,CAAC/D,OAAO,CAAC;QAC3C,WAAW,EAAEjH,QAAQ,CAACgL,SAAS,CAAC/D,OAAO,CAAC;QACxCmE,OAAOA,CAAClC,KAAK,EAAE;UACbvD,IAAI,CAAC;YAAER,IAAI,EAAE,YAAY;YAAE3C,EAAE,EAAEwI,SAAS,CAAClI;UAAM,CAAC,CAAC;UACjDoG,KAAK,CAACmC,eAAe,CAAC,CAAC;QACzB,CAAC;QACDC,OAAOA,CAACpC,KAAK,EAAE;UACb,IAAI8B,SAAS,CAACpE,QAAQ,EAAE;UACxB,IAAIoE,SAAS,CAAC/D,OAAO,EAAE;UACvB,IAAI,CAAClH,WAAW,CAACmJ,KAAK,CAAC,EAAE;UACzB,IAAIjJ,eAAe,CAACiJ,KAAK,CAACqC,aAAa,CAAC,IAAIrL,aAAa,CAACgJ,KAAK,CAAC,EAAE;UAClE,MAAMsC,SAAS,GAAGtC,KAAK,CAACyB,OAAO,IAAIzB,KAAK,CAACuC,OAAO;UAChD9F,IAAI,CAAC;YAAER,IAAI,EAAE,mBAAmB;YAAE3C,EAAE,EAAEwI,SAAS,CAAClI,KAAK;YAAEiH,QAAQ,EAAEb,KAAK,CAACa,QAAQ;YAAE0B,OAAO,EAAED;UAAU,CAAC,CAAC;UACtGtC,KAAK,CAACmC,eAAe,CAAC,CAAC;QACzB;MAAC,EACF,CAAC;IACJ,CAAC;IACDmB,kBAAkBA,CAACnG,MAAM,EAAE;MACzB,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACiL,UAAU,CAAC9D,KAAK;QACzBC,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChB,eAAe,EAAE5F,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C,YAAY,EAAEoE,SAAS,CAAChE,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,cAAc,EAAElH,QAAQ,CAACkL,SAAS,CAAC/D,OAAO;MAAC,EAC5C,CAAC;IACJ,CAAC;IACDyF,qBAAqBA,CAACrG,MAAM,EAAE;MAC5B,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACmL,aAAa,CAAChE,KAAK;QAC5BI,IAAI,EAAE,OAAO;QACbH,GAAG,EAAElD,IAAI,CAAC,KAAK,CAAC;QAChB,YAAY,EAAEsF,SAAS,CAAChE,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,YAAY,EAAEgE,SAAS,CAAC9D,KAAK;QAC7B,WAAW,EAAEb,MAAM,CAACC,SAAS,CAAC4E,IAAI,CAAC,GAAG,CAAC;QACvC,YAAY,EAAEF,SAAS,CAAClI,KAAK;QAC7BiJ,MAAM,EAAE,CAACf,SAAS,CAAChE;MAAQ,EAC5B,CAAC;IACJ,CAAC;IACD4F,yBAAyBA,CAACvG,MAAM,EAAE;MAChC,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOf,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACqL,iBAAiB,CAAClE,KAAK;QAChC,YAAY,EAAEqC,SAAS,CAAC9D;MAAK,EAC9B,CAAC;IACJ,CAAC;IACD4F,oBAAoBA,CAACzG,MAAM,EAAE;MAC3B,MAAM2E,SAAS,GAAG5E,YAAY,CAACC,MAAM,CAAC;MACtC,MAAM0G,YAAY,GAAG/B,SAAS,CAAC/F,OAAO;MACtC,OAAOK,SAAS,CAACmD,OAAO,CAAAC,aAAA,CAAAA,aAAA,KACnBlH,KAAK,CAACwL,YAAY,CAACrE,KAAK;QAC3BK,QAAQ,EAAE,CAAC,CAAC;QACZD,IAAI,EAAE,UAAU;QAChB,YAAY,EAAEgE,YAAY,KAAK,IAAI,GAAG,SAAS,GAAGA,YAAY,KAAK,KAAK,GAAG,WAAW,GAAG,eAAe;QACxG,cAAc,EAAEA,YAAY,KAAK,IAAI,GAAG,MAAM,GAAGA,YAAY,KAAK,KAAK,GAAG,OAAO,GAAG,OAAO;QAC3F,eAAe,EAAEjN,QAAQ,CAACkL,SAAS,CAACpE,QAAQ,CAAC;QAC7C0E,OAAOA,CAACpC,KAAK,EAAE;UACb,IAAIA,KAAK,CAACC,gBAAgB,EAAE;UAC5B,IAAI6B,SAAS,CAACpE,QAAQ,EAAE;UACxB,IAAI,CAAC7G,WAAW,CAACmJ,KAAK,CAAC,EAAE;UACzBvD,IAAI,CAAC;YAAER,IAAI,EAAE,gBAAgB;YAAErC,KAAK,EAAEkI,SAAS,CAAClI,KAAK;YAAEkC,QAAQ,EAAEgG,SAAS,CAAChG;UAAS,CAAC,CAAC;UACtFkE,KAAK,CAACmC,eAAe,CAAC,CAAC;UACvB,MAAMnI,IAAI,GAAGgG,KAAK,CAACqC,aAAa,CAAClC,OAAO,CAAC,iBAAiB,CAAC;UAC3DnG,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAES,KAAK,CAAC;YAAEsJ,aAAa,EAAE;UAAK,CAAC,CAAC;QACtC;MAAC,EACF,CAAC;IACJ;EACF,CAAC;AACH;AACA,SAASC,cAAcA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACtC,MAAM;IAAE7H,OAAO;IAAEG,IAAI;IAAE2H;EAAK,CAAC,GAAGF,MAAM;EACtC,IAAI,CAACzH,IAAI,CAAC,cAAc,CAAC,EAAE;IACzBH,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAK7M,IAAI,CAACQ,GAAG,CAACqM,IAAI,EAAE,GAAGF,MAAM,CAAC,CAAC,CAAC;IAClE;EACF;EACA,MAAMjH,aAAa,GAAGZ,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC;EAClD,MAAM,CAACwH,YAAY,EAAEC,aAAa,CAAC,GAAGtM,SAAS,CAACkM,MAAM,EAAGtK,KAAK,IAAKqD,aAAa,CAACrD,KAAK,CAAC,KAAK,QAAQ,CAAC;EACrG,IAAIyK,YAAY,CAACpG,MAAM,GAAG,CAAC,EAAE;IAC3B5B,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAK7M,IAAI,CAACQ,GAAG,CAACqM,IAAI,EAAE,GAAGC,YAAY,CAAC,CAAC,CAAC;EAC1E;EACA,IAAIC,aAAa,CAACrG,MAAM,KAAK,CAAC,EAAE;EAChC,MAAMtD,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;EACtC,MAAM,CAAC+H,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxM,SAAS,CAACsM,aAAa,EAAGhL,EAAE,IAAK;IAC/E,MAAMU,IAAI,GAAGW,WAAW,CAAC8J,QAAQ,CAACnL,EAAE,CAAC;IACrC,OAAOqB,WAAW,CAAC+J,eAAe,CAAC1K,IAAI,CAAC,CAACiE,MAAM,GAAG,CAAC;EACrD,CAAC,CAAC;EACF,IAAIsG,gBAAgB,CAACtG,MAAM,GAAG,CAAC,EAAE;IAC/B5B,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAK7M,IAAI,CAACQ,GAAG,CAACqM,IAAI,EAAE,GAAGG,gBAAgB,CAAC,CAAC,CAAC;EAC9E;EACA,IAAIC,mBAAmB,CAACvG,MAAM,KAAK,CAAC,EAAE;EACtC5B,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAA5E,aAAA,CAAAA,aAAA,KAC7B4E,IAAI,GACJI,mBAAmB,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEtL,EAAE,KAAAkG,aAAA,CAAAA,aAAA,KAAWoF,GAAG;IAAE,CAACtL,EAAE,GAAG;EAAS,EAAG,EAAE,CAAC,CAAC,CAAC,CAC7E,CAAC;EACH,MAAMuL,WAAW,GAAGL,mBAAmB,CAAC9I,GAAG,CAAEpC,EAAE,IAAK;IAClD,MAAM8D,SAAS,GAAGzC,WAAW,CAACmK,YAAY,CAACxL,EAAE,CAAC;IAC9C,MAAMkE,SAAS,GAAG7C,WAAW,CAAC8C,YAAY,CAACL,SAAS,CAAC;IACrD,MAAMpD,IAAI,GAAGW,WAAW,CAAC8J,QAAQ,CAACnL,EAAE,CAAC;IACrC,OAAO;MAAEA,EAAE;MAAE8D,SAAS;MAAEI,SAAS;MAAExD;IAAK,CAAC;EAC3C,CAAC,CAAC;EACF,MAAM+K,aAAa,GAAGZ,IAAI,CAACtH,GAAG,CAAC,eAAe,CAAC;EAC/C,MAAMmI,YAAY,GAAGxI,IAAI,CAAC,cAAc,CAAC;EACzCvE,MAAM,CAAC+M,YAAY,EAAE,MAAM,mEAAmE,CAAC;EAC/F,MAAMC,KAAK,GAAGJ,WAAW,CAACnJ,GAAG,CAACwJ,KAAA,IAAwC;IAAA,IAAvC;MAAE5L,EAAE;MAAE8D,SAAS;MAAEI,SAAS;MAAExD;IAAK,CAAC,GAAAkL,KAAA;IAC/D,MAAMC,aAAa,GAAGJ,aAAa,CAAClI,GAAG,CAACvD,EAAE,CAAC;IAC3C,IAAI6L,aAAa,EAAE;MACjBA,aAAa,CAACC,KAAK,CAAC,CAAC;MACrBL,aAAa,CAACM,MAAM,CAAC/L,EAAE,CAAC;IAC1B;IACA,MAAMgM,eAAe,GAAG,IAAIC,eAAe,CAAC,CAAC;IAC7CR,aAAa,CAAC/I,GAAG,CAAC1C,EAAE,EAAEgM,eAAe,CAAC;IACtC,OAAON,YAAY,CAAC;MAClBxH,SAAS;MACTJ,SAAS;MACTpD,IAAI;MACJwL,MAAM,EAAEF,eAAe,CAACE;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC;EACFC,OAAO,CAACC,UAAU,CAACT,KAAK,CAAC,CAACU,IAAI,CAAEC,OAAO,IAAK;IAC1C,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,cAAc,GAAG,EAAE;IACzB,MAAMC,iBAAiB,GAAG1J,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC;IACtD,IAAImJ,WAAW,GAAGxJ,IAAI,CAAC,YAAY,CAAC;IACpCoJ,OAAO,CAACK,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACjC,MAAM;QAAE7M,EAAE;QAAE8D,SAAS;QAAEpD,IAAI;QAAEwD;MAAU,CAAC,GAAGqH,WAAW,CAACsB,KAAK,CAAC;MAC7D,IAAID,MAAM,CAACE,MAAM,KAAK,WAAW,EAAE;QACjCL,iBAAiB,CAACzM,EAAE,CAAC,GAAG,QAAQ;QAChCuM,aAAa,CAACQ,IAAI,CAAC/M,EAAE,CAAC;QACtB0M,WAAW,GAAGA,WAAW,CAACM,OAAO,CAAClJ,SAAS,EAAAoC,aAAA,CAAAA,aAAA,KAAOxF,IAAI;UAAEpB,QAAQ,EAAEsN,MAAM,CAACtM;QAAK,EAAE,CAAC;MACnF,CAAC,MAAM;QACLmL,aAAa,CAACM,MAAM,CAAC/L,EAAE,CAAC;QACxBiN,OAAO,CAACC,cAAc,CAACT,iBAAiB,EAAEzM,EAAE,CAAC;QAC7CwM,cAAc,CAACO,IAAI,CAAC;UAAErM,IAAI;UAAEyM,KAAK,EAAEP,MAAM,CAACQ,MAAM;UAAEtJ,SAAS;UAAEI;QAAU,CAAC,CAAC;MAC3E;IACF,CAAC,CAAC;IACFnB,OAAO,CAACL,GAAG,CAAC,eAAe,EAAE+J,iBAAiB,CAAC;IAC/C,IAAIF,aAAa,CAAC5H,MAAM,EAAE;MAAA,IAAA0I,KAAA;MACxBtK,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAK7M,IAAI,CAACQ,GAAG,CAACqM,IAAI,EAAE,GAAGyB,aAAa,CAAC,CAAC,CAAC;MACzE,CAAAc,KAAA,GAAAnK,IAAI,CAAC,wBAAwB,CAAC,cAAAmK,KAAA,eAA9BA,KAAA,CAAiC;QAAEnO,UAAU,EAAEwN;MAAY,CAAC,CAAC;IAC/D;IACA,IAAIF,cAAc,CAAC7H,MAAM,EAAE;MAAA,IAAA2I,MAAA;MACzB,CAAAA,MAAA,GAAApK,IAAI,CAAC,qBAAqB,CAAC,cAAAoK,MAAA,eAA3BA,MAAA,CAA8B;QAAEC,KAAK,EAAEf;MAAe,CAAC,CAAC;IAC1D;EACF,CAAC,CAAC;AACJ;;AAEA;AACA,SAASgB,MAAMA,CAAC7C,MAAM,EAAE;EACtB,MAAM;IAAEzH,IAAI;IAAEH;EAAQ,CAAC,GAAG4H,MAAM;EAChC,OAAO,SAAS8C,IAAIA,CAAAC,KAAA,EAAgB;IAAA,IAAf;MAAE5J;IAAU,CAAC,GAAA4J,KAAA;IAChC,MAAMlO,KAAK,GAAG0D,IAAI,CAAC,YAAY,CAAC,CAACiB,YAAY,CAACL,SAAS,CAAC,CAAC6J,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACrE,OAAOnO,KAAK,CAACwC,IAAI,CAAE1B,KAAK,IAAK,CAACyC,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC9B,QAAQ,CAACnB,KAAK,CAAC,CAAC;EAC7E,CAAC;AACH;;AAEA;AACA,IAAI;EAAEsN;AAAI,CAAC,GAAGhP,YAAY,CAAC,CAAC;AAC5B,IAAIiP,OAAO,GAAGhP,aAAa,CAAC;EAC1BiP,KAAKA,CAAAC,KAAA,EAAoB;IAAA,IAAnB;MAAED,KAAK,EAAEjK;IAAO,CAAC,GAAAkK,KAAA;IACrB,OAAA7H,aAAA;MACE8H,aAAa,EAAE,QAAQ;MACvB9O,UAAU,EAAEA,UAAU,CAACE,KAAK,CAAC,CAAC;MAC9B6O,SAAS,EAAE,IAAI;MACfC,aAAa,EAAE,IAAI;MACnBC,oBAAoB,EAAE,EAAE;MACxBC,oBAAoB,EAAE;IAAE,GACrBvK,MAAM;EAEb,CAAC;EACDwK,YAAYA,CAAA,EAAG;IACb,OAAO,MAAM;EACf,CAAC;EACDtL,OAAOA,CAAAuL,KAAA,EAAiC;IAAA,IAAhC;MAAEpL,IAAI;MAAEqL,QAAQ;MAAEC;IAAW,CAAC,GAAAF,KAAA;IACpC,OAAO;MACLlL,aAAa,EAAEmL,QAAQ,CAAC,OAAO;QAC7BE,YAAY,EAAEvL,IAAI,CAAC,sBAAsB,CAAC;QAC1C5C,KAAK,EAAE4C,IAAI,CAAC,eAAe,CAAC;QAC5B3E,OAAO;QACPmQ,QAAQA,CAACtL,aAAa,EAAE;UAAA,IAAAuL,MAAA;UACtB,MAAMjP,GAAG,GAAG8O,UAAU,CAAC,CAAC;UACxB,MAAM9K,YAAY,GAAGhE,GAAG,CAAC6D,GAAG,CAAC,cAAc,CAAC;UAC5C,CAAAoL,MAAA,GAAAzL,IAAI,CAAC,kBAAkB,CAAC,cAAAyL,MAAA,eAAxBA,MAAA,CAA2B;YACzBvL,aAAa;YACbM,YAAY;YACZ,IAAIkL,aAAaA,CAAA,EAAG;cAClB,OAAO1L,IAAI,CAAC,YAAY,CAAC,CAAC2L,SAAS,CAACzL,aAAa,CAAC;YACpD;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAAC;MACHI,aAAa,EAAE+K,QAAQ,CAAC,OAAO;QAC7BE,YAAY,EAAEvL,IAAI,CAAC,sBAAsB,CAAC;QAC1C5C,KAAK,EAAE4C,IAAI,CAAC,eAAe,CAAC;QAC5B3E,OAAO;QACPmQ,QAAQA,CAAClL,aAAa,EAAE;UAAA,IAAAsL,MAAA;UACtB,MAAMpP,GAAG,GAAG8O,UAAU,CAAC,CAAC;UACxB,MAAM9K,YAAY,GAAGhE,GAAG,CAAC6D,GAAG,CAAC,cAAc,CAAC;UAC5C,CAAAuL,MAAA,GAAA5L,IAAI,CAAC,mBAAmB,CAAC,cAAA4L,MAAA,eAAzBA,MAAA,CAA4B;YAC1BtL,aAAa;YACbE,YAAY;YACZ,IAAIqL,aAAaA,CAAA,EAAG;cAClB,OAAO7L,IAAI,CAAC,YAAY,CAAC,CAAC2L,SAAS,CAACrL,aAAa,CAAC;YACpD;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAAC;MACHE,YAAY,EAAE6K,QAAQ,CAAC,OAAO;QAC5BE,YAAY,EAAEvL,IAAI,CAAC,qBAAqB,CAAC,IAAI,IAAI;QACjD5C,KAAK,EAAE4C,IAAI,CAAC,cAAc,CAAC;QAC3BwL,QAAQA,CAAChL,YAAY,EAAE;UAAA,IAAAsL,MAAA;UACrB,CAAAA,MAAA,GAAA9L,IAAI,CAAC,eAAe,CAAC,cAAA8L,MAAA,eAArBA,MAAA,CAAwB;YACtBtL,YAAY;YACZ,IAAIuL,WAAWA,CAAA,EAAG;cAChB,OAAOvL,YAAY,GAAGR,IAAI,CAAC,YAAY,CAAC,CAACiI,QAAQ,CAACzH,YAAY,CAAC,GAAG,IAAI;YACxE;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAAC;MACHC,aAAa,EAAE4K,QAAQ,CAAC,OAAO;QAC7BE,YAAY,EAAE,CAAC;MACjB,CAAC,CAAC,CAAC;MACHnN,YAAY,EAAEiN,QAAQ,CAAC,OAAO;QAC5BE,YAAY,EAAEvL,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE;QAC/C5C,KAAK,EAAE4C,IAAI,CAAC,cAAc,CAAC;QAC3B3E,OAAO;QACPmQ,QAAQA,CAACpO,KAAK,EAAE;UAAA,IAAA4O,MAAA;UACd,CAAAA,MAAA,GAAAhM,IAAI,CAAC,iBAAiB,CAAC,cAAAgM,MAAA,eAAvBA,MAAA,CAA0B;YAAE5N,YAAY,EAAEhB;UAAM,CAAC,CAAC;QACpD;MACF,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;EACDuK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLsE,cAAc,EAAAjJ,aAAA,KAAO7I,cAAc,CAAC+R,cAAc,CAAE;MACpD3D,aAAa,EAAE,eAAgB,IAAIpJ,GAAG,CAAC;IACzC,CAAC;EACH,CAAC;EACDY,QAAQ,EAAE;IACRoM,mBAAmB,EAAEC,KAAA;MAAA,IAAC;QAAEpM;MAAK,CAAC,GAAAoM,KAAA;MAAA,OAAKpM,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU;IAAA;IACvEO,aAAa,EAAE8L,KAAA;MAAA,IAAC;QAAE1E;MAAK,CAAC,GAAA0E,KAAA;MAAA,OAAK1E,IAAI,CAACtH,GAAG,CAAC,gBAAgB,CAAC,CAACiM,SAAS,CAAC7K,MAAM,GAAG,CAAC;IAAA;IAC5E8K,YAAY,EAAEC,KAAA,IAAuB;MAAA,IAAtB;QAAExM,IAAI;QAAEH;MAAQ,CAAC,GAAA2M,KAAA;MAC9B,MAAMnC,KAAK,GAAG,EAAE;MAChBrK,IAAI,CAAC,YAAY,CAAC,CAACZ,KAAK,CAAC;QACvBmL,IAAI,EAAED,MAAM,CAAC;UAAEtK,IAAI;UAAEH;QAAQ,CAAC,CAAC;QAC/BR,OAAO,EAAEA,CAAC7B,IAAI,EAAEoD,SAAS,KAAK;UAC5ByJ,KAAK,CAACR,IAAI,CAAC;YAAErM,IAAI;YAAEoD;UAAU,CAAC,CAAC;QACjC;MACF,CAAC,CAAC;MACF,OAAOyJ,KAAK;IACd;EACF,CAAC;EACDoC,EAAE,EAAE;IACF,cAAc,EAAE;MACdC,OAAO,EAAE,CAAC,aAAa;IACzB,CAAC;IACD,gBAAgB,EAAE;MAChBA,OAAO,EAAE,CAAC,eAAe;IAC3B,CAAC;IACD,cAAc,EAAE;MACdA,OAAO,EAAE,CAAC,mBAAmB;IAC/B,CAAC;IACD,eAAe,EAAE;MACfA,OAAO,EAAE,CAAC,gBAAgB;IAC5B,CAAC;IACD,iBAAiB,EAAE;MACjBA,OAAO,EAAE,CAAC,kBAAkB;IAC9B,CAAC;IACD,cAAc,EAAE;MACdA,OAAO,EAAE,CAAC,aAAa;IACzB,CAAC;IACD,cAAc,EAAE,CACd;MACEC,KAAK,EAAEjC,GAAG,CAAC,qBAAqB,EAAE,WAAW,CAAC;MAC9CgC,OAAO,EAAE,CAAC,gBAAgB,EAAE,mBAAmB;IACjD,CAAC,EACD;MACEC,KAAK,EAAE,qBAAqB;MAC5BD,OAAO,EAAE,CAAC,gBAAgB;IAC5B,CAAC,CACF;IACD,gBAAgB,EAAE;MAChBA,OAAO,EAAE,CAAC,eAAe;IAC3B,CAAC;IACD,aAAa,EAAE;MACbA,OAAO,EAAE,CAAC,YAAY;IACxB,CAAC;IACD,eAAe,EAAE;MACfA,OAAO,EAAE,CAAC,cAAc;IAC1B,CAAC;IACD,gBAAgB,EAAE;MAChBA,OAAO,EAAE,CAAC,eAAe;IAC3B,CAAC;IACD,aAAa,EAAE;MACbA,OAAO,EAAE,CAAC,YAAY;IACxB,CAAC;IACD,eAAe,EAAE;MACfA,OAAO,EAAE,CAAC,cAAc;IAC1B;EACF,CAAC;EACDE,IAAI,EAAE,CAAC,oBAAoB,CAAC;EAC5BC,MAAM,EAAE;IACNC,IAAI,EAAE;MACJL,EAAE,EAAE;QACF,YAAY,EAAE;UACZC,OAAO,EAAE,CAAC,gBAAgB;QAC5B,CAAC;QACD,iBAAiB,EAAE,CACjB;UACEC,KAAK,EAAEjC,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/CgC,OAAO,EAAE,CAAC,mBAAmB,EAAE,2BAA2B;QAC5D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,mBAAmB;QAC/B,CAAC,CACF;QACD,eAAe,EAAE,CACf;UACEC,KAAK,EAAEjC,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/CgC,OAAO,EAAE,CAAC,mBAAmB,EAAE,2BAA2B;QAC5D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,mBAAmB;QAC/B,CAAC,CACF;QACD,iBAAiB,EAAE;UACjBA,OAAO,EAAE,CAAC,iBAAiB;QAC7B,CAAC;QACD,wBAAwB,EAAE,CACxB;UACEC,KAAK,EAAE,kBAAkB;UACzBD,OAAO,EAAE,CAAC,gBAAgB;QAC5B,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,iBAAiB;QAC7B,CAAC,CACF;QACD,yBAAyB,EAAE,CACzB;UACEC,KAAK,EAAEjC,GAAG,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;UACjDgC,OAAO,EAAE,CAAC,sBAAsB;QAClC,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,cAAc;QAC1B,CAAC,CACF;QACD,iBAAiB,EAAE;UACjBA,OAAO,EAAE,CAAC,uBAAuB;QACnC,CAAC;QACD,WAAW,EAAE,CACX;UACEC,KAAK,EAAEjC,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/CgC,OAAO,EAAE,CAAC,4BAA4B,EAAE,oBAAoB;QAC9D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,oBAAoB;QAChC,CAAC,CACF;QACD,UAAU,EAAE,CACV;UACEC,KAAK,EAAEjC,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/CgC,OAAO,EAAE,CAAC,2BAA2B,EAAE,mBAAmB;QAC5D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,mBAAmB;QAC/B,CAAC,CACF;QACD,YAAY,EAAE,CACZ;UACEC,KAAK,EAAEjC,GAAG,CAAC,WAAW,EAAE,qBAAqB,CAAC;UAC9CgC,OAAO,EAAE,CAAC,qBAAqB;QACjC,CAAC,EACD;UACEC,KAAK,EAAEjC,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/CgC,OAAO,EAAE,CAAC,uBAAuB;QACnC,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,YAAY;QACxB,CAAC,CACF;QACD,mBAAmB,EAAE,CACnB;UACEC,KAAK,EAAEjC,GAAG,CAAC,WAAW,EAAE,qBAAqB,CAAC;UAC9CgC,OAAO,EAAE,CAAC,qBAAqB;QACjC,CAAC,EACD;UACEC,KAAK,EAAEjC,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/CgC,OAAO,EAAE,CAAC,uBAAuB;QACnC,CAAC,EACD;UACEC,KAAK,EAAE,eAAe;UACtBD,OAAO,EAAE,CAAC,YAAY,EAAE,kBAAkB;QAC5C,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,YAAY;QACxB,CAAC,CACF;QACD,qBAAqB,EAAE;UACrBA,OAAO,EAAE,CAAC,kBAAkB;QAC9B,CAAC;QACD,gBAAgB,EAAE;UAChBA,OAAO,EAAE,CAAC,kBAAkB;QAC9B;MACF;IACF;EACF,CAAC;EACDK,eAAe,EAAE;IACfC,MAAM,EAAE;MACNC,eAAe,EAAEC,KAAA;QAAA,IAAC;UAAErN,OAAO;UAAE2D;QAAM,CAAC,GAAA0J,KAAA;QAAA,OAAKrN,OAAO,CAACQ,GAAG,CAAC,cAAc,CAAC,KAAKmD,KAAK,CAAC1G,EAAE;MAAA;MACjFqQ,gBAAgB,EAAEC,KAAA;QAAA,IAAC;UAAEvN,OAAO;UAAE2D;QAAM,CAAC,GAAA4J,KAAA;QAAA,OAAKvN,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC9B,QAAQ,CAACiF,KAAK,CAAC1G,EAAE,CAAC;MAAA;MACzFuQ,UAAU,EAAEC,KAAA;QAAA,IAAC;UAAE9J;QAAM,CAAC,GAAA8J,KAAA;QAAA,OAAK9J,KAAK,CAACa,QAAQ;MAAA;MACzCkJ,SAAS,EAAEC,MAAA;QAAA,IAAC;UAAEhK;QAAM,CAAC,GAAAgK,MAAA;QAAA,OAAKhK,KAAK,CAACuC,OAAO;MAAA;MACvC0H,gBAAgB,EAAEC,MAAA;QAAA,IAAC;UAAE7N;QAAQ,CAAC,GAAA6N,MAAA;QAAA,OAAK7N,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAACoB,MAAM,GAAG,CAAC;MAAA;MAC1E0K,mBAAmB,EAAEwB,MAAA;QAAA,IAAC;UAAE3N;QAAK,CAAC,GAAA2N,MAAA;QAAA,OAAK3N,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU;MAAA;MACvEkF,SAAS,EAAE0I,MAAA;QAAA,IAAC;UAAEpK;QAAM,CAAC,GAAAoK,MAAA;QAAA,OAAK,CAAC,CAACpK,KAAK,CAAC0B,SAAS;MAAA;MAC3C8F,aAAa,EAAE6C,MAAA;QAAA,IAAC;UAAE7N;QAAK,CAAC,GAAA6N,MAAA;QAAA,OAAK,CAAC,CAAC7N,IAAI,CAAC,eAAe,CAAC;MAAA;IACtD,CAAC;IACD0M,OAAO,EAAE;MACPoB,UAAUA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAElO,OAAO;UAAE2D;QAAM,CAAC,GAAAuK,MAAA;QAC3B,MAAM3Q,KAAK,GAAGoG,KAAK,CAAC1G,EAAE,IAAI0G,KAAK,CAACpG,KAAK;QACrCyC,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAK;UACrC,IAAIxK,KAAK,IAAI,IAAI,EAAE,OAAOwK,IAAI;UAC9B,IAAI,CAACpE,KAAK,CAACtB,SAAS,IAAIjH,OAAO,CAACmC,KAAK,CAAC,EAAE,OAAOwK,IAAI,CAAC/K,MAAM,CAAC,GAAGO,KAAK,CAAC;UACpE,OAAO,CAACnC,OAAO,CAACmC,KAAK,CAAC,GAAGhC,IAAI,CAACgC,KAAK,CAAC,GAAGA,KAAK,CAAC,CAAC4Q,MAAM,CAAC7M,OAAO,CAAC;QAC/D,CAAC,CAAC;MACJ,CAAC;MACD8M,YAAYA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAErO,OAAO;UAAE2D;QAAM,CAAC,GAAA0K,MAAA;QAC7B,MAAM9Q,KAAK,GAAGlC,OAAO,CAACsI,KAAK,CAAC1G,EAAE,IAAI0G,KAAK,CAACpG,KAAK,CAAC;QAC9CyC,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAKzM,MAAM,CAACyM,IAAI,EAAE,GAAGxK,KAAK,CAAC,CAAC;MAChE,CAAC;MACD+Q,cAAcA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAEvO,OAAO;UAAE2D;QAAM,CAAC,GAAA4K,MAAA;QAC/BvO,OAAO,CAACL,GAAG,CAAC,cAAc,EAAEgE,KAAK,CAAC1G,EAAE,CAAC;MACvC,CAAC;MACDuR,gBAAgBA,CAAAC,MAAA,EAAc;QAAA,IAAb;UAAEzO;QAAQ,CAAC,GAAAyO,MAAA;QAC1BzO,OAAO,CAACL,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC;MACnC,CAAC;MACD+O,iBAAiBA,CAAAC,MAAA,EAAc;QAAA,IAAb;UAAE3O;QAAQ,CAAC,GAAA2O,MAAA;QAC3B3O,OAAO,CAACL,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC;MAClC,CAAC;MACDiP,gBAAgBA,CAAAC,MAAA,EAA6B;QAAA,IAA5B;UAAE7O,OAAO;UAAE2D,KAAK;UAAEmL;QAAO,CAAC,GAAAD,MAAA;QACzC,MAAME,UAAU,GAAG/O,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC9B,QAAQ,CAACiF,KAAK,CAAC1G,EAAE,CAAC;QAClE6R,MAAM,CAACC,UAAU,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;MAC5D,CAAC;MACDC,YAAYA,CAACpH,MAAM,EAAE;QACnB,MAAM;UAAEjE;QAAM,CAAC,GAAGiE,MAAM;QACxBD,cAAc,CAACC,MAAM,EAAE,CAACjE,KAAK,CAAC1G,EAAE,CAAC,CAAC;MACpC,CAAC;MACD0K,cAAcA,CAACC,MAAM,EAAE;QACrB,MAAM;UAAE5H,OAAO;UAAE2D;QAAM,CAAC,GAAGiE,MAAM;QACjC,MAAMqH,cAAc,GAAG5T,OAAO,CAACsI,KAAK,CAACpG,KAAK,CAAC;QAC3CoK,cAAc,CAACC,MAAM,EAAEzM,IAAI,CAAC8T,cAAc,EAAEjP,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;MAC5E,CAAC;MACD0O,cAAcA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAEnP,OAAO;UAAE2D;QAAM,CAAC,GAAAwL,MAAA;QAC/BnP,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAKzM,MAAM,CAACyM,IAAI,EAAEpE,KAAK,CAAC1G,EAAE,CAAC,CAAC;MAChE,CAAC;MACDmS,gBAAgBA,CAACxH,MAAM,EAAE;QACvB,MAAM;UAAE5H,OAAO;UAAE2D;QAAM,CAAC,GAAGiE,MAAM;QACjC,MAAMrK,KAAK,GAAGlC,OAAO,CAACsI,KAAK,CAACpG,KAAK,CAAC;QAClCyC,OAAO,CAACL,GAAG,CAAC,eAAe,EAAGoI,IAAI,IAAKzM,MAAM,CAACyM,IAAI,EAAE,GAAGxK,KAAK,CAAC,CAAC;MAChE,CAAC;MACD8R,WAAWA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAEtP,OAAO;UAAE2D;QAAM,CAAC,GAAA2L,MAAA;QAC5B,IAAI,CAAClU,OAAO,CAACuI,KAAK,CAACpG,KAAK,CAAC,EAAE;QAC3ByC,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEgE,KAAK,CAACpG,KAAK,CAAC;MAC3C,CAAC;MACDgS,aAAaA,CAAAC,MAAA,EAAc;QAAA,IAAb;UAAExP;QAAQ,CAAC,GAAAwP,MAAA;QACvBxP,OAAO,CAACL,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC;MAClC,CAAC;MACD8P,WAAWA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAE1P,OAAO;UAAE2D;QAAM,CAAC,GAAA+L,MAAA;QAC5B,IAAI,CAACtU,OAAO,CAACuI,KAAK,CAACpG,KAAK,CAAC,EAAE;QAC3ByC,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEgE,KAAK,CAACpG,KAAK,CAAC;MAC3C,CAAC;MACDoS,aAAaA,CAAAC,MAAA,EAAc;QAAA,IAAb;UAAE5P;QAAQ,CAAC,GAAA4P,MAAA;QACvB5P,OAAO,CAACL,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC;MAClC,CAAC;MACDkQ,kBAAkBA,CAAAC,MAAA,EAAkB;QAAA,IAAjB;UAAE3P,IAAI;UAAEF;QAAM,CAAC,GAAA6P,MAAA;QAChC,MAAMxR,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMa,SAAS,GAAG1C,WAAW,CAAC2C,YAAY,CAAC,CAAC;QAC5C,MAAM8O,UAAU,GAAGzR,WAAW,CAACE,YAAY,CAACwC,SAAS,CAAC;QACtD/C,SAAS,CAACgC,KAAK,EAAE8P,UAAU,CAAC;MAC9B,CAAC;MACDC,iBAAiBA,CAACpI,MAAM,EAAE;QACxB,MAAM;UAAEzH,IAAI;UAAEF;QAAM,CAAC,GAAG2H,MAAM;QAC9B,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM8P,QAAQ,GAAG3R,WAAW,CAAC4R,WAAW,CAAC,KAAK,CAAC,EAAE;UAAExF,IAAI,EAAED,MAAM,CAAC7C,MAAM;QAAE,CAAC,CAAC;QAC1E,MAAMuI,SAAS,GAAG7R,WAAW,CAACE,YAAY,CAACyR,QAAQ,CAAC;QACpDhS,SAAS,CAACgC,KAAK,EAAEkQ,SAAS,CAAC;MAC7B,CAAC;MACDC,oBAAoBA,CAAAC,MAAA,EAAyB;QAAA,IAAxB;UAAE1M,KAAK;UAAExD,IAAI;UAAEF;QAAM,CAAC,GAAAoQ,MAAA;QACzC,MAAM/R,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMmQ,UAAU,GAAGhS,WAAW,CAAC8J,QAAQ,CAACzE,KAAK,CAAC1G,EAAE,CAAC;QACjD,MAAM+D,SAAS,GAAG1C,WAAW,CAAC2C,YAAY,CAACqP,UAAU,CAAC;QACtD,MAAMP,UAAU,GAAGzR,WAAW,CAACE,YAAY,CAACwC,SAAS,CAAC;QACtD/C,SAAS,CAACgC,KAAK,EAAE8P,UAAU,CAAC;MAC9B,CAAC;MACDQ,iBAAiBA,CAAC3I,MAAM,EAAE;QACxB,MAAM;UAAEjE,KAAK;UAAExD,IAAI;UAAEF;QAAM,CAAC,GAAG2H,MAAM;QACrC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMqQ,QAAQ,GAAGlS,WAAW,CAACmS,WAAW,CAAC9M,KAAK,CAAC1G,EAAE,EAAE;UAAEyN,IAAI,EAAED,MAAM,CAAC7C,MAAM;QAAE,CAAC,CAAC;QAC5E,IAAI,CAAC4I,QAAQ,EAAE;QACf,MAAME,SAAS,GAAGpS,WAAW,CAACE,YAAY,CAACgS,QAAQ,CAAC;QACpDvS,SAAS,CAACgC,KAAK,EAAEyQ,SAAS,CAAC;MAC7B,CAAC;MACDC,iBAAiBA,CAAC/I,MAAM,EAAE;QACxB,MAAM;UAAEjE,KAAK;UAAExD,IAAI;UAAEF;QAAM,CAAC,GAAG2H,MAAM;QACrC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMyQ,QAAQ,GAAGtS,WAAW,CAACuS,eAAe,CAAClN,KAAK,CAAC1G,EAAE,EAAE;UAAEyN,IAAI,EAAED,MAAM,CAAC7C,MAAM;QAAE,CAAC,CAAC;QAChF,IAAI,CAACgJ,QAAQ,EAAE;QACf,MAAME,SAAS,GAAGxS,WAAW,CAACE,YAAY,CAACoS,QAAQ,CAAC;QACpD3S,SAAS,CAACgC,KAAK,EAAE6Q,SAAS,CAAC;MAC7B,CAAC;MACDC,eAAeA,CAAAC,MAAA,EAAyB;QAAA,IAAxB;UAAErN,KAAK;UAAExD,IAAI;UAAEF;QAAM,CAAC,GAAA+Q,MAAA;QACpC,MAAM1S,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMsC,UAAU,GAAGnE,WAAW,CAACoE,aAAa,CAACiB,KAAK,CAAC1G,EAAE,CAAC;QACtD,MAAMgU,WAAW,GAAGxO,UAAU,GAAGnE,WAAW,CAACE,YAAY,CAACiE,UAAU,CAAC,GAAG,KAAK,CAAC;QAC9ExE,SAAS,CAACgC,KAAK,EAAEgR,WAAW,CAAC;MAC/B,CAAC;MACDC,cAAcA,CAAAC,MAAA,EAAoB;QAAA,IAAnB;UAAEnR,OAAO;UAAEG;QAAK,CAAC,GAAAgR,MAAA;QAC9BnR,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEQ,IAAI,CAAC,YAAY,CAAC,CAACiR,SAAS,CAAC,CAAC,CAAC;MAC9D,CAAC;MACDC,gBAAgBA,CAACzJ,MAAM,EAAE;QACvB,MAAM;UAAE5H,OAAO;UAAEG,IAAI;UAAE2H,IAAI;UAAEnE,KAAK;UAAE1D,KAAK;UAAEC;QAAS,CAAC,GAAG0H,MAAM;QAC9D,MAAM4C,KAAK,GAAGtK,QAAQ,CAAC,cAAc,CAAC;QACtC,MAAMoR,QAAQ,GAAG9G,KAAK,CAACnL,GAAG,CAACkS,MAAA;UAAA,IAAC;YAAE5T,IAAI,EAAE6T;UAAM,CAAC,GAAAD,MAAA;UAAA,OAAM;YAC/CE,WAAW,EAAEtR,IAAI,CAAC,YAAY,CAAC,CAACuR,aAAa,CAACF,KAAK,CAAC;YACpDvU,EAAE,EAAEkD,IAAI,CAAC,YAAY,CAAC,CAAC3B,YAAY,CAACgT,KAAK;UAC3C,CAAC;QAAA,CAAC,CAAC;QACH,MAAM7T,IAAI,GAAGrD,cAAc,CAACgX,QAAQ,EAAE;UACpCK,KAAK,EAAE7J,IAAI,CAACtH,GAAG,CAAC,gBAAgB,CAAC;UACjCoR,QAAQ,EAAE5R,OAAO,CAACQ,GAAG,CAAC,cAAc,CAAC;UACrCuE,GAAG,EAAEpB,KAAK,CAACoB;QACb,CAAC,CAAC;QACF9G,SAAS,CAACgC,KAAK,EAAEtC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEV,EAAE,CAAC;MAC5B,CAAC;MACD4U,mBAAmBA,CAAAC,MAAA,EAAqB;QAAA,IAApB;UAAE9R,OAAO;UAAE2D;QAAM,CAAC,GAAAmO,MAAA;QACpC,MAAMrR,aAAa,GAAGzF,WAAW,CAACgF,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,EAAEmD,KAAK,CAAC1G,EAAE,CAAC;QACzE+C,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEc,aAAa,CAAC;MAC7C,CAAC;MACDsR,iBAAiBA,CAACnK,MAAM,EAAE;QACxB,MAAM;UAAE5H,OAAO;UAAEG;QAAK,CAAC,GAAGyH,MAAM;QAChC,MAAMoK,YAAY,GAAG7R,IAAI,CAAC,YAAY,CAAC,CAAC8R,eAAe,CAAC,CAAC;QACzD,MAAMhD,cAAc,GAAG9T,IAAI,CAAC6W,YAAY,EAAEhS,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;QACvEmH,cAAc,CAACC,MAAM,EAAEqH,cAAc,CAAC;MACxC,CAAC;MACDiD,qBAAqBA,CAACtK,MAAM,EAAE;QAC5B,MAAM;UAAE5H,OAAO;UAAE2D,KAAK;UAAExD;QAAK,CAAC,GAAGyH,MAAM;QACvC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMY,SAAS,GAAGzC,WAAW,CAACmK,YAAY,CAAC9E,KAAK,CAAC1G,EAAE,CAAC;QACpD,IAAI,CAAC8D,SAAS,EAAE;QAChB,MAAMyJ,KAAK,GAAGlM,WAAW,CAAC6T,eAAe,CAACpR,SAAS,CAAC;QACpD,MAAM8G,MAAM,GAAG2C,KAAK,CAACnL,GAAG,CAAE1B,IAAI,IAAKW,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC,CAAC;QAClE,MAAMsR,cAAc,GAAG9T,IAAI,CAAC0M,MAAM,EAAE7H,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;QACjEmH,cAAc,CAACC,MAAM,EAAEqH,cAAc,CAAC;MACxC,CAAC;MACDmD,qBAAqBA,CAACxK,MAAM,EAAE;QAC5B,MAAM;UAAE5H,OAAO;UAAE2D,KAAK;UAAExD,IAAI;UAAED;QAAS,CAAC,GAAG0H,MAAM;QACjD,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMkS,WAAW,GAAGpX,KAAK,CAAC+E,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC,IAAIlC,WAAW,CAACE,YAAY,CAACF,WAAW,CAAC2C,YAAY,CAAC,CAAC,CAAC;QAC/G,MAAMqR,WAAW,GAAG3O,KAAK,CAAC1G,EAAE;QAC5B,IAAI4K,MAAM,GAAG,CAACwK,WAAW,EAAEC,WAAW,CAAC;QACvC,IAAIC,IAAI,GAAG,CAAC;QACZ,MAAM7F,YAAY,GAAGxM,QAAQ,CAAC,cAAc,CAAC;QAC7CwM,YAAY,CAAC9C,OAAO,CAAC4I,MAAA,IAAc;UAAA,IAAb;YAAE7U;UAAK,CAAC,GAAA6U,MAAA;UAC5B,MAAMC,SAAS,GAAGnU,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC;UAChD,IAAI4U,IAAI,KAAK,CAAC,EAAE1K,MAAM,CAACmC,IAAI,CAACyI,SAAS,CAAC;UACtC,IAAIA,SAAS,KAAKJ,WAAW,IAAII,SAAS,KAAKH,WAAW,EAAEC,IAAI,EAAE;QACpE,CAAC,CAAC;QACFvS,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEzE,IAAI,CAAC2M,MAAM,CAAC,CAAC;MAC5C,CAAC;MACD6K,yBAAyBA,CAAC9K,MAAM,EAAE;QAChC,MAAM;UAAE5H,OAAO;UAAE2D,KAAK;UAAExD;QAAK,CAAC,GAAGyH,MAAM;QACvC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMqQ,QAAQ,GAAGlS,WAAW,CAACmS,WAAW,CAAC9M,KAAK,CAAC1G,EAAE,EAAE;UAAEyN,IAAI,EAAED,MAAM,CAAC7C,MAAM;QAAE,CAAC,CAAC;QAC5E,IAAI,CAAC4I,QAAQ,EAAE;QACf,MAAM3I,MAAM,GAAG,IAAI8K,GAAG,CAAC3S,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;QACpD,MAAMkQ,SAAS,GAAGpS,WAAW,CAACE,YAAY,CAACgS,QAAQ,CAAC;QACpD,IAAIE,SAAS,IAAI,IAAI,EAAE;QACvB,IAAI7I,MAAM,CAAC+K,GAAG,CAACjP,KAAK,CAAC1G,EAAE,CAAC,IAAI4K,MAAM,CAAC+K,GAAG,CAAClC,SAAS,CAAC,EAAE;UACjD7I,MAAM,CAACmB,MAAM,CAACrF,KAAK,CAAC1G,EAAE,CAAC;QACzB,CAAC,MAAM,IAAI,CAAC4K,MAAM,CAAC+K,GAAG,CAAClC,SAAS,CAAC,EAAE;UACjC7I,MAAM,CAACnM,GAAG,CAACgV,SAAS,CAAC;QACvB;QACA1Q,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEW,KAAK,CAACC,IAAI,CAACsH,MAAM,CAAC,CAAC;MAClD,CAAC;MACDgL,yBAAyBA,CAACjL,MAAM,EAAE;QAChC,MAAM;UAAE5H,OAAO;UAAE2D,KAAK;UAAExD;QAAK,CAAC,GAAGyH,MAAM;QACvC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMyQ,QAAQ,GAAGtS,WAAW,CAACuS,eAAe,CAAClN,KAAK,CAAC1G,EAAE,EAAE;UAAEyN,IAAI,EAAED,MAAM,CAAC7C,MAAM;QAAE,CAAC,CAAC;QAChF,IAAI,CAACgJ,QAAQ,EAAE;QACf,MAAM/I,MAAM,GAAG,IAAI8K,GAAG,CAAC3S,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;QACpD,MAAMsQ,SAAS,GAAGxS,WAAW,CAACE,YAAY,CAACoS,QAAQ,CAAC;QACpD,IAAIE,SAAS,IAAI,IAAI,EAAE;QACvB,IAAIjJ,MAAM,CAAC+K,GAAG,CAACjP,KAAK,CAAC1G,EAAE,CAAC,IAAI4K,MAAM,CAAC+K,GAAG,CAAC9B,SAAS,CAAC,EAAE;UACjDjJ,MAAM,CAACmB,MAAM,CAACrF,KAAK,CAAC1G,EAAE,CAAC;QACzB,CAAC,MAAM,IAAI,CAAC4K,MAAM,CAAC+K,GAAG,CAAC9B,SAAS,CAAC,EAAE;UACjCjJ,MAAM,CAACnM,GAAG,CAACoV,SAAS,CAAC;QACvB;QACA9Q,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEW,KAAK,CAACC,IAAI,CAACsH,MAAM,CAAC,CAAC;MAClD,CAAC;MACDiL,0BAA0BA,CAAClL,MAAM,EAAE;QACjC,MAAM;UAAE5H,OAAO;UAAEG;QAAK,CAAC,GAAGyH,MAAM;QAChC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM4S,gBAAgB,GAAG9X,KAAK,CAAC+E,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;QAC5D,MAAMqH,MAAM,GAAG,EAAE;QACjBvJ,WAAW,CAACiB,KAAK,CAAC;UAChBmL,IAAI,EAAED,MAAM,CAAC7C,MAAM,CAAC;UACpBpI,OAAO,EAAG7B,IAAI,IAAK;YACjB,MAAM8U,SAAS,GAAGnU,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC;YAChDkK,MAAM,CAACmC,IAAI,CAACyI,SAAS,CAAC;YACtB,IAAIA,SAAS,KAAKM,gBAAgB,EAAE;cAClC,OAAO,MAAM;YACf;UACF;QACF,CAAC,CAAC;QACF/S,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEkI,MAAM,CAAC;MACtC,CAAC;MACDmL,yBAAyBA,CAACpL,MAAM,EAAE;QAChC,MAAM;UAAE5H,OAAO;UAAEG;QAAK,CAAC,GAAGyH,MAAM;QAChC,MAAMtJ,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM4S,gBAAgB,GAAG9X,KAAK,CAAC+E,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAC,CAAC;QAC5D,MAAMqH,MAAM,GAAG,EAAE;QACjB,IAAIoL,OAAO,GAAG,KAAK;QACnB3U,WAAW,CAACiB,KAAK,CAAC;UAChBmL,IAAI,EAAED,MAAM,CAAC7C,MAAM,CAAC;UACpBpI,OAAO,EAAG7B,IAAI,IAAK;YACjB,MAAM8U,SAAS,GAAGnU,WAAW,CAACE,YAAY,CAACb,IAAI,CAAC;YAChD,IAAI8U,SAAS,KAAKM,gBAAgB,EAAEE,OAAO,GAAG,IAAI;YAClD,IAAIA,OAAO,EAAEpL,MAAM,CAACmC,IAAI,CAACyI,SAAS,CAAC;UACrC;QACF,CAAC,CAAC;QACFzS,OAAO,CAACL,GAAG,CAAC,eAAe,EAAEkI,MAAM,CAAC;MACtC,CAAC;MACDqL,kBAAkBA,CAAAC,MAAA,EAAW;QAAA,IAAV;UAAErL;QAAK,CAAC,GAAAqL,MAAA;QACzB,MAAMC,MAAM,GAAGtL,IAAI,CAACtH,GAAG,CAAC,eAAe,CAAC;QACxC4S,MAAM,CAACxJ,OAAO,CAAEb,KAAK,IAAKA,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;QACxCqK,MAAM,CAACC,KAAK,CAAC,CAAC;MAChB,CAAC;MACDxR,aAAaA,CAAAyR,MAAA,EAA2B;QAAA,IAA1B;UAAEtT,OAAO;UAAE2D,KAAK;UAAExD;QAAK,CAAC,GAAAmT,MAAA;QACpC,MAAMhV,WAAW,GAAG6B,IAAI,CAAC,YAAY,CAAC;QACtCH,OAAO,CAACL,GAAG,CACT,cAAc,EACboI,IAAI,IAAKpE,KAAK,CAAClE,QAAQ,GAAGP,mBAAmB,CAACZ,WAAW,EAAEqF,KAAK,CAACpG,KAAK,EAAEwK,IAAI,CAAC,GAAG/M,WAAW,CAAC+M,IAAI,EAAEpE,KAAK,CAACpG,KAAK,CAChH,CAAC;MACH,CAAC;MACDuE,UAAUA,CAAAyR,MAAA,EAAqB;QAAA,IAApB;UAAEvT,OAAO;UAAE2D;QAAM,CAAC,GAAA4P,MAAA;QAC3BvT,OAAO,CAACL,GAAG,CAAC,cAAc,EAAEgE,KAAK,CAACpG,KAAK,CAAC;MAC1C,CAAC;MACDwE,YAAYA,CAAAyR,MAAA,EAAc;QAAA,IAAb;UAAExT;QAAQ,CAAC,GAAAwT,MAAA;QACtBxT,OAAO,CAACL,GAAG,CAAC,cAAc,EAAE,EAAE,CAAC;MACjC;IACF;EACF;AACF,CAAC,CAAC;AACF,IAAIoL,KAAK,GAAGhP,WAAW,CAAC,CAAC,CAAC,CACxB,KAAK,EACL,YAAY,EACZ,KAAK,EACL,eAAe,EACf,eAAe,EACf,qBAAqB,EACrB,cAAc,EACd,aAAa,EACb,IAAI,EACJ,kBAAkB,EAClB,eAAe,EACf,mBAAmB,EACnB,cAAc,EACd,eAAe,EACf,eAAe,EACf,WAAW,EACX,sBAAsB,EACtB,sBAAsB,EACtB,qBAAqB,EACrB,iBAAiB,EACjB,wBAAwB,EACxB,qBAAqB,EACrB,cAAc,CACf,CAAC;AACF,IAAI0X,UAAU,GAAGhY,gBAAgB,CAACsP,KAAK,CAAC;AACxC,IAAI2I,SAAS,GAAG3X,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACpD,IAAI4X,cAAc,GAAGlY,gBAAgB,CAACiY,SAAS,CAAC;AAEhD,SAAS1X,OAAO,EAAEG,UAAU,EAAE0D,OAAO,EAAErD,kBAAkB,EAAEkX,SAAS,EAAE5I,OAAO,EAAEC,KAAK,EAAE4I,cAAc,EAAEF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}