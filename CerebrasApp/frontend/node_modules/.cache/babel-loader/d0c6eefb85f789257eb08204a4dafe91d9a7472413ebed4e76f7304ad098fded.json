{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { useRenderStrategyPropsContext } from '../../utils/render-strategy.js';\nimport { CollapsibleRoot } from '../collapsible/collapsible-root.js';\nimport { useTreeViewContext } from './use-tree-view-context.js';\nimport { useTreeViewNodeContext } from './use-tree-view-node-context.js';\nimport { useTreeViewNodePropsContext } from './use-tree-view-node-props-context.js';\nconst TreeViewBranch = forwardRef((props, ref) => {\n  const treeView = useTreeViewContext();\n  const nodeProps = useTreeViewNodePropsContext();\n  const nodeState = useTreeViewNodeContext();\n  const renderStrategyProps = useRenderStrategyPropsContext();\n  const mergedProps = mergeProps(treeView.getBranchProps(nodeProps), props);\n  const branchContentProps = treeView.getBranchContentProps(nodeProps);\n  return /* @__PURE__ */jsx(CollapsibleRoot, _objectSpread(_objectSpread({\n    ref,\n    open: nodeState.expanded,\n    ids: {\n      content: branchContentProps.id\n    }\n  }, renderStrategyProps), mergedProps));\n});\nTreeViewBranch.displayName = \"TreeViewBranch\";\nexport { TreeViewBranch };","map":{"version":3,"names":["_objectSpread","jsx","mergeProps","forwardRef","useRenderStrategyPropsContext","CollapsibleRoot","useTreeViewContext","useTreeViewNodeContext","useTreeViewNodePropsContext","TreeViewBranch","props","ref","treeView","nodeProps","nodeState","renderStrategyProps","mergedProps","getBranchProps","branchContentProps","getBranchContentProps","open","expanded","ids","content","id","displayName"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@ark-ui/react/dist/components/tree-view/tree-view-branch.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { useRenderStrategyPropsContext } from '../../utils/render-strategy.js';\nimport { CollapsibleRoot } from '../collapsible/collapsible-root.js';\nimport { useTreeViewContext } from './use-tree-view-context.js';\nimport { useTreeViewNodeContext } from './use-tree-view-node-context.js';\nimport { useTreeViewNodePropsContext } from './use-tree-view-node-props-context.js';\n\nconst TreeViewBranch = forwardRef((props, ref) => {\n  const treeView = useTreeViewContext();\n  const nodeProps = useTreeViewNodePropsContext();\n  const nodeState = useTreeViewNodeContext();\n  const renderStrategyProps = useRenderStrategyPropsContext();\n  const mergedProps = mergeProps(treeView.getBranchProps(nodeProps), props);\n  const branchContentProps = treeView.getBranchContentProps(nodeProps);\n  return /* @__PURE__ */ jsx(\n    CollapsibleRoot,\n    {\n      ref,\n      open: nodeState.expanded,\n      ids: { content: branchContentProps.id },\n      ...renderStrategyProps,\n      ...mergedProps\n    }\n  );\n});\nTreeViewBranch.displayName = \"TreeViewBranch\";\n\nexport { TreeViewBranch };\n"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,aAAA;AACb,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,6BAA6B,QAAQ,gCAAgC;AAC9E,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,SAASC,2BAA2B,QAAQ,uCAAuC;AAEnF,MAAMC,cAAc,GAAGN,UAAU,CAAC,CAACO,KAAK,EAAEC,GAAG,KAAK;EAChD,MAAMC,QAAQ,GAAGN,kBAAkB,CAAC,CAAC;EACrC,MAAMO,SAAS,GAAGL,2BAA2B,CAAC,CAAC;EAC/C,MAAMM,SAAS,GAAGP,sBAAsB,CAAC,CAAC;EAC1C,MAAMQ,mBAAmB,GAAGX,6BAA6B,CAAC,CAAC;EAC3D,MAAMY,WAAW,GAAGd,UAAU,CAACU,QAAQ,CAACK,cAAc,CAACJ,SAAS,CAAC,EAAEH,KAAK,CAAC;EACzE,MAAMQ,kBAAkB,GAAGN,QAAQ,CAACO,qBAAqB,CAACN,SAAS,CAAC;EACpE,OAAO,eAAgBZ,GAAG,CACxBI,eAAe,EAAAL,aAAA,CAAAA,aAAA;IAEbW,GAAG;IACHS,IAAI,EAAEN,SAAS,CAACO,QAAQ;IACxBC,GAAG,EAAE;MAAEC,OAAO,EAAEL,kBAAkB,CAACM;IAAG;EAAC,GACpCT,mBAAmB,GACnBC,WAAW,CAElB,CAAC;AACH,CAAC,CAAC;AACFP,cAAc,CAACgB,WAAW,GAAG,gBAAgB;AAE7C,SAAShB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}