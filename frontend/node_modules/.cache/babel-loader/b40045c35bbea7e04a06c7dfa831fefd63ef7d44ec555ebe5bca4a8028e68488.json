{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useChakraContext } from '../styled-system/provider.js';\nimport { useMediaQuery } from './use-media-query.js';\nfunction useBreakpoint() {\n  var _breakpoints$index$br, _breakpoints$index;\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options.fallback || (options.fallback = \"base\");\n  const sys = useChakraContext();\n  let fallbackPassed = false;\n  const allBreakpoints = sys.breakpoints.values;\n  const breakpoints = allBreakpoints.map(_ref => {\n    let {\n      min,\n      name: breakpoint\n    } = _ref;\n    const item = {\n      breakpoint,\n      query: \"(min-width: \".concat(min, \")\"),\n      fallback: !fallbackPassed\n    };\n    if (breakpoint === options.fallback) {\n      fallbackPassed = true;\n    }\n    return item;\n  }).filter(_ref2 => {\n    var _options$breakpoints;\n    let {\n      breakpoint\n    } = _ref2;\n    return !!((_options$breakpoints = options.breakpoints) !== null && _options$breakpoints !== void 0 && _options$breakpoints.includes(breakpoint));\n  });\n  const fallback = breakpoints.map(_ref3 => {\n    let {\n      fallback: fallback2\n    } = _ref3;\n    return fallback2;\n  });\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: options.ssr\n  });\n  const index = values.lastIndexOf(true);\n  return (_breakpoints$index$br = (_breakpoints$index = breakpoints[index]) === null || _breakpoints$index === void 0 ? void 0 : _breakpoints$index.breakpoint) !== null && _breakpoints$index$br !== void 0 ? _breakpoints$index$br : options.fallback;\n}\nfunction useBreakpointValue(value, opts) {\n  const sys = useChakraContext();\n  const normalized = sys.normalizeValue(value);\n  const breakpoint = useBreakpoint(_objectSpread({\n    breakpoints: Object.keys(normalized)\n  }, opts));\n  return normalized[breakpoint];\n}\nexport { useBreakpoint, useBreakpointValue };","map":{"version":3,"names":["_objectSpread","useChakraContext","useMediaQuery","useBreakpoint","_breakpoints$index$br","_breakpoints$index","options","arguments","length","undefined","fallback","sys","fallbackPassed","allBreakpoints","breakpoints","values","map","_ref","min","name","breakpoint","item","query","concat","filter","_ref2","_options$breakpoints","includes","_ref3","fallback2","bp","ssr","index","lastIndexOf","useBreakpointValue","value","opts","normalized","normalizeValue","Object","keys"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@chakra-ui/react/dist/esm/hooks/use-breakpoint.js"],"sourcesContent":["\"use strict\";\n\"use client\";\nimport { useChakraContext } from '../styled-system/provider.js';\nimport { useMediaQuery } from './use-media-query.js';\n\nfunction useBreakpoint(options = {}) {\n  options.fallback || (options.fallback = \"base\");\n  const sys = useChakraContext();\n  let fallbackPassed = false;\n  const allBreakpoints = sys.breakpoints.values;\n  const breakpoints = allBreakpoints.map(({ min, name: breakpoint }) => {\n    const item = {\n      breakpoint,\n      query: `(min-width: ${min})`,\n      fallback: !fallbackPassed\n    };\n    if (breakpoint === options.fallback) {\n      fallbackPassed = true;\n    }\n    return item;\n  }).filter(({ breakpoint }) => !!options.breakpoints?.includes(breakpoint));\n  const fallback = breakpoints.map(({ fallback: fallback2 }) => fallback2);\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: options.ssr }\n  );\n  const index = values.lastIndexOf(true);\n  return breakpoints[index]?.breakpoint ?? options.fallback;\n}\nfunction useBreakpointValue(value, opts) {\n  const sys = useChakraContext();\n  const normalized = sys.normalizeValue(value);\n  const breakpoint = useBreakpoint({\n    breakpoints: Object.keys(normalized),\n    ...opts\n  });\n  return normalized[breakpoint];\n}\n\nexport { useBreakpoint, useBreakpointValue };\n"],"mappings":"AAAA,YAAY;AACZ,YAAY;;AAAC,OAAAA,aAAA;AACb,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,SAASC,aAAaA,CAAA,EAAe;EAAA,IAAAC,qBAAA,EAAAC,kBAAA;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACjCD,OAAO,CAACI,QAAQ,KAAKJ,OAAO,CAACI,QAAQ,GAAG,MAAM,CAAC;EAC/C,MAAMC,GAAG,GAAGV,gBAAgB,CAAC,CAAC;EAC9B,IAAIW,cAAc,GAAG,KAAK;EAC1B,MAAMC,cAAc,GAAGF,GAAG,CAACG,WAAW,CAACC,MAAM;EAC7C,MAAMD,WAAW,GAAGD,cAAc,CAACG,GAAG,CAACC,IAAA,IAA+B;IAAA,IAA9B;MAAEC,GAAG;MAAEC,IAAI,EAAEC;IAAW,CAAC,GAAAH,IAAA;IAC/D,MAAMI,IAAI,GAAG;MACXD,UAAU;MACVE,KAAK,iBAAAC,MAAA,CAAiBL,GAAG,MAAG;MAC5BR,QAAQ,EAAE,CAACE;IACb,CAAC;IACD,IAAIQ,UAAU,KAAKd,OAAO,CAACI,QAAQ,EAAE;MACnCE,cAAc,GAAG,IAAI;IACvB;IACA,OAAOS,IAAI;EACb,CAAC,CAAC,CAACG,MAAM,CAACC,KAAA;IAAA,IAAAC,oBAAA;IAAA,IAAC;MAAEN;IAAW,CAAC,GAAAK,KAAA;IAAA,OAAK,CAAC,GAAAC,oBAAA,GAACpB,OAAO,CAACQ,WAAW,cAAAY,oBAAA,eAAnBA,oBAAA,CAAqBC,QAAQ,CAACP,UAAU,CAAC;EAAA,EAAC;EAC1E,MAAMV,QAAQ,GAAGI,WAAW,CAACE,GAAG,CAACY,KAAA;IAAA,IAAC;MAAElB,QAAQ,EAAEmB;IAAU,CAAC,GAAAD,KAAA;IAAA,OAAKC,SAAS;EAAA,EAAC;EACxE,MAAMd,MAAM,GAAGb,aAAa,CAC1BY,WAAW,CAACE,GAAG,CAAEc,EAAE,IAAKA,EAAE,CAACR,KAAK,CAAC,EACjC;IAAEZ,QAAQ;IAAEqB,GAAG,EAAEzB,OAAO,CAACyB;EAAI,CAC/B,CAAC;EACD,MAAMC,KAAK,GAAGjB,MAAM,CAACkB,WAAW,CAAC,IAAI,CAAC;EACtC,QAAA7B,qBAAA,IAAAC,kBAAA,GAAOS,WAAW,CAACkB,KAAK,CAAC,cAAA3B,kBAAA,uBAAlBA,kBAAA,CAAoBe,UAAU,cAAAhB,qBAAA,cAAAA,qBAAA,GAAIE,OAAO,CAACI,QAAQ;AAC3D;AACA,SAASwB,kBAAkBA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACvC,MAAMzB,GAAG,GAAGV,gBAAgB,CAAC,CAAC;EAC9B,MAAMoC,UAAU,GAAG1B,GAAG,CAAC2B,cAAc,CAACH,KAAK,CAAC;EAC5C,MAAMf,UAAU,GAAGjB,aAAa,CAAAH,aAAA;IAC9Bc,WAAW,EAAEyB,MAAM,CAACC,IAAI,CAACH,UAAU;EAAC,GACjCD,IAAI,CACR,CAAC;EACF,OAAOC,UAAU,CAACjB,UAAU,CAAC;AAC/B;AAEA,SAASjB,aAAa,EAAE+B,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}