{"ast":null,"code":"'use client';\n\nimport { Selection } from '@zag-js/collection';\nimport { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useEvent } from '../../utils/use-event.js';\nfunction useListSelection(props) {\n  const {\n    collection,\n    selectionMode = \"single\",\n    deselectable = true,\n    initialSelectedValues = [],\n    resetOnCollectionChange = false\n  } = props;\n  const createSelection = useCallback(function () {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const selection2 = new Selection(values);\n    selection2.selectionMode = selectionMode;\n    selection2.deselectable = deselectable;\n    return selection2;\n  }, [selectionMode, deselectable]);\n  const [selection, setSelectionState] = useState(() => createSelection(initialSelectedValues));\n  useEffect(() => {\n    if (resetOnCollectionChange) {\n      setSelectionState(createSelection());\n    }\n  }, [collection.toString(), resetOnCollectionChange, createSelection]);\n  const selectedValues = useMemo(() => Array.from(selection), [selection]);\n  const isEmpty = useMemo(() => selection.isEmpty(), [selection]);\n  const firstSelectedValue = useMemo(() => selection.firstSelectedValue(collection), [selection, collection]);\n  const lastSelectedValue = useMemo(() => selection.lastSelectedValue(collection), [selection, collection]);\n  return {\n    selectedValues,\n    isEmpty,\n    firstSelectedValue,\n    lastSelectedValue,\n    isSelected: useEvent(value => {\n      return selection.isSelected(value);\n    }),\n    isAllSelected: useEvent(() => {\n      const allValues = collection.getValues();\n      return allValues.length > 0 && allValues.every(value => selection.isSelected(value));\n    }),\n    isSomeSelected: useEvent(() => {\n      const allValues = collection.getValues();\n      return allValues.some(value => selection.isSelected(value));\n    }),\n    canSelect: useEvent(value => {\n      return selection.canSelect(collection, value);\n    }),\n    select: useEvent((value, forceToggle) => {\n      setSelectionState(selection.select(collection, value, forceToggle));\n    }),\n    deselect: useEvent(value => {\n      setSelectionState(selection.deselect(value));\n    }),\n    toggle: useEvent(value => {\n      setSelectionState(selection.toggleSelection(collection, value));\n    }),\n    replace: useEvent(value => {\n      setSelectionState(selection.replaceSelection(collection, value));\n    }),\n    extend: useEvent((anchorValue, targetValue) => {\n      setSelectionState(selection.extendSelection(collection, anchorValue, targetValue));\n    }),\n    setSelectedValues: useEvent(values => {\n      setSelectionState(selection.setSelection(values));\n    }),\n    clear: useEvent(() => {\n      setSelectionState(selection.clearSelection());\n    }),\n    resetSelection: useEvent(() => {\n      setSelectionState(createSelection());\n    })\n  };\n}\nexport { useListSelection };","map":{"version":3,"names":["Selection","useCallback","useState","useEffect","useMemo","useEvent","useListSelection","props","collection","selectionMode","deselectable","initialSelectedValues","resetOnCollectionChange","createSelection","values","arguments","length","undefined","selection2","selection","setSelectionState","toString","selectedValues","Array","from","isEmpty","firstSelectedValue","lastSelectedValue","isSelected","value","isAllSelected","allValues","getValues","every","isSomeSelected","some","canSelect","select","forceToggle","deselect","toggle","toggleSelection","replace","replaceSelection","extend","anchorValue","targetValue","extendSelection","setSelectedValues","setSelection","clear","clearSelection","resetSelection"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@ark-ui/react/dist/components/collection/use-list-selection.js"],"sourcesContent":["'use client';\nimport { Selection } from '@zag-js/collection';\nimport { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useEvent } from '../../utils/use-event.js';\n\nfunction useListSelection(props) {\n  const {\n    collection,\n    selectionMode = \"single\",\n    deselectable = true,\n    initialSelectedValues = [],\n    resetOnCollectionChange = false\n  } = props;\n  const createSelection = useCallback(\n    (values = []) => {\n      const selection2 = new Selection(values);\n      selection2.selectionMode = selectionMode;\n      selection2.deselectable = deselectable;\n      return selection2;\n    },\n    [selectionMode, deselectable]\n  );\n  const [selection, setSelectionState] = useState(() => createSelection(initialSelectedValues));\n  useEffect(() => {\n    if (resetOnCollectionChange) {\n      setSelectionState(createSelection());\n    }\n  }, [collection.toString(), resetOnCollectionChange, createSelection]);\n  const selectedValues = useMemo(() => Array.from(selection), [selection]);\n  const isEmpty = useMemo(() => selection.isEmpty(), [selection]);\n  const firstSelectedValue = useMemo(() => selection.firstSelectedValue(collection), [selection, collection]);\n  const lastSelectedValue = useMemo(() => selection.lastSelectedValue(collection), [selection, collection]);\n  return {\n    selectedValues,\n    isEmpty,\n    firstSelectedValue,\n    lastSelectedValue,\n    isSelected: useEvent((value) => {\n      return selection.isSelected(value);\n    }),\n    isAllSelected: useEvent(() => {\n      const allValues = collection.getValues();\n      return allValues.length > 0 && allValues.every((value) => selection.isSelected(value));\n    }),\n    isSomeSelected: useEvent(() => {\n      const allValues = collection.getValues();\n      return allValues.some((value) => selection.isSelected(value));\n    }),\n    canSelect: useEvent((value) => {\n      return selection.canSelect(collection, value);\n    }),\n    select: useEvent((value, forceToggle) => {\n      setSelectionState(selection.select(collection, value, forceToggle));\n    }),\n    deselect: useEvent((value) => {\n      setSelectionState(selection.deselect(value));\n    }),\n    toggle: useEvent((value) => {\n      setSelectionState(selection.toggleSelection(collection, value));\n    }),\n    replace: useEvent((value) => {\n      setSelectionState(selection.replaceSelection(collection, value));\n    }),\n    extend: useEvent((anchorValue, targetValue) => {\n      setSelectionState(selection.extendSelection(collection, anchorValue, targetValue));\n    }),\n    setSelectedValues: useEvent((values) => {\n      setSelectionState(selection.setSelection(values));\n    }),\n    clear: useEvent(() => {\n      setSelectionState(selection.clearSelection());\n    }),\n    resetSelection: useEvent(() => {\n      setSelectionState(createSelection());\n    })\n  };\n}\n\nexport { useListSelection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}