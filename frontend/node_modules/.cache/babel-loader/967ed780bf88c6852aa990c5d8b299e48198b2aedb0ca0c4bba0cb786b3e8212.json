{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { getDocument, getWindow } from '@zag-js/dom-query';\nimport { useState, useMemo } from 'react';\nimport { runIfFn } from '../../utils/run-if-fn.js';\nimport { EnvironmentContextProvider } from './use-environment-context.js';\nconst EnvironmentProvider = props => {\n  const {\n    value,\n    children\n  } = props;\n  const [spanRef, setSpanRef] = useState();\n  const getRootNode = useMemo(() => {\n    return () => {\n      var _ref, _runIfFn;\n      return (_ref = (_runIfFn = runIfFn(value)) !== null && _runIfFn !== void 0 ? _runIfFn : spanRef === null || spanRef === void 0 ? void 0 : spanRef.getRootNode()) !== null && _ref !== void 0 ? _ref : document;\n    };\n  }, [value, spanRef]);\n  const environment = useMemo(() => ({\n    getRootNode,\n    getWindow: () => getWindow(getRootNode()),\n    getDocument: () => getDocument(getRootNode())\n  }), [getRootNode]);\n  return /* @__PURE__ */jsxs(EnvironmentContextProvider, {\n    value: environment,\n    children: [children, !value && /* @__PURE__ */jsx(\"span\", {\n      hidden: true,\n      ref: setSpanRef\n    })]\n  });\n};\nexport { EnvironmentProvider };","map":{"version":3,"names":["jsxs","jsx","getDocument","getWindow","useState","useMemo","runIfFn","EnvironmentContextProvider","EnvironmentProvider","props","value","children","spanRef","setSpanRef","getRootNode","_ref","_runIfFn","document","environment","hidden","ref"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@ark-ui/react/dist/providers/environment/environment-provider.js"],"sourcesContent":["'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { getDocument, getWindow } from '@zag-js/dom-query';\nimport { useState, useMemo } from 'react';\nimport { runIfFn } from '../../utils/run-if-fn.js';\nimport { EnvironmentContextProvider } from './use-environment-context.js';\n\nconst EnvironmentProvider = (props) => {\n  const { value, children } = props;\n  const [spanRef, setSpanRef] = useState();\n  const getRootNode = useMemo(() => {\n    return () => runIfFn(value) ?? spanRef?.getRootNode() ?? document;\n  }, [value, spanRef]);\n  const environment = useMemo(\n    () => ({\n      getRootNode,\n      getWindow: () => getWindow(getRootNode()),\n      getDocument: () => getDocument(getRootNode())\n    }),\n    [getRootNode]\n  );\n  return /* @__PURE__ */ jsxs(EnvironmentContextProvider, { value: environment, children: [\n    children,\n    !value && /* @__PURE__ */ jsx(\"span\", { hidden: true, ref: setSpanRef })\n  ] });\n};\n\nexport { EnvironmentProvider };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,IAAI,EAAEC,GAAG,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,EAAEC,SAAS,QAAQ,mBAAmB;AAC1D,SAASC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACzC,SAASC,OAAO,QAAQ,0BAA0B;AAClD,SAASC,0BAA0B,QAAQ,8BAA8B;AAEzE,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EACrC,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGF,KAAK;EACjC,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC;EACxC,MAAMU,WAAW,GAAGT,OAAO,CAAC,MAAM;IAChC,OAAO;MAAA,IAAAU,IAAA,EAAAC,QAAA;MAAA,QAAAD,IAAA,IAAAC,QAAA,GAAMV,OAAO,CAACI,KAAK,CAAC,cAAAM,QAAA,cAAAA,QAAA,GAAIJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,WAAW,CAAC,CAAC,cAAAC,IAAA,cAAAA,IAAA,GAAIE,QAAQ;IAAA;EACnE,CAAC,EAAE,CAACP,KAAK,EAAEE,OAAO,CAAC,CAAC;EACpB,MAAMM,WAAW,GAAGb,OAAO,CACzB,OAAO;IACLS,WAAW;IACXX,SAAS,EAAEA,CAAA,KAAMA,SAAS,CAACW,WAAW,CAAC,CAAC,CAAC;IACzCZ,WAAW,EAAEA,CAAA,KAAMA,WAAW,CAACY,WAAW,CAAC,CAAC;EAC9C,CAAC,CAAC,EACF,CAACA,WAAW,CACd,CAAC;EACD,OAAO,eAAgBd,IAAI,CAACO,0BAA0B,EAAE;IAAEG,KAAK,EAAEQ,WAAW;IAAEP,QAAQ,EAAE,CACtFA,QAAQ,EACR,CAACD,KAAK,IAAI,eAAgBT,GAAG,CAAC,MAAM,EAAE;MAAEkB,MAAM,EAAE,IAAI;MAAEC,GAAG,EAAEP;IAAW,CAAC,CAAC;EACxE,CAAC,CAAC;AACN,CAAC;AAED,SAASL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}