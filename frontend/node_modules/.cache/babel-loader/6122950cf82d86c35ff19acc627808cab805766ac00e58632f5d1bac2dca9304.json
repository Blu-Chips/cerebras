{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { keyPathToKey, jsonNodeToElement, getAccessibleDescription } from '@zag-js/json-tree-utils';\nimport { useMemo } from 'react';\nimport { TreeViewBranch } from '../tree-view/tree-view-branch.js';\nimport { TreeViewBranchContent } from '../tree-view/tree-view-branch-content.js';\nimport { TreeViewBranchControl } from '../tree-view/tree-view-branch-control.js';\nimport { TreeViewBranchIndentGuide } from '../tree-view/tree-view-branch-indent-guide.js';\nimport { TreeViewBranchIndicator } from '../tree-view/tree-view-branch-indicator.js';\nimport { TreeViewBranchText } from '../tree-view/tree-view-branch-text.js';\nimport { TreeViewItem } from '../tree-view/tree-view-item.js';\nimport { TreeViewItemText } from '../tree-view/tree-view-item-text.js';\nimport { TreeViewNodeProvider } from '../tree-view/tree-view-node-provider.js';\nimport { useTreeViewContext } from '../tree-view/use-tree-view-context.js';\nimport { JsonTreeViewKeyNode } from './json-tree-view-key-node.js';\nimport { useJsonTreeViewPropsContext } from './json-tree-view-props-context.js';\nimport { JsonTreeViewValueNode } from './json-tree-view-value-node.js';\nconst scopeProps = {\n  \"data-scope\": \"json-tree-view\"\n};\nfunction JsonTreeViewNode(props) {\n  var _node$children;\n  const {\n    node,\n    indexPath,\n    arrow,\n    indentGuide,\n    renderValue\n  } = props;\n  const options = useJsonTreeViewPropsContext();\n  const tree = useTreeViewContext();\n  const nodeState = tree.getNodeState({\n    node,\n    indexPath\n  });\n  const key = keyPathToKey(node.keyPath, {\n    excludeRoot: true\n  });\n  const valueNode = useMemo(() => jsonNodeToElement(node, options), [node, options]);\n  const nodeProps = useMemo(() => {\n    const desc = getAccessibleDescription(node);\n    const line = indexPath.reduce((acc, curr) => acc + curr, 1);\n    const lineLength = indexPath.length - 1;\n    return _objectSpread(_objectSpread({}, scopeProps), {}, {\n      \"aria-label\": desc,\n      \"data-line\": line,\n      style: {\n        [\"--line-length\"]: lineLength\n      }\n    });\n  }, [indexPath, node]);\n  return /* @__PURE__ */jsx(TreeViewNodeProvider, {\n    node,\n    indexPath,\n    children: nodeState.isBranch ? /* @__PURE__ */jsxs(TreeViewBranch, _objectSpread(_objectSpread({}, scopeProps), {}, {\n      children: [/* @__PURE__ */jsxs(TreeViewBranchControl, _objectSpread(_objectSpread({}, nodeProps), {}, {\n        children: [arrow && /* @__PURE__ */jsx(TreeViewBranchIndicator, _objectSpread(_objectSpread({}, scopeProps), {}, {\n          children: arrow\n        })), /* @__PURE__ */jsxs(TreeViewBranchText, _objectSpread(_objectSpread({}, scopeProps), {}, {\n          children: [key && /* @__PURE__ */jsx(JsonTreeViewKeyNode, {\n            node,\n            showQuotes: options.quotesOnKeys\n          }), /* @__PURE__ */jsx(JsonTreeViewValueNode, {\n            node: valueNode,\n            renderValue\n          })]\n        }))]\n      })), /* @__PURE__ */jsxs(TreeViewBranchContent, _objectSpread(_objectSpread({}, scopeProps), {}, {\n        children: [typeof indentGuide === \"boolean\" ? /* @__PURE__ */jsx(TreeViewBranchIndentGuide, {}) : indentGuide, (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.map((child, index) => /* @__PURE__ */jsx(JsonTreeViewNode, _objectSpread(_objectSpread({}, props), {}, {\n          node: child,\n          indexPath: [...indexPath, index]\n        }), index))]\n      }))]\n    })) : /* @__PURE__ */jsx(TreeViewItem, _objectSpread(_objectSpread({}, nodeProps), {}, {\n      children: /* @__PURE__ */jsxs(TreeViewItemText, _objectSpread(_objectSpread({}, scopeProps), {}, {\n        children: [key && /* @__PURE__ */jsx(JsonTreeViewKeyNode, {\n          node,\n          showQuotes: options.quotesOnKeys\n        }), /* @__PURE__ */jsx(JsonTreeViewValueNode, {\n          node: valueNode,\n          renderValue\n        })]\n      }))\n    }))\n  });\n}\nexport { JsonTreeViewNode };","map":{"version":3,"names":["_objectSpread","jsx","jsxs","keyPathToKey","jsonNodeToElement","getAccessibleDescription","useMemo","TreeViewBranch","TreeViewBranchContent","TreeViewBranchControl","TreeViewBranchIndentGuide","TreeViewBranchIndicator","TreeViewBranchText","TreeViewItem","TreeViewItemText","TreeViewNodeProvider","useTreeViewContext","JsonTreeViewKeyNode","useJsonTreeViewPropsContext","JsonTreeViewValueNode","scopeProps","JsonTreeViewNode","props","_node$children","node","indexPath","arrow","indentGuide","renderValue","options","tree","nodeState","getNodeState","key","keyPath","excludeRoot","valueNode","nodeProps","desc","line","reduce","acc","curr","lineLength","length","style","children","isBranch","showQuotes","quotesOnKeys","map","child","index"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@ark-ui/react/dist/components/json-tree-view/json-tree-view-node.js"],"sourcesContent":["'use client';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { keyPathToKey, jsonNodeToElement, getAccessibleDescription } from '@zag-js/json-tree-utils';\nimport { useMemo } from 'react';\nimport { TreeViewBranch } from '../tree-view/tree-view-branch.js';\nimport { TreeViewBranchContent } from '../tree-view/tree-view-branch-content.js';\nimport { TreeViewBranchControl } from '../tree-view/tree-view-branch-control.js';\nimport { TreeViewBranchIndentGuide } from '../tree-view/tree-view-branch-indent-guide.js';\nimport { TreeViewBranchIndicator } from '../tree-view/tree-view-branch-indicator.js';\nimport { TreeViewBranchText } from '../tree-view/tree-view-branch-text.js';\nimport { TreeViewItem } from '../tree-view/tree-view-item.js';\nimport { TreeViewItemText } from '../tree-view/tree-view-item-text.js';\nimport { TreeViewNodeProvider } from '../tree-view/tree-view-node-provider.js';\nimport { useTreeViewContext } from '../tree-view/use-tree-view-context.js';\nimport { JsonTreeViewKeyNode } from './json-tree-view-key-node.js';\nimport { useJsonTreeViewPropsContext } from './json-tree-view-props-context.js';\nimport { JsonTreeViewValueNode } from './json-tree-view-value-node.js';\n\nconst scopeProps = {\n  \"data-scope\": \"json-tree-view\"\n};\nfunction JsonTreeViewNode(props) {\n  const { node, indexPath, arrow, indentGuide, renderValue } = props;\n  const options = useJsonTreeViewPropsContext();\n  const tree = useTreeViewContext();\n  const nodeState = tree.getNodeState({ node, indexPath });\n  const key = keyPathToKey(node.keyPath, { excludeRoot: true });\n  const valueNode = useMemo(() => jsonNodeToElement(node, options), [node, options]);\n  const nodeProps = useMemo(() => {\n    const desc = getAccessibleDescription(node);\n    const line = indexPath.reduce((acc, curr) => acc + curr, 1);\n    const lineLength = indexPath.length - 1;\n    return {\n      ...scopeProps,\n      \"aria-label\": desc,\n      \"data-line\": line,\n      style: { [\"--line-length\"]: lineLength }\n    };\n  }, [indexPath, node]);\n  return /* @__PURE__ */ jsx(TreeViewNodeProvider, { node, indexPath, children: nodeState.isBranch ? /* @__PURE__ */ jsxs(TreeViewBranch, { ...scopeProps, children: [\n    /* @__PURE__ */ jsxs(TreeViewBranchControl, { ...nodeProps, children: [\n      arrow && /* @__PURE__ */ jsx(TreeViewBranchIndicator, { ...scopeProps, children: arrow }),\n      /* @__PURE__ */ jsxs(TreeViewBranchText, { ...scopeProps, children: [\n        key && /* @__PURE__ */ jsx(JsonTreeViewKeyNode, { node, showQuotes: options.quotesOnKeys }),\n        /* @__PURE__ */ jsx(JsonTreeViewValueNode, { node: valueNode, renderValue })\n      ] })\n    ] }),\n    /* @__PURE__ */ jsxs(TreeViewBranchContent, { ...scopeProps, children: [\n      typeof indentGuide === \"boolean\" ? /* @__PURE__ */ jsx(TreeViewBranchIndentGuide, {}) : indentGuide,\n      node.children?.map((child, index) => /* @__PURE__ */ jsx(JsonTreeViewNode, { ...props, node: child, indexPath: [...indexPath, index] }, index))\n    ] })\n  ] }) : /* @__PURE__ */ jsx(TreeViewItem, { ...nodeProps, children: /* @__PURE__ */ jsxs(TreeViewItemText, { ...scopeProps, children: [\n    key && /* @__PURE__ */ jsx(JsonTreeViewKeyNode, { node, showQuotes: options.quotesOnKeys }),\n    /* @__PURE__ */ jsx(JsonTreeViewValueNode, { node: valueNode, renderValue })\n  ] }) }) });\n}\n\nexport { JsonTreeViewNode };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}