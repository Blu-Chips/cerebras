{"ast":null,"code":"\"use strict\";\n\nimport _objectSpread from \"C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst plainTextAdapter = {\n  getHighlighter: () => _ref => {\n    let {\n      code\n    } = _ref;\n    return {\n      code,\n      highlighted: false\n    };\n  }\n};\nfunction createShikiAdapter(opts) {\n  const {\n    load,\n    loadSync,\n    highlightOptions,\n    theme\n  } = opts;\n  return {\n    loadContextSync: loadSync,\n    loadContext: load,\n    unloadContext(ctx) {\n      var _ctx$dispose;\n      ctx === null || ctx === void 0 || (_ctx$dispose = ctx.dispose) === null || _ctx$dispose === void 0 || _ctx$dispose.call(ctx);\n    },\n    getHighlighter: ctx => {\n      return _ref2 => {\n        var _highlightOptions$tra;\n        let {\n          code,\n          language,\n          meta\n        } = _ref2;\n        if (!ctx) {\n          return {\n            code,\n            highlighted: false\n          };\n        }\n        const colorScheme = (meta === null || meta === void 0 ? void 0 : meta.colorScheme) || \"dark\";\n        const resolvedTheme = typeof theme === \"string\" ? theme : theme[colorScheme];\n        if (!resolvedTheme) {\n          throw new Error(\"Theme not found for color scheme: \".concat(colorScheme));\n        }\n        return {\n          highlighted: true,\n          code: removeWrapperTags(ctx.codeToHtml(code, _objectSpread(_objectSpread({\n            theme: resolvedTheme\n          }, highlightOptions), {}, {\n            lang: language,\n            transformers: [{\n              line(hast, line) {\n                var _meta$highlightLines, _meta$addedLineNumber, _meta$removedLineNumb, _meta$focusedLineNumb;\n                hast.properties || (hast.properties = {});\n                Object.assign(hast.properties, {\n                  \"data-line\": line,\n                  \"data-highlight\": meta !== null && meta !== void 0 && (_meta$highlightLines = meta.highlightLines) !== null && _meta$highlightLines !== void 0 && _meta$highlightLines.includes(line) ? \"\" : void 0,\n                  \"data-word-wrap\": meta !== null && meta !== void 0 && meta.wordWrap ? \"\" : void 0,\n                  \"data-diff\": meta !== null && meta !== void 0 && (_meta$addedLineNumber = meta.addedLineNumbers) !== null && _meta$addedLineNumber !== void 0 && _meta$addedLineNumber.includes(line) ? \"added\" : meta !== null && meta !== void 0 && (_meta$removedLineNumb = meta.removedLineNumbers) !== null && _meta$removedLineNumb !== void 0 && _meta$removedLineNumb.includes(line) ? \"removed\" : void 0,\n                  \"data-focused\": meta !== null && meta !== void 0 && (_meta$focusedLineNumb = meta.focusedLineNumbers) !== null && _meta$focusedLineNumb !== void 0 && _meta$focusedLineNumb.includes(line) ? \"\" : void 0\n                });\n              }\n            }, ...((_highlightOptions$tra = highlightOptions === null || highlightOptions === void 0 ? void 0 : highlightOptions.transformers) !== null && _highlightOptions$tra !== void 0 ? _highlightOptions$tra : [])]\n          })))\n        };\n      };\n    }\n  };\n}\nconst removeWrapperTags = html => {\n  return html.replace(/<pre[^>]*>/, \"\").replace(/<\\/pre>$/, \"\").replace(/<code[^>]*>/, \"\").replace(/<\\/code>$/, \"\");\n};\nfunction createHighlightJsAdapter(opts) {\n  const {\n    load,\n    loadSync,\n    highlightOptions\n  } = opts;\n  return {\n    loadContextSync: loadSync,\n    loadContext: load,\n    unloadContext(ctx) {\n      var _ctx$listLanguages;\n      const langs = ctx === null || ctx === void 0 || (_ctx$listLanguages = ctx.listLanguages) === null || _ctx$listLanguages === void 0 ? void 0 : _ctx$listLanguages.call(ctx);\n      langs === null || langs === void 0 || langs.forEach(lang => {\n        var _ctx$unregisterLangua;\n        ctx === null || ctx === void 0 || (_ctx$unregisterLangua = ctx.unregisterLanguage) === null || _ctx$unregisterLangua === void 0 || _ctx$unregisterLangua.call(ctx, lang);\n      });\n    },\n    getHighlighter: ctx => {\n      return _ref3 => {\n        var _meta$addedLineNumber2, _meta$addedLineNumber3, _meta$removedLineNumb2, _meta$removedLineNumb3;\n        let {\n          code,\n          language = \"plaintext\",\n          meta\n        } = _ref3;\n        if (!ctx) {\n          return {\n            code,\n            highlighted: false\n          };\n        }\n        const hasDiff = ((_meta$addedLineNumber2 = meta === null || meta === void 0 || (_meta$addedLineNumber3 = meta.addedLineNumbers) === null || _meta$addedLineNumber3 === void 0 ? void 0 : _meta$addedLineNumber3.length) !== null && _meta$addedLineNumber2 !== void 0 ? _meta$addedLineNumber2 : 0) > 0 || ((_meta$removedLineNumb2 = meta === null || meta === void 0 || (_meta$removedLineNumb3 = meta.removedLineNumbers) === null || _meta$removedLineNumb3 === void 0 ? void 0 : _meta$removedLineNumb3.length) !== null && _meta$removedLineNumb2 !== void 0 ? _meta$removedLineNumb2 : 0) > 0;\n        const result = ctx.highlight(code.trim(), _objectSpread({\n          language\n        }, highlightOptions));\n        const lines = result.value.split(\"\\n\");\n        return {\n          highlighted: true,\n          code: lines.map((line, index) => {\n            var _meta$highlightLines2, _meta$addedLineNumber4, _meta$removedLineNumb4;\n            const lineNumber = index + 1;\n            const attrs = [\"data-line=\\\"\".concat(lineNumber, \"\\\"\"), (meta === null || meta === void 0 || (_meta$highlightLines2 = meta.highlightLines) === null || _meta$highlightLines2 === void 0 ? void 0 : _meta$highlightLines2.includes(lineNumber)) && \"data-highlight\", (meta === null || meta === void 0 ? void 0 : meta.wordWrap) && \"data-word-wrap\", hasDiff && \"data-diff=\\\"\".concat(meta !== null && meta !== void 0 && (_meta$addedLineNumber4 = meta.addedLineNumbers) !== null && _meta$addedLineNumber4 !== void 0 && _meta$addedLineNumber4.includes(lineNumber) ? \"added\" : meta !== null && meta !== void 0 && (_meta$removedLineNumb4 = meta.removedLineNumbers) !== null && _meta$removedLineNumb4 !== void 0 && _meta$removedLineNumb4.includes(lineNumber) ? \"removed\" : void 0, \"\\\"\")];\n            return \"<span \".concat(attrs.filter(Boolean).join(\" \"), \">\").concat(line || \" \", \"</span>\");\n          }).join(\"\\n\")\n        };\n      };\n    }\n  };\n}\nexport { createHighlightJsAdapter, createShikiAdapter, plainTextAdapter };","map":{"version":3,"names":["_objectSpread","plainTextAdapter","getHighlighter","_ref","code","highlighted","createShikiAdapter","opts","load","loadSync","highlightOptions","theme","loadContextSync","loadContext","unloadContext","ctx","_ctx$dispose","dispose","call","_ref2","_highlightOptions$tra","language","meta","colorScheme","resolvedTheme","Error","concat","removeWrapperTags","codeToHtml","lang","transformers","line","hast","_meta$highlightLines","_meta$addedLineNumber","_meta$removedLineNumb","_meta$focusedLineNumb","properties","Object","assign","highlightLines","includes","wordWrap","addedLineNumbers","removedLineNumbers","focusedLineNumbers","html","replace","createHighlightJsAdapter","_ctx$listLanguages","langs","listLanguages","forEach","_ctx$unregisterLangua","unregisterLanguage","_ref3","_meta$addedLineNumber2","_meta$addedLineNumber3","_meta$removedLineNumb2","_meta$removedLineNumb3","hasDiff","length","result","highlight","trim","lines","value","split","map","index","_meta$highlightLines2","_meta$addedLineNumber4","_meta$removedLineNumb4","lineNumber","attrs","filter","Boolean","join"],"sources":["C:/Users/JAMES/cerebras-1/CerebrasApp/frontend/node_modules/@chakra-ui/react/dist/esm/components/code-block/adapters.js"],"sourcesContent":["\"use strict\";\nconst plainTextAdapter = {\n  getHighlighter: () => ({ code }) => ({ code, highlighted: false })\n};\nfunction createShikiAdapter(opts) {\n  const { load, loadSync, highlightOptions, theme } = opts;\n  return {\n    loadContextSync: loadSync,\n    loadContext: load,\n    unloadContext(ctx) {\n      ctx?.dispose?.();\n    },\n    getHighlighter: (ctx) => {\n      return ({ code, language, meta }) => {\n        if (!ctx) {\n          return { code, highlighted: false };\n        }\n        const colorScheme = meta?.colorScheme || \"dark\";\n        const resolvedTheme = typeof theme === \"string\" ? theme : theme[colorScheme];\n        if (!resolvedTheme) {\n          throw new Error(`Theme not found for color scheme: ${colorScheme}`);\n        }\n        return {\n          highlighted: true,\n          code: removeWrapperTags(\n            ctx.codeToHtml(code, {\n              theme: resolvedTheme,\n              ...highlightOptions,\n              lang: language,\n              transformers: [\n                {\n                  line(hast, line) {\n                    hast.properties || (hast.properties = {});\n                    Object.assign(hast.properties, {\n                      \"data-line\": line,\n                      \"data-highlight\": meta?.highlightLines?.includes(line) ? \"\" : void 0,\n                      \"data-word-wrap\": meta?.wordWrap ? \"\" : void 0,\n                      \"data-diff\": meta?.addedLineNumbers?.includes(line) ? \"added\" : meta?.removedLineNumbers?.includes(line) ? \"removed\" : void 0,\n                      \"data-focused\": meta?.focusedLineNumbers?.includes(line) ? \"\" : void 0\n                    });\n                  }\n                },\n                ...highlightOptions?.transformers ?? []\n              ]\n            })\n          )\n        };\n      };\n    }\n  };\n}\nconst removeWrapperTags = (html) => {\n  return html.replace(/<pre[^>]*>/, \"\").replace(/<\\/pre>$/, \"\").replace(/<code[^>]*>/, \"\").replace(/<\\/code>$/, \"\");\n};\nfunction createHighlightJsAdapter(opts) {\n  const { load, loadSync, highlightOptions } = opts;\n  return {\n    loadContextSync: loadSync,\n    loadContext: load,\n    unloadContext(ctx) {\n      const langs = ctx?.listLanguages?.();\n      langs?.forEach((lang) => {\n        ctx?.unregisterLanguage?.(lang);\n      });\n    },\n    getHighlighter: (ctx) => {\n      return ({ code, language = \"plaintext\", meta }) => {\n        if (!ctx) {\n          return { code, highlighted: false };\n        }\n        const hasDiff = (meta?.addedLineNumbers?.length ?? 0) > 0 || (meta?.removedLineNumbers?.length ?? 0) > 0;\n        const result = ctx.highlight(code.trim(), {\n          language,\n          ...highlightOptions\n        });\n        const lines = result.value.split(\"\\n\");\n        return {\n          highlighted: true,\n          code: lines.map((line, index) => {\n            const lineNumber = index + 1;\n            const attrs = [\n              `data-line=\"${lineNumber}\"`,\n              meta?.highlightLines?.includes(lineNumber) && \"data-highlight\",\n              meta?.wordWrap && \"data-word-wrap\",\n              hasDiff && `data-diff=\"${meta?.addedLineNumbers?.includes(lineNumber) ? \"added\" : meta?.removedLineNumbers?.includes(lineNumber) ? \"removed\" : void 0}\"`\n            ];\n            return `<span ${attrs.filter(Boolean).join(\" \")}>${line || \" \"}</span>`;\n          }).join(\"\\n\")\n        };\n      };\n    }\n  };\n}\n\nexport { createHighlightJsAdapter, createShikiAdapter, plainTextAdapter };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}